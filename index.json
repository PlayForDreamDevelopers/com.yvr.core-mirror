{
  "Documentation/AdvancedFeatures.html": {
    "href": "Documentation/AdvancedFeatures.html",
    "title": "Advanced Features | Core",
    "keywords": "Advanced Features This section works as an introduction for the advanced features for developers' specific requirements or optimizations. So far, advanced features includes: HMD/Controller Emulator: Tools that allow you to use keyboard and mouse to simulate the behaviour of HMD/controllers in Unity Editor mode. Fixed Foveated Rendering: A feature that reduces resolution of the edge of rendering texture in order to save GPU load. MultiView Stereo Rendering: A feature that supports rendering content to both eye layers simultaneously. Application SpaceWarp: An optimization technique for developers that allows applications to render at half the actual display refresh rate. Spatial Audio: It allows external audio source to be added to the project. OS Splash Screen: Splash Screen is introduced to reduce the initialization time and supports to add an image as the app's splash screen. System Keyboard: System keyboard that allows developers to incorporate it easily into the app. Focus Awareness: System UI to be displayed as an overlay on top of a scene. Display Refresh Rate: It affects the quality of the image displayed to users. Compositor Layers: Can be used to display the object in focus in the scene. Supersampling And Sharpening:"
  },
  "Documentation/AdvancedFeatures/ApplicationSpaceWarp.html": {
    "href": "Documentation/AdvancedFeatures/ApplicationSpaceWarp.html",
    "title": "Application SpaceWarp | Core",
    "keywords": "Application SpaceWarp Application SpaceWarp (AppSW) is an optimization technique for developers that allows applications to render at half the actual display refresh rate, freeing up additional computing power for appropriate content. In testing, AppSW has been shown to provide up to 70% more computing power to applications with virtually no perceptible flaws. When developers turn on AppSW during the development and design phase, the system will extrapolate and re-project frames based on the motion vector and depth information of the original data in the application, and automatically synthesise one frame of the original rendered image into multiple new frames to reduce the original output frame rate of the device, lower the load and power consumption of the device, and ultimately break through the arithmetic limitations to achieve a more lifelike and better picture performance on YVR devices, which is close to that of PCVR. YVR devices can achieve more realistic and better image performance. Environment Requirements Device: YVR1 or YVR2 SDK Version: 2.4.0 and above System Version: 1.2.5.x Enable AppSW Refer to the following steps to enable AppSW feature. Clone the Unity-Graphics repository. Import the three package.json files. From the menu bar, select Window > Pacakge Manager > Add package from disk... and install the following packages: Core RP Library Shader Graph Universal RP If custom shader is used, you will need to add Motion Vector Pass to the shader of the AppSW object. Note There is no need to modify the shader if Lit or SimpleLit is used. Transparent ojects do not need to add Motion Vector Pass, only opaque objects requires to add it. Objects close to opaque (e.g. Alpha close to 1) can be added according to situation. From the menu bar, select Edit > Project Settings. From the left panel, select Player > Android settings > Other Settings. Under Rendering section, add Vulkan to Graphics APIs. From the menu bar, select Edit > Project Settings. From the left panel, select XR Plug-in Management > YVR, set the following settings: Check Use AppSW Select Multiview as Stereo Rendering Mode Enter the following code to enable AppSW. YVRManager.instance.SetAppSWEnable(true); Assuming your app frame rate is currently at 90fps, when AppSW is turned on, the app will render at 45fps, but achieving at 90fps. If you would like to compare the rendering effect of AppSW On + 45fps and AppSW Off + 45fps, under YVR Manager script, select Quality Manager > V Sync Count: K2. Known Issues When using the AppSW feature, your app may experience some rendering issues. Please refer to the following scenarios and instructions to resolve the issues: If the background within the scene is very clean and contains elements such as straight lines, grids, etc., AppSW may cause image distortion, e.g., distorted straight lines. If the image is distorted, keep debugging and adjusting the background until a satisfactory result is achieved. If the scene contains some high-speed rotating objects, distortion artefacts may appear around the objects when AppSW is turned on, which can be solved by reducing the rotation speed of the objects. If there are unexpected pauses in individual elements of the scene or ripples on the screen, this is generally due to inaccurate data in the motion vectors for the following reasons: If the motion vector buffer does not show the motion of a moving part of the scene, this can cause stutters because moving objects seem to stay in place in the composite frame. If the motion vector buffer shows motion in the motionless parts of the scene, ripples are created because stationary objects move in the composite frame."
  },
  "Documentation/AdvancedFeatures/CompositorLayers.html": {
    "href": "Documentation/AdvancedFeatures/CompositorLayers.html",
    "title": "Composition Layers | Core",
    "keywords": "Composition Layers Composition Layers can segment all objects that need to be displayed to achieve purposes such as improving the clarity of specific objects. In the most traditional rendering mode, all objects in the scene will be rendered to the same texture (Eye Buffer), which will be processed by the system for ATW, distortion, composition, and finally displayed on the device screen. By using composition layer technology, specific objects in the scene can be rendered to a texture and handed over to the system for composition, thus reducing an extra texture sampling and improving the clarity of object rendering. It should be noted that composition layers are not omnipotent. Each composition layer will increase the composition overhead for the system. Therefore, when using composition layers, it is necessary to use them reasonably according to actual needs and device performance: It is recommended to use composition layers for objects that need to improve clarity, such as UI interfaces, text, etc. The number of composition layers should not be too many. Generally, the number of composition layers in a single scene should be controlled to about 4 layers. The depth value of the composition layer needs to be set reasonably to ensure that the content in the composition layer and the Eye Buffer will not cause incorrect occlusion effects. Types of Composition Layers Composition layers can be divided into two types based on their type: Overlay and Underlay: Overlay: The texture of the Overlay type composition layer is presented in front of the Eye Buffer by default. For objects that need to always appear in front of the Eye Buffer, such as cursors, the Overlay type composition layer can be used. Underlay: The texture of the Underlay type composition layer is presented behind the Eye Buffer. Since the Underlay layer relies on the alpha channel on the rendering target, after all objects in the scene are drawn to the Eye Buffer, you need to create a \"hole\" on the Eye Buffer to allow the Underlay texture to show through this \"hole\". For objects like UI interfaces that may be occluded by other objects in the Eye Buffer (such as UI being occluded by a controller), the Underlay type composition layer can be used. The composition depth can be used to distinguish between Overlay and Underlay types of composition layers: The depth value of the Eye Buffer is 0. The depth value of the Underlay type composition layer is less than 0. The depth value of the Overlay type composition layer is greater than 0. Shapes of Composition Layers The shape of the composition layer determines the display effect of the composition layer. There are three shapes of composition layers: Quad, Cylinder, and Equirect: Quad: A quadrilateral plane texture with four vertices, usually used to display text or information in the scene. Cylinder: A cylindrical texture with a cylindrical arc, usually used to display curved UI interfaces. If using Cylinder: The center of the Transform will be the center of the Cylinder, the size of the Transform will be the size of the Cylinder, and the size of the Transform in the Cylinder will be the global size (Global Scale). Among them, Z is the radius of the Cylinder, Y is the height of the Cylinder, and X/Z is the arc length of the Cylinder. The camera must be placed inside the inscribed sphere of the cylinder. If the camera approaches the surface of the inscribed sphere, the composition layer will not be displayed. Equirect: A spherical texture, usually used to display 360/180 panoramic textures. The Radius parameter is used to specify the radius of the cylinder. When set to 0 or positive infinity (1.0f/0.0f), it indicates an infinitely large radius. When the spherical radius is infinitely large, its display effect is like a skybox in an empty scene. The X parameter under Destination Rects is useless; the W parameter maps to the central angle, symmetrical about the central point coordinates (0, 0). Texture Types The objects processed by the composition layer are textures, which can be divided into three types: External Texture: The texture content is obtained from outside the Unity rendering context. In typical use cases, it is directly obtained from the Android Surface texture (e.g., Android player video texture). For scenarios such as video players, external textures need to be used. Dynamic Texture: The texture content will be updated at runtime, such as the RenderTexture image generated by the camera. Static Texture: The texture content will not be updated at runtime, such as static advertisement images in the scene. Textures For textures used in composition layers, the following settings can be made: Texture Rects After checking the Texture Rects checkbox, you can configure the parameters related to Source Rects and Destination Rects. If you choose to customize Source Rects and Destination Rects (i.e., select the Custom option), you need to ensure that the values of X, Y, W, and H are within the specified range: X: \\([0,1)\\), Y: \\([0,1)\\), W: \\((0,1]\\), H: \\((0,1]\\). Transparency The alpha parameter is used to set the transparency of the texture, with a value range of \\([0,1]\\). Examples The CompositeLayer scene is used to illustrate the effect of composition layers. The design of the composition layer is to improve the clarity of the flat UI. In the traditional rendering pipeline, the UI texture must first be rendered to the color buffer managed by Unity, and then the color buffer managed by Unity will be rendered to the screen buffer. When using composition layers, the target UI texture can be rendered directly by the local renderer. Therefore, distortion caused by sampling can be reduced. The following is a screenshot of running the CompositeLayer scene on a YVR device: Caution Since the composition layer is rendered by the native system of the YVR device, the content cannot be displayed in the Unity editor. The lower part is the interface rendered by the Unity Eye Buffer, and the upper part is rendered by the composition layer. The left part is a dynamic texture, and the right part is a static texture. The detailed differences between rendering with composition layers (upper part) and Unity Eye Buffer (lower part) are as follows: Caution Some dispersion can be seen in the detailed image, which is generated to offset the dispersion caused by the lens. Therefore, when using the device, not all dispersion will be seen. Composition Layer Example Please refer to the following example project. Open a new project or the current project. Import the latest SDK. In the Project panel, select Packages > YVR Core > Scenes > CompositeLayer. In the CompositeLayer folder, select CompositeLayer.unity to open the scene. In File > Build Settings..., select Add Open Scenes. Select Build and name the file. Install the APK file on the device. This scene shows the effects of different depth values, dynamic and static images. Shape and Rect Example Please refer to the following example project. Open a new project or the current project. Import the latest SDK. In the Project panel, select Packages > YVR Core > Scenes > CompositeLayer. In the CompositeLayer folder, select CompositeLayerShapeAndRect.unity to open the scene. In File > Build Settings..., select Add Open Scenes. Select Build and name the file. Install the APK file on the device. This scene shows the effects of shape switching, setting source rectangles, and destination rectangles. Underlay vs Overlay Since the native system needs to composite multiple layers, it needs to know the order of all layers. This order is determined by the depth of the composition layer. The depth of the Unity Eye Buffer is set to 0. All layers with a depth greater than 0 are called Overlay, and layers with a depth less than 0 are called Underlay. The bottom layer will be drawn first, followed by the Unity Eye Buffer, and finally the Overlay. Therefore, the Unity Eye Buffer will cover the Underlay, and the Overlay will cover the Eye Buffer. To make the Underlay display normally and not be completely covered, a hole needs to be created in the Unity Eye Buffer. The shader YVR/UnderlayPuncher is designed to generate such a hole: Tip The layer in the upper left corner of the example scene is Underlay."
  },
  "Documentation/AdvancedFeatures/DisplayRefreshRate.html": {
    "href": "Documentation/AdvancedFeatures/DisplayRefreshRate.html",
    "title": "Screen Refresh Rate | Core",
    "keywords": "Screen Refresh Rate The screen refresh rate represents the number of times the screen refreshes per second. Typically, the screen refresh rate is the same as the maximum frame rate supported by the application. For example, when the screen refresh rate is 72 Hz, the maximum frame rate of the application is 72 FPS. The higher the screen refresh rate, the faster the screen refreshes, and the better the smoothness and stability of the picture. However, a high screen refresh rate can also affect device performance. When the application cannot reach the maximum refresh rate of the device, it may cause frame drops, stuttering, tearing, and latency issues. By default, we encourage applications to set the screen refresh rate to 90 Hz to provide a better user experience. Only set the screen refresh rate to 72 Hz under special circumstances, such as: Insufficient performance or excessive power consumption: You can use the real-time monitoring tool to monitor application performance and ensure that the application can handle a high screen refresh rate. For more details, refer to performance monitoring and analysis. When playing videos: If the video frame rate does not match the screen refresh rate, it may cause visual discontinuity and stuttering. For example, if the video is 24 Hz and the screen refresh rate is set to 90 Hz. Because the 24 Hz video frame rate cannot be evenly distributed at the 90 Hz refresh rate, each frame's display time on the screen will be different, resulting in visual stuttering. Therefore, it is recommended to switch to an appropriate screen refresh rate when playing videos. Setting the Screen Refresh Rate Set the screen refresh rate through YVRManager.instance.cameraRenderer.displayFrequency as shown below: YVRManager.instance.cameraRenderer.displayFrequency = 90; You can set the screen refresh rate at the application startup or dynamically adjust the screen refresh rate as needed during the application runtime. If you do not set the screen refresh rate, the default screen refresh rate is 90 Hz."
  },
  "Documentation/AdvancedFeatures/FixedFoveatedRendering.html": {
    "href": "Documentation/AdvancedFeatures/FixedFoveatedRendering.html",
    "title": "Fixed Foveated Rendering | Core",
    "keywords": "Fixed Foveated Rendering Fixed Foveated Rendering (FFR) renders the edges of eye render texture at a lower resolution than the center, which reduce the GPU load due to the lower fragment shader requirements. Thus, contents with high fragment shader calculations will see the most performance benefit from using FFR. The level of FFR can be adjusted via YVRManager as the following image, the higher level will lead to lower GPU load but blurred result in the edge of eye render texture. FFR level can be modified per frame which means you can switch the FFR level according to the content in the run-runtime. However, the jump between different FFR levels may be noticeable, thus it is highly recommended change the FFR level while switching the scenes. Keep in mind that GPU performance improvement brought by FFR comes at the cost of reduction in the effect of the edges of the eye render textures. Thus, while using FFR, you should pay attention to the balance between visual quality and GPU performance. Warning FFR is not the silver bullet for GPU performance issues. Enable Dynamic FFR To enable dynamc FFR, select the Fixed Foveated Rendering Dynamic checkbox under YVR Manager settings."
  },
  "Documentation/AdvancedFeatures/FocusAwareness.html": {
    "href": "Documentation/AdvancedFeatures/FocusAwareness.html",
    "title": "Focus Awareness | Core",
    "keywords": "Focus Awareness The focus awareness feature allows the system UI to overlay on XR applications, enabling users to interact with the system UI directly within the application without needing to exit it. Focus awareness is a system capability that developers can use without writing any code. When the user presses the Home button on the controller, the system will automatically display the system UI using the focus awareness feature. When the system UI appears, the application will lose focus. Developers need to listen for focus awareness events to handle the focus state correctly, such as: Pausing the game when focus is lost Stopping the rendering of the controller model when focus is lost (since the system will render its own hand/controller model for UI interaction in this state) The focus awareness-related events are as follows: Event Description YVRManager.instance.eventsManager.onFocusGained The application loses input focus. For example, when the application is running and the user presses the Home button on the controller, the system UI appears, and the application loses input focus. Developers can pause the game, disable user input (e.g., controller), or notify other online users that the user is not currently focused on the application. YVRManager.instance.eventsManager.onFocusLost The application gains input focus. This event is triggered when the system UI is closed. Developers can resume the game or enable user input at this time. Tip The focus state changes caused by focus awareness are not the same as the focus state changes provided by Unity by default. The former is specific to the focus awareness feature for XR applications, while the latter is based on the focus state of the application window. Therefore, developers should not rely directly on Unity's OnApplicationFocus method to handle focus awareness state changes."
  },
  "Documentation/AdvancedFeatures/HMDControllerEmulator.html": {
    "href": "Documentation/AdvancedFeatures/HMDControllerEmulator.html",
    "title": "HMD/Controller Emulator | Core",
    "keywords": "HMD/Controller Emulator HMD/Controller Emulator are tools that allow you to use a keyboard and mouse to simulate the behaviour of HMD/controller in Unity Editor, like translating, rotating and clicking. Warning HMD/Controller Emulators only works in Unity Editor mode. HMD Emulator While using HMD emulator, you can use keyboard to simulate HMD's translation, and use mouse to simulate HMD's rotation. The HMD emulator can be configured in the Unity Inspector window, the configurable parts are as follows: The Activate Keys are the keys to activate HMD emulator. When any one of the Activate Keys is pressed, the HMD emulator is activated. You can simulate the HMD's rotation in Yaw/Pitch axis by moving the mouse horizontally and vertically respectively. When the HMD emulator is activated, and you want to rotate the HMD in Roll axis, you need to press any one of the Roll Keys. After that, the horizontal moving of the mouse will rotate the HMD in Roll Axis, and the vertical moving of the mouse will have no effect. When the HMD emulator is activated, you can press the Translation Keys to translate the HMD. Under default configuration, keys W, S, A, D, Q, E lead to forward/backward/Left/Right/Up/Down respectively. The speed of translation and rotation can be configured by Rotation Sensitivity and Translation Sensitivity. After Reset HMD Pose On Release is toggled on, both the rotation and translation of HMD will be reset to 0,0,0 when the pressed Activate Keys is released. Controller Emulator While using Controller Emulator, you can use keyboard to simulate controllers' click action, and use mouse to simulate controllers' translation and rotation. The controller emulator can be configured in the Unity Inspector window, the configurable parts are as follows: The Activate Keys are the keys to activate controller emulator. When any one of the Activate Keys is being pressed, the controller emulator is activated. You can simulator the controller's translation using mouse. The Target Controller's screen position will be the same with the cursor position on the screen. When the controller emulator is activated, and you want to rotate the controller, you need to press any one of the Rotation Keys. After that, the horizontal moving of the mouse will rotate the Target Controller in Yaw Axis, and the vertical moving of the mouse will rotate the Target Controller in Pitch Axis. Important You cannot translate and rotate the controller through the simulator at the same time. Like the HMD emulator, the rotation speed can be configured by Rotation Sensitivity. However, because of the position of controller is determined by the position of the mouse cursor rather than the mouse movement, there is no concept about Translation Sensitivity in controller emulator. When the controller emulator is activated, press the key in Key Mapping will simulate the corresponding key of the controllers. Like in the default configuration, the press of Alpha 1 key on the keyboard will simulate the click down action of the Index Trigger key of the left controller."
  },
  "Documentation/AdvancedFeatures/MultiViewStereoRendering.html": {
    "href": "Documentation/AdvancedFeatures/MultiViewStereoRendering.html",
    "title": "MultiView Stereo Rendering | Core",
    "keywords": "MultiView Stereo Rendering Tip Also known as Single Pass Stereo Rendering YVR Devices support Single Pass Stereo Rendering which reduces CPU load that is used to summit draw call. In typical stereo rendering, eye buffers for both eyes must be rendered in sequence which leads to double draw call. The multiview stereo rendering depends on MultiView Rendering features in OpenGL which allows draw calls to render to several layers of an array texture simultaneously. Thus, both content in left and right eye buffers can be drawn in single draw call, and the vertex shader can know what layer it is writing to, so the rendering result is still different for each eye buffer which ensures the stereo effect. Two steps are required to open a single pass in Unity with YVR SDK: Select Multiview as the Stereo Rendering Mode in YVR XR Plugin-in configure window. Caution Single pass stereo rendering required shader support, thus you need to modify your own custom shader in order to support single pass stereo rendering. For more information, please refer to the related Unity Document."
  },
  "Documentation/AdvancedFeatures/ResonanceAudio.html": {
    "href": "Documentation/AdvancedFeatures/ResonanceAudio.html",
    "title": "Resonance Audio | Core",
    "keywords": "Resonance Audio This is a guide to develop Unity projects using Resonance Audio. For more information, please refer to Resonance Audio Unity's documentation. Create New Unity Project & Import SDK Open Unity Hub and create a new 3D project. Select Assets -> Import Package -> Custom Package. Select the ResonanceAudioForUnity_*.unitypackage file that you downloaded. In the Importing Package dialog, click Import. Accept any API upgrades if prompted. Configure Unity Project to use Resonance Audio Use Edit -> Project Settings -> Audio to open the AudioManager settings. Select Resonance Audio as the Spatializer Plugin. Select Resonance Audio as the Ambisonic Decoder Plugin."
  },
  "Documentation/AdvancedFeatures/SplashScreen.html": {
    "href": "Documentation/AdvancedFeatures/SplashScreen.html",
    "title": "Splash Screen | Core",
    "keywords": "Splash Screen When users open the application, the system needs some time to load it. The YVR SDK allows developers to use a custom splash screen to control the user experience during this loading period. Reduce perceived loading time: By using a custom splash screen, users may feel that they have already entered the game, thus reducing the perceived loading time. Enhance brand awareness and image: The splash screen is the first impression of the application. By customizing the splash screen, developers can showcase the application's theme, style, and brand information during the loading period. Tip This feature does not reduce the application's initialization time, nor can it replace Unity's Splash, i.e., the Unity Logo and the \"MADE WITH Unity\" text. This feature is used to modify the system's behavior during the application's loading period. Developers can set the splash screen through the Project Settings -> XR Plug-in Management - YVR by using the OS Splash Screen option."
  },
  "Documentation/AdvancedFeatures/SupersamplingAndSharpening.html": {
    "href": "Documentation/AdvancedFeatures/SupersamplingAndSharpening.html",
    "title": "Supersampling and Sharpening | Core",
    "keywords": "Supersampling and Sharpening To improve image quality, you could enable supersampling or sharpening. This solves the issues like flickering and moiré when downsampling, which further improves the image quality. Sharpening increases the image clarity and improves the blurring of image during upsampling. Enable Supersampling Feature Use Compositor Layer to select supersampling type: Under Compositor Layer settings, select Super Sampling Type: - None - Normal - Quality Enable Sharpening Feature Use YVR Manager or Compositor Layer to select sharpen type: Under YVR Manager settings, select Sharpen Type: - None - Normal - Quality Note When using sharpening, please enable multi-layer mipmap for the requested swapchain and generate texture data for each of its mipmap layers before committing. In OpenXR, all settings are recommended only and the compositor can enable or disable them as needed. Compositing layer filtering requires more GPU resources. This is especially true for sharpening and supersampling algorithms, where you should weigh the increased visual fidelity against the additional GPU resources needed to provide the best VR user experience. Example View the sample project for your reference. Open a new project or current project. Import the latest SDK. Under Project panel, select Pacakages > YVR Core > Scenes > CompositeLayer. Under CompositeLayer folder, select CompositeLayerSuperSamplingSharpen.unity to open the scene. Go to File > Build Settings..., select Add Open Scenes. Select Build and name the file. Install the exported APK fie."
  },
  "Documentation/AdvancedFeatures/SystemKeyboard.html": {
    "href": "Documentation/AdvancedFeatures/SystemKeyboard.html",
    "title": "System keyboard | Core",
    "keywords": "System keyboard The system keyboard feature allows developers to use the system keyboard provided by Dream OS directly for text input within their applications, without needing to develop their own keyboard. The principle is that the system will listen for events where the application needs to invoke the keyboard and, in such cases, will wake up the keyboard through the Focus Awareness feature. Usage Example Tip The core of the following example is to create a Unity InputField and use the system keyboard for input within the scene. In the Hierarchy panel, complete the following steps: Select + > UI > Event System to add the event system to the scene. Select + > UI > Canvas to add the canvas to the scene. Select Canvas and in the Inspector panel, complete the following steps: Set Render Mode to World Space. Set Event Camera to Main Camera. Add the Tracked Device Graphics Raycast script to the Canvas. In the Hierarchy panel, right-click Canvas and select UI > Input Field - TextMeshPro from the context menu to add the input field to the scene. Build the application to a real device, and click the Input Field on the device. At this point, you will see the system keyboard pop up. Note The system keyboard feature cannot be used in the Editor."
  },
  "Documentation/AdvancedFeatures/UnityAudioSource.html": {
    "href": "Documentation/AdvancedFeatures/UnityAudioSource.html",
    "title": "Unity Audio Source | Core",
    "keywords": "Unity Audio Source Audio Clip is required to create an Audio Source. The Clip is the actual sound file that will be played back. The Source is like a controller for starting and stopping playback of that clip, and modifying other audio properties. To create a new Audio Source: Import your audio files into your Unity Project. These are now Audio Clips. Go to GameObject -> Create Empty from the menubar. With the new GameObject selected, select Component -> Audio -> Audio Source. In the Inspector, find the Audio Clip property on the Audio Source Component and assign a clip, either by dragging one from the Project Window or by clicking the small circle icon to the right of the Inspector property, then selecting a clip from the list. Note If you want to create an Audio Source just for one Audio Clip that you have in the Assets folder then you can just drag that clip to the scene view - a GameObject with an Audio Source component will be created automatically for it. Dragging a clip onto on existing GameObject will attach the clip along with a new Audio Source if there isn’t one already there. If the object does already have an Audio Source then the newly dragged clip will replace the one that the source currently uses."
  },
  "Documentation/Archive/CameraRig.html": {
    "href": "Documentation/Archive/CameraRig.html",
    "title": "Camera Rig | Core",
    "keywords": "Camera Rig The YVR Unity package contains a prefab, YVRCameraRig, which is the core of the whole SDK. It also provides access to YVRManager, which is the main entry to VR features. The YVRCameraRig contains a game object named TrackingSpace, which is designed to fine-tune the relationship between the head tracking reference frame and your world. Under the TrackingSpace, you will find a CenterEyeAnchor game object, which is tagged as the main Unity camera, two anchor game objects for each eye, named LeftEyeAnchor and RightEyeAnchor individually, and two anchor objects for both controllers, named LeftControllerAnchor and RightControllerAnchor individually. Understand Camera Behavior When YVR Unity packages are imported in Unity, your head-mounted device will automatically pass the head and controllers tracking reference to Unity, which allows the Unity camera's position and orientation to match with your position and orientation in the real world. In some games, you may require to control the movement of the player character(identified by the camera). In these cases, you can make the YVRCameraRig a child of one game object, and create a script to control the movement of that game object. Add YVRCameraRig in the scene YVRCameraRig is a replacement for Unity's main camera, which means that Unity's main camera should be deleted from the Hierarchy view and using YVRCameraRig when building an app on YVR devices. Perform the following steps to replace Unity's main camera with YVRCameraRig: Right-click on the Main Camera game object in Hierarchy window, and click Delete. Enter the Project tab, expand the Packages -> YVR Core -> Prefabs folder, drag the YVRCameraRig prefab into the Hierarchy panel."
  },
  "Documentation/Core.html": {
    "href": "Documentation/Core.html",
    "title": "Introduction | Core",
    "keywords": "Introduction The Core User Manual is divided into the following sections: YVRManager: Introduction for the core manager YVRManager. Advanced Feature: Introduction for advanced features which intends to increase program performance or simplify the development process. SpatialSensing: Introduction for spatial sensing related functions, developers can use this part of the SDK to perceive the real environment MultiModalInteraction: Introduction for multi-modal interaction related functions, developers can use this part of the SDK to implement multiple interaction methods for the application Demo Scenes: Introduction for all demo scenes included in the SDK."
  },
  "Documentation/CoreDevelopmentBlocks/YVRManager.html": {
    "href": "Documentation/CoreDevelopmentBlocks/YVRManager.html",
    "title": "YVR Manager | Core",
    "keywords": "YVR Manager The script YVRManager is the core manager of the whole SDK, which controls the execution of VR event functions and offers different settings for rendering quality, tracking mode, performance, etc. Configure Settings The settings in terms of rendering quality, tracking space, performance, etc. can be set via the Inspector panel of YVRManager. Quality VSync Count: The number of VSyncs that should pass between each frame. Fixed Foveated Rendering Level: the level for fixed foveated rendering. The higher the value, the more blurred the edges of the picture, but the better the performance. UseRecommendMSAALevel: Whether to use recommend MSAA level. Tracking Tracking Space: The tracking space of the rigid poses. Eye Level: HMD pose will not consider ground height. Floor Level: Mode used in most cases, which will consider ground height and recenter state. Stage: HMD pose will not consider recenter state. Events The events happened at runtime are all managed in YVRManager.instance.eventsManager, including: onTrackingAcquired: Occurs when head gained tracking. onTrackingLost: Occurs when head lost tracking. onHMDMounted: Occurs when an HMD is put on the user's head. onHMDUnMounted: Occurs when an HMD is taken off the user's head. onRecenterOccurred: Occurs when recenter occurred. onFocusGained: Occurs when application focus gained. onFocusLost: Occurs when application focus lost. onVisibilityGained: Occurs when application is visible onVisibilityLost: Occurs when application is completely obscured by other content. onUpdate: Occurs at the update function of every frame. onPreSubmitGfx: Occurs just before current frame is submitted to native, which will be triggered in rendering thread. onPostSubmitGfx: Occurs just after current frame is submitted to native, which will be triggered in rendering thread. Device state Device state can be quired in YVRManager.instance.hmdManager, e.g. battery level, battery temperature, volume level. Boundary state All boundary state can be quired in YVRManager.instance.boundary, e.g. boundary dimensions, boundary visibility. Also, YVRManager.instance.boundary provide several APIs for querying intersections state with boundary."
  },
  "Documentation/DemoScenes.html": {
    "href": "Documentation/DemoScenes.html",
    "title": "Demo Scenes | Core",
    "keywords": "Demo Scenes This section works as an introduction for all demo scenes included in the SDK. In order to better illustrate each module in SDK, several demo scenes are included in SDK: BoxWorld: The most basic scene which illustrates 6-dof tracking state of both controllers and head. Input: The scene is used to illustrate and debug YVRInput APIs. Raycasting: The scene is used to illustrate how to interact with UGUI and Physical Collider."
  },
  "Documentation/DemoScenes/BoxWorld.html": {
    "href": "Documentation/DemoScenes/BoxWorld.html",
    "title": "DebugScenes.BoxWorld | Core",
    "keywords": "DebugScenes.BoxWorld Located in Packages/YVR Core/Scenes/BoxWorld.scene BoxWorld Scene is the most basic scene, which illustrates 6-dof tracking state of both controllers and head. Note BoxWorld scene is some kind of minimal scene to test rendering functionality SDK. If this scene does not work, in most cases, there are some errors in project's settings."
  },
  "Documentation/DemoScenes/Input.html": {
    "href": "Documentation/DemoScenes/Input.html",
    "title": "DebugScene.Input | Core",
    "keywords": "DebugScene.Input Located in YVR/Scenes/Input.scene SeeAlso: YVRInput Input scene is used to illustrate and debug YVRInput APIs: All the sustainable states of the input, like controller battery/ key pressed or not / index trigger position, will be displayed on the left side of the panel. All the transient states of the input, like controller click down/up, will be displayed on the right side of the panel. All the settings about controller vibration are displayed at the bottom of the left half of the panel. Through these buttons, users can modify vibration's frequency / amplitude, and can switch vibration state."
  },
  "Documentation/DemoScenes/Raycasting.html": {
    "href": "Documentation/DemoScenes/Raycasting.html",
    "title": "DebugScene.Raycasting | Core",
    "keywords": "DebugScene.Raycasting Located in YVR/Scenes/Raycasting.scene SeeAlso : YVRInputModule YVRRaycastLaserBeam Raycasting scene is used to illustrate how to interact with UGUI and Physical Collider while using VR controllers. While ray hit target object, the cursor (indicated by a sphere by default) will be at the place when ray intersects with the object. The cube placed in the scene is used for debugging physics raycasting function. Three different UI elements, button / slider / scroll, placed in the scene are used for debugging UI raycasting function."
  },
  "Documentation/MultiModalInteraction.html": {
    "href": "Documentation/MultiModalInteraction.html",
    "title": "Multi-Modal Interaction | Core",
    "keywords": "Multi-Modal Interaction We offer various interaction methods for you to use in your application, including: Controllers: The most traditional VR interaction method Hand Tracking: Capture user hand gestures Eye Tracking: Capture user eye movement information"
  },
  "Documentation/MultiModalInteraction/Controllers.html": {
    "href": "Documentation/MultiModalInteraction/Controllers.html",
    "title": "Controllers | Core",
    "keywords": "Controllers YVRInput and YVRControllerRig are the two entry points for obtaining controller data. YVRInput implements all functions related to controller input states, while YVRControllerRig encapsulates all operations and information related to controller rigidity. For more information, refer to YVRInput and YVRControllerRig. YVR Touch Tracking YVRControllerRig provides touch position and orientation data through GetPosition and GetRotation. Other data, such as velocity, angular velocity, acceleration, and angular acceleration, can also be obtained from YVRControllerRig. YVRInput Usage The main purpose of YVRInput is to access the controller input states through Get(), GetDown(), and GetUp(). It also sets the amplitude and duration of the controller's vibration. Get(): Queries the current state of a controller. GetDown(): Queries if a button (touch) was pressed in this frame. GetUp(): Queries if a button (touch) was released in this frame. SetControllerVibration(): Sets the amplitude and duration of the controller's vibration. Control Input Enums For the Get(), GetDown(), and GetUp() functions, there are various variations to provide different access to different sets of controls. These control sets are divided into two categories: Virtual Mapping and Raw Mapping, both exposed through enums. The enum categories defined in Virtual Mapping are as follows: VirtualButton: Traditional buttons on YVR Touches. VirtualTouch: Capacitive sensing control surfaces on YVR Touches. VirtualAxis1D: One-dimensional controls reporting float states. VirtualAxis2D: Two-dimensional controls reporting Vector2 states. The enums defined in the Raw Mapping category are highly related to those in Virtual Mapping, as follows: RawButton RawTouch VirtualAxis1D VirtualAxis2D For the conversion between Raw Mapping and Virtual Mapping, refer to the following section. Touch Input Mapping"
  },
  "Documentation/MultiModalInteraction/EyeTracking.html": {
    "href": "Documentation/MultiModalInteraction/EyeTracking.html",
    "title": "Eye Tracking | Core",
    "keywords": "Eye Tracking Note Requires Play For Dream MR device, OS version 3.1.0 or above We provide eye tracking data based on XR Devices. You can find eye tracking devices using GetDevicesWithCharacteristics and InputDeviceCharacteristics.EyeTracking, and obtain eye tracking data from them: InputDevice eyeDevice = default; var devices = new List<InputDevice>(); InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.EyeTracking, devices); if (devices.Count > 0) eyeDevice = devices[0]; eyeDevice.TryGetFeatureValue(CommonUsages.devicePosition, out Vector3 position); eyeDevice.TryGetFeatureValue(CommonUsages.deviceRotation, out Quaternion rotation); Tip For more information on eye tracking, refer to Eye Tracking Sample"
  },
  "Documentation/MultiModalInteraction/HandGestureLimitation.html": {
    "href": "Documentation/MultiModalInteraction/HandGestureLimitation.html",
    "title": "Third-Party Hand Gesture Recognition Limitations | Core",
    "keywords": "Third-Party Hand Gesture Recognition Limitations This document outlines some constraints on the application of hand gestures in recognition to avoid common recognition errors. It is divided into three parts: Part One: Static Hand Gestures, explaining static hand gestures, including recommended and not recommended hand gestures; Part Two: Dynamic Hand Gestures, explaining the boundaries of different types of movements for hand gestures; Part Three: YVR Control Gestures, recommending third-party applications to avoid using these gestures to prevent accidental triggers during application runtime. Static Hand Gestures It is recommended to use hand gestures that users can perform naturally and comfortably, which are more ergonomic. In terms of gesture recognition, it is suggested to use: Hand gestures with more visible features, i.e., gestures where more hand features can be seen Preferably use the right hand The following image is only a partial illustration Twisted, awkward, and unnatural gestures are not recommended. Additionally, in terms of algorithms, it is not suggested to use: Hand gestures with fewer visible features, i.e., gestures where fewer hand features can be seen Avoid using overlapping hands gestures, such as crossed hands The following image is only a partial illustration, similar gestures (left/right) are not recommended Dynamic Hand Gestures Dynamic hand gestures can be understood as: static hand gestures + time duration judgment. Therefore, combined with the usage recommendations for static hand gestures, it is not recommended to use fast-moving gestures: Fast waving of various hand gestures, such as quickly waving the palm, fist, etc. Fast rotating of various hand gestures, such as quickly rotating the wrist, etc. Fast execution of dynamic gestures, such as quickly making a fist, quickly pinching, etc. Fast moving of various hand gestures, such as quickly moving various hand gestures in different directions Control Gestures The following are YVR's control system gestures. It is recommended to avoid using these gestures for game interaction in third-party applications to prevent accidental triggering of the system menu. The current version includes the following control gestures: Initialization: Palm facing yourself, fingertips pointing upwards Activation: When the wrist is in position and the system icon appears, activation is successful Menu selection: Use the pinching gesture and move the hand to select the menu Command execution: Hover over the button, separate the index finger and thumb, the secondary menu fades out, only the function button is displayed (disappears after flashing for a certain time) and responds to its corresponding function"
  },
  "Documentation/MultiModalInteraction/HandTracking.html": {
    "href": "Documentation/MultiModalInteraction/HandTracking.html",
    "title": "Hand Tracking | Core",
    "keywords": "Hand Tracking Configure Development Environment Device YVR2 Play For Dream MR Device System Version 1.2.2.209 and above Unity Version LTS version Note Compatible with Real-time Preview Tool version 3.1 and above. Configuration Process Enable the Hand Tracking feature in the system lab of the device. Import the YVR package. Create a new scene or open an existing scene in the Unity editor. Drag YVRCameraRig from the com.yvr.core/Prefabs/ directory to the Hierarchy panel. Select YVRCameraRig, and in the YVRManager component, choose whether to support hand tracking or controller from Hand Tracking Support to enable hand tracking or controller capabilities for the application. Build the scene and run it on the device. Note Refer to the code comments for specific interfaces. Obtain Hand Tracking Data You can obtain hand tracking-related information by calling the interfaces provided by the SDK, including feature enable status, tracking accuracy, gesture data, and hand interaction status. Feature Enable Status Interface Feature Enable Status YVRHandManager.GetHandTrackingEnable Get the enable status of the hand tracking feature. The request will return a boolean value, true means \"enabled\", false means \"not enabled\". Tracking Accuracy & Gesture Data Interface Gesture Data YVRHandManager.leftHandData / YVRHandManager.rightHandData Get gesture data, including the number of joints, hand size, joint direction and position, and hand interaction status, including ray interaction posture, and whether each finger is pinching and the specific pinch strength. Hand Interaction Status Interface Hand Interaction Status YVRHandManger.GetFingerPinchStrength Get the pinch strength between other fingers and the thumb. YVRHandManager.GetPinch Get whether the fingers are pinching. YVRHandManager.GetPinchDown Get whether the fingers triggered a pinch in the current frame. YVRHandManager.GetPinchUp Get whether the fingers triggered a pinch release in the current frame. Switching Between Controller Input and Hand Gesture Input After enabling the hand tracking capability on the device, The condition for the controller to switch to hand gesture input is: the controller is not connected or the connected controller is idle for 5 seconds, enabling hand tracking. The condition for hand gesture input to switch to the controller is: the controller is powered on or a button on the connected idle controller is pressed. Device Input Switching Process Listen to the YVRManager.instance.eventsManager.onInputDeviceChange event. Call YVRPlugin.Instance.GetCurrentInputDevice(ref ActiveInputDevice inputDevice) to query the current input device. Set the current input device for UI interaction input, YVRInputModule.Instance.SetInputDataProvider(DataProviderSource source). Show and hide the corresponding device objects. Note The interaction toolkit recommends using Samples | XR Interaction Toolkit | 2.3.1"
  },
  "Documentation/SpatialSensing.html": {
    "href": "Documentation/SpatialSensing.html",
    "title": "Spatial Awareness | Core",
    "keywords": "Spatial Awareness This section describes a series of ways provided by the SDK to enable applications to perceive the real physical environment: Passthrough: Real-time display of the real world through the camera Room Calibration: Obtain pre-calibrated room information through the SDK Spatial Mesh: Real-time acquisition of spatial mesh information from the real world Plane Detection: Real-time acquisition of large plane information in the real world Spatial Anchor: Record positions in the real space by setting custom anchors"
  },
  "Documentation/SpatialSensing/Passthrough.html": {
    "href": "Documentation/SpatialSensing/Passthrough.html",
    "title": "Passthrough | Core",
    "keywords": "Passthrough Passthrough is a feature allowing users to step outside of the VR world and see what's around in real life. It uses HMD cameras and image processing algorithms to capture and approximate what users would see if they could directly look through the display of the HMD. This finally enables the blend of the real-world and the virtual scenes to create a mixed-reality scene. Requirement SDK Version: 2.3.0 Configure Settings Complete Get Started guide, skip this if you have completed. In the main camera, select CenterEyeAnchor. Go to Inspector -> Camera. Set Clear Flags to Solid Color and HDR to Off. Set Background to RGBA (0000) / Hexadecimal 000000. YVRManager.instance.hmdManager.SetPassthrough(true); enable passthrough in your project."
  },
  "Documentation/SpatialSensing/PlaneDetection.html": {
    "href": "Documentation/SpatialSensing/PlaneDetection.html",
    "title": "Plane Detection | Core",
    "keywords": "Plane Detection Responsible for handling plane detection functionalities, including creating, retrieving, and ending plane detection. Public Fields public static Action<List<YVRPlaneDetectorLocation>> getPlanesAction Description: Callback used when planes are detected, passing the list of detected plane locations. Type: Action<List<YVRPlaneDetectorLocation>> Usage: This callback is invoked when plane detection is complete and plane locations are available to process the plane data. Public Methods public void CreatePlaneDetector() Description: Creates an instance of plane detection. Calling this method will start the plane detection process. Parameters: None Return Value: None public List<YVRPlaneDetectorPolygonBuffer> GetPlanePolygonBuffer(YVRPlaneDetectorLocation plane) Description: Retrieves the polygon buffer for the specified plane. Parameters: YVRPlaneDetectorLocation plane: The plane for which to retrieve the polygon buffer. Type: YVRPlaneDetectorLocation Description: A struct containing the plane ID and other related information. Return Value: Type: List<YVRPlaneDetectorPolygonBuffer> Description: Returns a list of all polygon buffers for the plane. If no polygon buffers are found, returns an empty list. public void EndPlaneDetector() Description: Ends the instance of plane detection. Calling this method will stop the plane detection process. Parameters: None"
  },
  "Documentation/SpatialSensing/RoomCalibration.html": {
    "href": "Documentation/SpatialSensing/RoomCalibration.html",
    "title": "Room Calibration | Core",
    "keywords": "Room Calibration Room calibration is a system-level application provided by Play Form Dream, used to ensure precise alignment between virtual objects and the physical environment. Through room calibration, the realism and stability of virtual reality programs can be improved, providing users with a more interactive and immersive experience. Users can use the room calibration application to calibrate objects such as walls, doors, windows, tables, chairs, and sofas in the real room. Developers can obtain the calibration data created by users through the SDK and use it in their own applications. Requirements You can obtain room information and calibration data created by the room calibration application through the SDK interface and use it in your own applications. You can also create your own anchors within the application. SDK Version: Unity SDK 2.8.0 and above Device Model: YVR2, Play Form Dream MR System Version: DreamOS 1.3.0 and above Note Data Modification Permission: Third-party applications cannot create rooms, only the room calibration application can modify data. Data Reading Permission: Both the room calibration application and third-party applications can read room calibration data. Please ensure that the Spatial Anchor Support and Scene Support checkboxes are selected in the YVRManager script panel. Note After selecting the Spatial Anchor Support and Scene Support checkboxes, the corresponding permissions for anchors will be added to the AndroidManifest.xml file. > <uses-permission android:name=\"com.yvr.permission.USE_ANCHOR_API\"\\> > > <uses-permission android:name=\"com.yvr.permission.USE_SCENE\"\\> com.yvr.permission.USE_SCENE is a runtime permission that allows the application to query spatial data on the user's device only when the user grants the permission. Requesting Android runtime permissions makes a permission request. Components that Scene Anchors Can Include Scene Anchors need components to describe the calibrated environment. Therefore, the application needs to query whether the Scene Anchor supports a given component and whether the component is enabled to obtain the spatial information contained in the anchor. Locatable: A locatable component that notifies the system that this location point can be tracked. Once enabled, the application can continuously query the pose information of the location point. Storable: A storable component that, once enabled, indicates that the anchor can be saved. RoomLayout: A room layout component that includes references to the ceiling, walls, and floor anchors that make up the room. AnchorContainer: Contains references to other objects (sofas, coffee tables, windows, etc.) in the room. Bounded2D: Locating point information for 2D plane data, including the width and height of the plane and the offset on the x and y axes relative to the anchor (or the indexed triangular mesh of a non-rectangular plane). Bounded3D: 3D cuboid data, including length, width, height, and the offset on the x, y, z axes relative to the anchor. SemanticLabels: Semantic labels of the anchor, which can classify the anchor into multiple categories. For more details, refer to the following section. Common Scene Anchors The scene anchors of the room will have: RoomLayout component for referencing the ceiling, walls, and floor. AnchorContainer component for storing all scene anchors within the room. Scene anchors for 2D elements (such as walls, ceilings, floors, windows, etc.) have: Locatable component for obtaining the anchor position; SemanticLabels semantic label component; Boundary2D plane size data. Scene anchors for 3D elements (such as sofas, coffee tables, tables, etc.) have: Locatable component for obtaining the anchor position; SemanticLabels semantic label component; Bounded3D cuboid information. Anchor Semantic Classification Semantic classification categorizes Scene Anchors into a predefined list of system-managed object types. Semantics separate objects into their corresponding geometric descriptions to provide application developers with game logic specific to the classification. Supported semantic labels: Semantic Type Description FLOOR Floor 2D CEILING Ceiling 2D WALL_FACE Wall Face 2D COUCH Couch 3D DOOR_FRAME Door Frame 2D WINDOW_FRAME Window Frame 2D OTHER Other 3D TABLE Table 3D BED Bed 3D Note This list of labels is constantly evolving as we regularly add support for more 2D and 3D objects. Anchor Coordinate Axes The coordinate axes direction of 2D and 3D elements created by the room calibration application depends on their type and creation order, as follows: Wall, Door, Window The origin is located at the center of the wall face. +X: According to the left-hand coordinate system, counterclockwise from top to bottom +Y: Vertically upward from the ground +Z: Perpendicular to the wall face inward Floor The origin is located at the geometric center of the floor. +X: Clockwise along the wall face direction from the first drawn point when viewed from above +Y: Determined by the left-hand coordinate system +Z: Vertically upward Ceiling The origin is located at the geometric center of the ceiling. +X: Opposite direction of the floor's -X +Y: Determined by the left-hand coordinate system +Z: Vertically downward Sofa, Bed, Table, and Others The first line AB draws the height, then draws the two edges BC and CD of the top surface. The origin is located at the center of the top surface. +X: CB direction +Y: Determined by the left-hand coordinate system +Z: AB direction Interface for Obtaining Room Calibration Data Get Room Layout Information of the Anchor The YVRSceneAnchor.instance.GetAnchorRoomLayout interface obtains the room layout information of the anchor. /// <summary> /// Get the room layout information of the specified spatial anchor. /// </summary> /// <param name=\"anchorHandle\">Handle of the spatial anchor</param> /// <param name=\"roomLayout\">Returned room layout information</param> /// <returns>True if the room layout information is successfully obtained; otherwise, false</returns> public bool GetAnchorRoomLayout(ulong anchorHandle, out YVRRoomLayout roomLayout) YVRRoomLayout contains the UUIDs of the floor, ceiling, and wall anchors. public struct YVRRoomLayout { // Floor anchor public YVRSpatialAnchorUUID floorUuid; // Ceiling anchor public YVRSpatialAnchorUUID ceilingUuid; // List of wall anchors public YVRSpatialAnchorUUID[] wallUuids; } Get Container Information of the Anchor The YVRSceneAnchor.instance.GetAnchorContainer interface obtains the container information of the anchor. /// <summary> /// Get the container information of the specified spatial anchor. /// </summary> /// <param name=\"anchorHandle\">Handle of the spatial anchor</param> /// <param name=\"containerUuids\">Returned list of container UUIDs</param> /// <returns>True if the container information is successfully obtained; otherwise, false</returns> public bool GetAnchorContainer(ulong anchorHandle, out List<YVRSpatialAnchorUUID> containerUuids) Get Rectangular Plane of the Anchor The YVRSceneAnchor.instance.GetAnchorBoundingBox2D interface provides access to the rectangular plane information of the anchor. /// <summary> /// Get the 2D bounding box information of the specified spatial anchor. /// </summary> /// <param name=\"anchorHandle\">Handle of the spatial anchor</param> /// <param name=\"boundingBox2D\">Returned 2D bounding box information</param> /// <returns>True if the bounding box information is successfully obtained; otherwise, false</returns> public bool GetAnchorBoundingBox2D(ulong anchorHandle, out YVRRect2D boundingBox2D) YVRRect2D contains the width and height of the plane and the offset on the x and y axes relative to the anchor's pose origin. public struct YVRRect2D { // Offset of the plane relative to the anchor on the x and y axes public Vector2 offset; // Width and height of the plane public Vector2 extent; } Get 3D Bounding Box of the Anchor The YVRSceneAnchor.instance.GetAnchorBoundingBox3D interface provides access to the 3D information of the anchor. /// <summary> /// Get the 3D bounding box information of the specified spatial anchor. /// </summary> /// <param name=\"anchorHandle\">Handle of the spatial anchor</param> /// <param name=\"boundingBox3D\">Returned 3D bounding box information</param> /// <returns>True if the bounding box information is successfully obtained; otherwise, false</returns> public bool GetAnchorBoundingBox3D(ulong anchorHandle, out YVRRect3D boundingBox3D) YVRRect3D contains the length, width, and height of the 3D object and the offset on the x, y, z axes relative to the anchor's pose origin. public struct YVRRect3D { // Offset of the 3D object relative to the anchor's origin on the x, y, z axes public Vector3 offset; // Length, width, and height of the 3D object public Vector3 extent; } Get Irregular Plane Vertex Information of the Anchor The YVRSceneAnchor.instance.GetAnchorBoundary2D interface returns the non-rectangular plane information of the anchor. /// <summary> /// Get the plane vertex information of the anchor. /// </summary> /// <param name=\"anchorHandle\">Handle of the spatial anchor</param> /// <param name=\"boundary\">Returned collection of plane vertices</param> /// <returns>True if the boundary information is successfully obtained; otherwise, false</returns> public bool GetAnchorBoundary2D(ulong anchorHandle, out List<Vector2> boundary) Get Semantic Labels of the Anchor The YVRSceneAnchor.instance.GetAnchorSemanticLabels interface returns the semantic labels of the anchor. /// <summary> /// Get the semantic label information of the anchor. /// </summary> /// <param name=\"anchorHandle\">Handle of the spatial anchor</param> /// <param name=\"labels\">Returned semantic label strings</param> /// <returns>True if the semantic label information is successfully obtained; otherwise, false</returns> public bool GetAnchorSemanticLabels(ulong anchorHandle, out string labels) Note When the component type supported by the anchor is Bounded2D, you can use the GetAnchorBoundingBox2D interface to obtain rectangular plane data, or use GetAnchorBoundary2D to obtain the plane's vertex data. (If the calibrated plane is non-rectangular, using GetAnchorBoundingBox2D will return the corresponding minimum bounding rectangle based on the plane vertex information.) Launch Room Calibration Application Call the YVRSceneAnchor.instance.RequestSceneCapture interface to enable the room calibration application for room calibration. Process for Obtaining Room Calibration Data You can retrieve the content of room calibration data through the following process: Query anchors with the RoomLayout component through the YVRSpatialAnchor.instance.QuerySpatialAnchor interface. For the queried RoomLayout component anchors, obtain all sub-anchors under the room calibration through the YVRSceneAnchor.instance.GetAnchorContainer interface. Use UUIDs to loop through all sub-anchors queried through the YVRSpatialAnchor.instance.QuerySpatialAnchor interface. For the queried sub-anchors, call YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus to check whether they support the corresponding component types. If you want to know the dimensions, call GetAnchorBoundingBox2D, GetAnchorBoundary2D, or GetAnchorBoundingBox3D to return the corresponding information and scale the Unity objects accordingly. Code Example private YVRSpatialAnchorResult m_RoomLayoutAnchor; private List<YVRSpatialAnchorResult> m_ContainerAnchors = new List<YVRSpatialAnchorResult>(); // Get the anchor with the RoomLayout component public void GetRoomLayoutAnchor() { YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; queryInfo.component = YVRSpatialAnchorComponentType.RoomLayout; YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, OnQueryRoomLayoutAnchorCallback); } private void OnQueryRoomLayoutAnchorCallback(List<YVRSpatialAnchorResult> spatialAnchorResults) { if(spatialAnchorResults != null && spatialAnchorResults.Count >= 0) { m_RoomLayoutAnchor = spatialAnchorResults.First(); } else { // No calibration information, jump to the room calibration application for calibration YVRSceneAnchor.instance.RequestSceneCapture(\"\"); } } // Get all anchors under the room calibration public void GetAnchorContainer() { if(m_RoomLayoutAnchor.anchorHandle == 0) return; bool result = YVRSceneAnchor.instance.GetAnchorContainer(m_RoomLayoutAnchor.anchorHandle, out List<YVRSpatialAnchorUUID> container); if (!result) return; YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; queryInfo.ids = container.ToArray(); YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, OnQueryContainerCallback); } private void OnQueryContainerCallback(List<YVRSpatialAnchorResult> spatialAnchorResults) { m_ContainerAnchors = spatialAnchorResults; } // Get irregular plane vertex information private void GetAnchorBoundary2DData(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.Bounded2D, out YVRSpatialAnchorComponentStatus status); if(status.enable) { YVRSceneAnchor.instance.GetAnchorBoundary2D(anchor.anchorHandle, out List<Vector2> boundary); if (boundary!=null) { for (int i = 0; i < boundary.Count; i++) { Debug.Log($\"boundary uuid:{new string(anchor.uuid)} index:{i} x:{boundary[i].x},y:{boundary[i].y}\"); } } } } // Get rectangular plane information of the anchor private void GetAnchorBoundingBox2DData(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.Bounded2D, out YVRSpatialAnchorComponentStatus status); if (status.enable) { YVRSceneAnchor.instance.GetAnchorBoundingBox2D(anchor.anchorHandle, out YVRRect2D boundingBox2D); Debug.Log( $\"box2d uuid:{new string(anchor.uuid)} boundingBox2D offset.x:{boundingBox2D.offset.x},offset.y:{boundingBox2D.offset.y},extent.x:{boundingBox2D.extent.x},extent.y:{boundingBox2D.extent.y}\"); } } // Get 3D information of the anchor private void GetAnchorBoundingBox3DData(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.Bounded3D, out YVRSpatialAnchorComponentStatus status); if (status.enable) { YVRSceneAnchor.instance.GetAnchorBoundingBox3D(anchor.anchorHandle, out YVRRect3D boundingBox3D); Debug.Log( $\"box3d uuid:{new string(anchor.uuid)} boundingBox3D offset.x:{boundingBox3D.offset.x},offset.y:{boundingBox3D.offset.y},offset.z:{boundingBox3D.offset.z},extent.x:{boundingBox3D.extent.x},extent.y:{boundingBox3D.extent.y},extent.z:{boundingBox3D.extent.z}\"); } } // Get semantic label information of the anchor private void GetAnchorSemanticLabelsData(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.SemanticLabels, out YVRSpatialAnchorComponentStatus status); if (status.enable) { YVRSceneAnchor.instance.GetAnchorSemanticLabels(anchor.anchorHandle, out string semanticLabels); Debug.Log($\"semanticLabel anchor uuid:{new string(anchor.uuid)} semanticLabels:{semanticLabels}\"); } } private void GetAnchorComponentData() { foreach (var anchor in m_ContainerAnchors) { GetAnchorBoundary2DData(anchor); GetAnchorBoundingBox2DData(anchor); GetAnchorBoundingBox3DData(anchor); GetAnchorSemanticLabelsData(anchor); } } Sample Project For more details, please refer to Scene Anchor Sample."
  },
  "Documentation/SpatialSensing/SpatialAnchor.html": {
    "href": "Documentation/SpatialSensing/SpatialAnchor.html",
    "title": "Spatial Anchors | Core",
    "keywords": "Spatial Anchors Introduction Spatial Anchors are key points used for positioning and tracking objects or scenes in virtual or augmented reality environments. They can be used to achieve stable placement of virtual objects, environmental understanding, shared virtual scenes, and other functions. Spatial Anchors are a technology jointly implemented by software and hardware, capable of associating virtual content with specific locations or objects in the real world. Basic Concepts Name Description UUID The unique identifier of the anchor, returned when the anchor is created anchorHandle The handle of the anchor, the identifier in the application's memory Enabling Spatial Anchor Permissions for the Application Open the project in Unity Add XR Origin to the scene Add the YVRManager script Check the Enable SpatialAnchorSupport option in the YVRManager script panel After checking the SpatialAnchorSupport checkbox, the corresponding permission will be added to the AndroidManifest.xml file **\\<uses-permission android:name=\"com.yvr.permission.USE_ANCHOR_API\"\\\\>** Spatial Anchor Interface Creating an Anchor /// <summary> /// Creates a spatial anchor using the given position and rotation. /// </summary> /// <param name=\"position\">Anchor position</param> /// <param name=\"rotation\">Anchor rotation</param> /// <param name=\"result\">Callback for the anchor creation interface</param> public void CreateSpatialAnchor(Vector3 position, Quaternion rotation, Action<YVRSpatialAnchorResult,bool> result) After creating the anchor, the Action<YVRSpatialAnchorResult,bool> callback will be triggered. YVRSpatialAnchorResult returns anchor information, and bool indicates whether the anchor creation was successful. public struct YVRSpatialAnchorResult { // Task Id public ulong requestId; // Anchor handle public ulong anchorHandle; // Anchor unique identifier public Char[] uuid; } Code example public void CreateSpatialAnchor(Transform transform) { YVRSpatialAnchor.instance.CreateSpatialAnchor(transform.position, transform.rotation, OnCreateSpatialAnchor); } private void OnCreateSpatialAnchor(YVRSpatialAnchorResult result, bool success) { if(!success) { Debug.LogError(\"Create spatial anchor failed!\" ); return; } Debug.Log(\"Create spatial anchor success\"); //TODO Custom logic } Saving an Anchor Call the YVRSpatialAnchor.instance.SaveSpatialAnchor interface to save the anchor. The anchor can be saved on the local device or in the cloud. Saving the anchor in the cloud requires the user to be logged into the device account and the device to be connected to the internet /// <summary> /// Saves the spatial anchor using the provided save information /// </summary> /// <param name=\"saveInfo\">Save information</param> /// <param name=\"callback\">Save result callback</param> public void SaveSpatialAnchor(YVRSpatialAnchorSaveInfo saveInfo, Action<YVRSpatialAnchorSaveCompleteInfo,bool> callback) Save anchor parameter information YVRSpatialAnchorSaveInfo public struct YVRSpatialAnchorSaveInfo { // Handle of the anchor to be saved public ulong anchorHandle; // Save location Local: Local memory, Cloud: Cloud public YVRSpatialAnchorStorageLocation storageLocation; } Save result callback Action<YVRSpatialAnchorSaveCompleteInfo,bool> YVRSpatialAnchorSaveCompleteInfo save result information, bool indicates whether the save was successful public struct YVRSpatialAnchorSaveCompleteInfo { // Task Id public ulong requestId; // Result code public int resultCode; // Saved anchor handle public ulong anchorHandle; // Saved anchor UUID public char[] uuid; // Save location public YVRSpatialAnchorStorageLocation location; } Code example: private void SaveAnchor(ulong anchorHandle) { YVRSpatialAnchorSaveInfo saveInfo = new YVRSpatialAnchorSaveInfo(); saveInfo.anchorHandle = anchorHandle; // Save to local saveInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; // Save to cloud //saveInfo.storageLocation = YVRSpatialAnchorStorageLocation.Cloud; YVRSpatialAnchor.instance.SaveSpatialAnchor(saveInfo, OnSaveCompleteCallback); } private void OnSaveCompleteCallback(YVRSpatialAnchorSaveCompleteInfo saveResult,bool success) { Debug.Log(\"Save anchor result:\" + success); } Deleting an Anchor Call the YVRSpatialAnchor.instance.EraseSpatialAnchor() interface to delete the specified anchor at the specified location /// <summary> /// Deletes the corresponding spatial anchor based on the anchor handle and storage location /// </summary> /// <param name=\"anchorHandle\">Handle of the anchor to be deleted</param> /// <param name=\"location\">Storage location of the anchor</param> /// <param name=\"callback\">Callback for the delete result</param> public void EraseSpatialAnchor(UInt64 anchorHandle, YVRSpatialAnchorStorageLocation location,Action<YVRSpatialAnchorResult,bool> callback) Delete result callback Action<YVRSpatialAnchorResult,bool> YVRSpatialAnchorResult deleted anchor, bool indicates whether the deletion was successful Code example: private void EraseSpatialAnchor() { YVRSpatialAnchor.instance.EraseSpatialAnchor(m_spatialAnchor.spaceHandle, YVRSpatialAnchorStorageLocation.Local, OnEraseCompleteCallback); } private void OnEraseCompleteCallback(YVRSpatialAnchorResult result,bool success) { Debug.Log($\"Erase anchor:{result.anchorHandle}, uuid:{new string(result.uuid)} {success}\"); } Querying an Anchor Call the YVRSpatialAnchor.instance.QuerySpatialAnchor to query the anchor /// <summary> /// Queries the spatial anchor based on the provided query information /// </summary> /// <param name=\"queryInfo\">Query information</param> /// <param name=\"queryCallback\">Query result</param> public void QuerySpatialAnchor(YVRSpatialAnchorQueryInfo queryInfo , Action<List<YVRSpatialAnchorResult>> queryCallback) YVRSpatialAnchorQueryInfo query information, supports querying by uuid or component type public struct YVRSpatialAnchorQueryInfo { // Maximum number of anchors to return in the query (default is zero, meaning no limit) public uint MaxQuerySpaces; // Query timeout (default is zero, meaning no timeout) public double Timeout; // Query location public YVRSpatialAnchorStorageLocation storageLocation; // Component type of the anchor to query public YVRSpatialAnchorComponentType component; // Number of uuids to query public int numIds; // List of uuids to query public YVRSpatialAnchorUUID[] ids; } Code example: // Query all local anchors saved on this device private void QueryAllLocalAnchor() { YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, QuerySpatialAnchorComplete); } // Query anchors previously saved in the cloud using uuids private void QuerryUUIDsAnchor(List<char[]> uuids) { YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Cloud; queryInfo.ids = new YVRSpatialAnchorUUID[uuids.Count]; for(int i = 0; i < uuids.Count; i++) { queryInfo.ids[i] = new YVRSpatialAnchorUUID(); queryInfo.ids[i].Id = uuids[i]; } YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, QuerySpatialAnchorComplete); } // Query result private void QuerySpatialAnchorComplete(List<YVRSpatialAnchorResult> results) { Debug.Log(\"QuerySpacesComplete count:\" + results.Count); } When querying saved anchors in the same area, you may not find the anchors. Try walking around to collect more point cloud data and then call the query again. The frequency of interface calls can be decided by yourself, **it is recommended to call once every second** Getting the Real-time Pose of an Anchor Call the YVRSpatialAnchor.instance.GetSpatialAnchorPose interface to get the real-time position of the anchor, keeping the anchor's position fixed. If not obtained, the anchor's position may shift when the user moves in the scene or performs recentering. It supports calling every frame. /// <summary> /// Gets the pose of the anchor /// </summary> /// <param name=\"anchorHandle\">Anchor handle</param> /// <param name=\"position\">Returns the position of the anchor</param> /// <param name=\"rotation\">Returns the rotation of the anchor</param> /// <param name=\"locationFlags\">Anchor location status</param> /// <returns></returns> public bool GetSpatialAnchorPose(ulong anchorHandle, out Vector3 position, out Quaternion rotation,out YVRAnchorLocationFlags locationFlags) When the method to get the anchor pose returns false, or the location status is not tracked, it means the current map has switched. At this time, the anchor becomes invalid, and the returned pose may be incorrect. You need to wait for the user to return to the map where the anchor was created, or when the map where the anchor was created merges with other maps, the anchor will become valid again. Getting Supported Component Types of an Anchor Call YVRSpatialAnchor.instance.GetSpatialAnchorEnumerateSupported to get the supported component types of the specified anchor. Currently, anchors created by third-party references only support pose (Locatable), storage (Storable), and sharing (Sharable). /// <summary> /// Gets the supported component types of the anchor /// </summary> /// <param name=\"anchorHandle\">Anchor handle</param> /// <param name=\"components\">Supported component types</param> public void GetSpatialAnchorEnumerateSupported(ulong anchorHandle, out YVRSpatialAnchorSupportedComponent components) Setting the Component Status of an Anchor Call YVRSpatialAnchor.instance.SetSpatialAnchorComponentStatus() to set the component status of the anchor. The created anchor by default includes pose (Locatable), storage (Storable), and sharing (Sharable). /// <summary> /// Sets the component status of the anchor /// </summary> /// <param name=\"anchorHandle\">Anchor handle</param> /// <param name=\"setInfo\">Status information</param> /// <param name=\"callback\">Callback for setting the anchor status</param> /// <returns></returns> public bool SetSpatialAnchorComponentStatus(ulong anchorHandle, YVRSpatialAnchorComponentStatusSetInfo setInfo, Action<YVRSpatialAnchorSetStatusCompleteInfo,bool> callback) Code example: private void DisableAnchorStorableState(ulong anchorHandle) { YVRSpatialAnchorComponentStatusSetInfo componentStatusSetInfo = new YVRSpatialAnchorComponentStatusSetInfo(); componentStatusSetInfo.component = YVRSpatialAnchorComponentType.Storable; // When setting the Storable of the created anchor to false, the anchor cannot be saved. componentStatusSetInfo.enable = false; YVRSpatialAnchor.instance.SetSpatialAnchorComponentStatus(result.anchorHandle, componentStatusSetInfo,null); } The code example above disables the storage permission of the anchor Getting the Component Status of an Anchor Call YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus to get the status of the specified component of the anchor /// <summary> /// Gets the status of the specified component of the anchor /// </summary> /// <param name=\"anchorHandle\">Anchor handle</param> /// <param name=\"componentType\">Component type</param> /// <param name=\"status\">Returned status information</param> public void GetSpatialAnchorComponentStatus(ulong anchorHandle, YVRSpatialAnchorComponentType componentType, out YVRSpatialAnchorComponentStatus status) Batch Saving Anchors YVRSpatialAnchor.instance.SaveSpatialAnchorList saves multiple anchors at once /// <summary> /// Batch saves anchors /// </summary> /// <param name=\"spatialAnchorHandleList\">List of anchor handles</param> /// <param name=\"location\">Save location</param> /// <param name=\"callback\">Save result callback</param> public void SaveSpatialAnchorList(List<ulong> spatialAnchorHandleList, YVRSpatialAnchorStorageLocation location, Action<bool> callback) Getting Anchor UUID by anchorHandle Call YVRSpatialAnchor.instance.GetSpatialAnchorUUIDForHandle to get the unique identifier of the anchor by the anchor handle /// <summary> /// Gets the unique identifier of the anchor by the anchor handle /// </summary> /// <param name=\"anchorHandle\">Anchor handle</param> /// <param name=\"uuid\">Anchor unique identifier</param> public void GetSpatialAnchorUUIDForHandle(ulong anchorHandle, out YVRSpatialAnchorUUID uuid) Getting Spatial Calibration Anchor Information Only anchors created by the Spatial Calibration application in the system support setting calibration information, including anchor components, semantic tags, plane information, and cube information. You can use the Spatial Calibration interface to get the calibration information of the anchor and then use it in your own reference. For details, refer to the Spatial Calibration documentation. Demo SpatialAnchorSample demonstrates the related functions of spatial anchors, including creating anchors, saving anchors, deleting anchors, querying anchors, sharing anchors, etc. When demonstrating the sharing function, you need to manually configure your own photon id and service."
  },
  "Documentation/SpatialSensing/SpatialMesh.html": {
    "href": "Documentation/SpatialSensing/SpatialMesh.html",
    "title": "Spatial Mesh | Core",
    "keywords": "Spatial Mesh Overview Spatial mesh is used to represent and understand the three-dimensional structure of the physical environment. It typically consists of a series of polygons (usually triangles) that together form a three-dimensional mesh to describe objects and surfaces in the real world. In Unity, you can access and update mesh information through the XRMeshSubsystem and dynamically generate and update mesh objects in the scene. How to Enable Spatial Mesh YVR implements the UnityXR XRMeshSubsystem interface. For details, refer to the Unity XRMeshSubsystem documentation. Enable the scene feature. Check the scene Support feature Request the corresponding scene permission public void ScenePermissionRequest() { const string spatialPermission = \"com.yvr.permission.USE_SCENE\"; if (!UnityEngine.Android.Permission.HasUserAuthorizedPermission(spatialPermission)) { var callbacks = new UnityEngine.Android.PermissionCallbacks(); callbacks.PermissionDenied += Denied; callbacks.PermissionGranted += Granted; UnityEngine.Android.Permission.RequestUserPermission(spatialPermission, callbacks); } } private void Denied(string permission) => Debug.Log($\"{permission} Denied\"); private void Granted(string permission) => Debug.Log($\"{permission} Granted\"); Enable mesh detection YVRMeshTracking.instance.CreateMeshDetector(); Enable passthrough mode. YVRPlugin.Instance.SetPassthrough(true); Get the available XRMeshSubsystem instance. var meshSubsystems = new List<XRMeshSubsystem>(); SubsystemManager.GetInstances(meshSubsystems); Get Spatial Mesh Update Information Get current mesh information private static XRMeshSubsystem s_MeshSubsystem; private static List<MeshInfo> s_MeshInfos = new List<MeshInfo>(); private Dictionary<MeshId, MeshFilter> m_MeshIdToGo = new Dictionary<MeshId, MeshFilter>(); private void UpdateMeshInfos() { if (s_MeshSubsystem == null) { Debug.LogError(\"s_MeshSubsystem is null\"); return; } if (s_MeshSubsystem.TryGetMeshInfos(s_MeshInfos)) { foreach (var meshInfo in s_MeshInfos) { switch (meshInfo.ChangeState) { case MeshChangeState.Added: case MeshChangeState.Updated: AddToQueueIfNecessary(meshInfo); break; case MeshChangeState.Removed: if (m_MeshIdToGo.TryGetValue(meshInfo.MeshId, out var meshGo)) { Destroy(meshGo); m_MeshIdToGo.Remove(meshInfo.MeshId); } break; default: break; } } } } Update Mesh Block Position and Rotation Update mesh object position and rotation. private void UpdateMeshTransform() { NativeArray<MeshTransform> meshTransforms = s_MeshSubsystem.GetUpdatedMeshTransforms(Allocator.Temp); foreach (var item in meshTransforms) { if (m_MeshIdToGo.TryGetValue(item.MeshId, out MeshFilter meshFilter)) { if (meshFilter.transform.position != item.Position) { meshFilter.transform.position = item.Position; meshFilter.transform.rotation = item.Rotation; } } } } ``` Update Corresponding Mesh Block Data If the mesh object does not exist, instantiate a new mesh object and add it to the dictionary. If it exists, generate the mesh asynchronously and update its position and rotation. public GameObject emptyMeshPrefab; public Transform target; private void AddToQueueIfNecessary(MeshInfo meshInfo) { if (!m_MeshIdToGo.TryGetValue(meshInfo.MeshId, out var meshFilter)) { meshFilter = Instantiate(emptyMeshPrefab, target, false).AddComponent<MeshFilter>(); m_MeshIdToGo[meshInfo.MeshId] = meshFilter; } var mesh = meshFilter.mesh; s_MeshSubsystem.GenerateMeshAsync(meshInfo.MeshId, mesh, null, MeshVertexAttributes.None, (result) => { if (result.Status == MeshGenerationStatus.Success) { if (meshFilter.transform.position != result.Position) { meshFilter.transform.position = result.Position; meshFilter.transform.rotation = result.Rotation; } } }, MeshGenerationOptions.ConsumeTransform); } How to Stop Mesh Detection YVRMeshTracking.instance.DestroyMeshDetector();"
  },
  "Documentation_CN/AdvancedFeatures.html": {
    "href": "Documentation_CN/AdvancedFeatures.html",
    "title": "Advanced Features | Core",
    "keywords": "Advanced Features 这部分是对开发人员的具体要求或优化的高级功能的介绍。 到目前为止，高级功能包括： HMD/手柄模拟器：允许你在 Unity 编辑器模式下使用键盘和鼠标来模拟 HMD/手柄的行为的工具。 固定注视点渲染：一个降低渲染纹理边缘分辨率的功能，以节省 GPU 负载。 多视图立体渲染：一个支持同时向双眼层渲染内容的功能。 应用空间扭曲：应用以实际显示刷新率的一半进行渲染。 Spatial Audio: 允许将外部音源添加到项目中。 系统启动画面：引入该功能是为了缩短初始化时间，并支持添加图像作为应用程序的启动画面。 系统键盘：许开发人员轻松将系统键盘纳入应用程序。 焦点感知：将系统用户界面作为场景顶部的叠加显示。 屏幕刷新率：它会影响向用户显示的图像质量。 合成层：可以用来展示场景中的焦点对象。 超采样与锐化：可以提高图像质量。"
  },
  "Documentation_CN/AdvancedFeatures/ApplicationSpaceWarp.html": {
    "href": "Documentation_CN/AdvancedFeatures/ApplicationSpaceWarp.html",
    "title": "应用空间扭曲 | Core",
    "keywords": "应用空间扭曲 应用空间扭曲（AppSW）是一种面向开发者的优化技术，允许应用以实际显示刷新率的一半进行渲染，从而为合适的内容释放额外的计算能力。据测试使用，AppSW 最高可为应用提供了70%的额外算力，而且几乎没有可感知的瑕疵。开发者在开发和设计阶段开启 AppSW 功能后，系统会基于应用内原始数据的运动矢量和深度信息进行帧外推和重投影，将一帧原始渲染图像自动合成多个新帧，以降低设备原始输出帧率、降低设备负载和功耗，最终突破算力限制，在 YVR 设备上实现接近 PCVR 更逼真、更优秀的画面表现。 设备要求 设备版本： YVR1 或 YVR2 或 Play Form Dream MR SDK 版本： 2.4.0 及以上 系统版本 1.2.5.x 开启 AppSW 请参考以下步骤启用 AppSW 功能。 克隆 Unity-Graphics 仓库。在项目中导入以下三个 package.json 文件。从上方菜单栏处，选择 Window > Pacakge Manager > Add package from disk... 并安装以下软件包： Core RP Library Shader Graph Universal RP 如果使用自定义 shader，则需要在 AppSW 物体 Shader 中添加 Motion Vector Pass。 Note 如果使用 URP Lit 或 SimpleLit，则无需修改 Shader。 只有不透明的物体需要添加此 Motion Vector Pass，透明物体无需添加。 接近于不透明的物体(如 Alpha 接近于1)，也可以根据情况添加。 从上方菜单栏处，选择 Edit > Project Settings。在左侧栏，选择 Player > Android settings > Other Settings。在 Rendering 部分，将 Vulkan 添加至 Graphics APIs。 从上方菜单栏处，选择 Edit > Project Settings。 在左侧栏，选择 XR Plug-in Management > YVR，完成以下设置： 勾选 Use AppSW 在 Stereo Rendering Mode 里，选择 Multiview 输入以下代码启用 AppSW。 YVRManager.instance.SetAppSWEnable(true); 假设你应用的当前帧率为90帧，开启AppSW功能时，应用会以45帧渲染画面，但仍可以达到90帧的效果。若需要对比开启 AppSW + 45帧和关闭 AppSW + 45帧渲染的效果：在 YVR Manager 下，选择 Quality Manager > V Sync Count: K2 进行对比。 已知问题 在使用 AppSW 功能时，你的应用可能会出现一些渲染问题。请参考以下场景和说明来解决问题： 若场景内的背景十分简洁，并且包含直线、网格等元素，AppSW 可能会导致图像失真，例如：直线扭曲。若出现图像失真情况，可不断进行调试并调整背景，直到达到满意的效果。 若场景内包含一些高速旋转的物体，开启 AppSW 后，物体周围可能会出现失真伪影，可通过降低物体的旋转速度来解决该问题。 若场景中个别元素有意外停顿或画面上有波纹，这一般是因为运动矢量的数据不够准确，具体原因为： 如果运动矢量缓冲区没有显示场景中移动部分的运动，就会造成停顿，因为移动的物体在合成帧中似乎保持在原地。 如果运动矢量缓冲区显示场景中不动的部分有运动，就会产生波纹，因为静止的物体在合成帧中会发生移动。"
  },
  "Documentation_CN/AdvancedFeatures/CompositorLayers.html": {
    "href": "Documentation_CN/AdvancedFeatures/CompositorLayers.html",
    "title": "合成层 | Core",
    "keywords": "合成层 合成层（Composition Layers）可以将所有需要展示的物体进行分割，以达到诸如提高特定对象清晰度的目的。在最传统的渲染模式下，场景内所有的物体都将被渲染至同一张纹理（Eye Buffer）中，该纹理将由系统进行 ATW、畸变、合成等处理并最终显示在设备屏幕上。我们可以通过合成层技术，将场景内的特定对象渲染至一张纹理上，并将该纹理直接交由系统进行合成，因此减少了一次额外的纹理采样，提高了物体渲染的清晰度。 需要注意的是，合成层并非万能的，每一个合成层对于系统而言都会增加合成的开销，因此在使用合成层时，需要根据实际需求和设备性能进行合理的使用： 建议将合成层用于需要提高清晰度的物体上，例如 UI 界面、文字等。 合成层的数量不宜过多，一般情况下，单个场景的合成层数量控制在 4 层左右即可。 合成层的深度值需要合理设置，以确保合成层和 Eye Buffer 中的内容不会引发错误的遮挡效果。 合成层类型 将合成层根据类型划分可分为 Overlay 和 Underlay 两种类型： Overlay：Overlay 类型的合成层将纹理呈现在 Eye Buffer 前面，默认为该选项。对于需要始终出现在 Eye Buffer 前面的物体，如光标，可以使用 Overlay 类型的合成层。 Underlay：Underlay 类型的合成层将纹理呈现在 Eye Buffer 后面。由于 Underlay 层依赖于渲染目标上的 alpha 通道。场景中的所有对象绘制到 Eye Buffer 后，你需要在 Eye Buffer 上构建一个 “洞”，使 Underlay 纹理透过这个 “洞” 显示出来。类似 UI 界面这样的物体，可能会被 Eye Buffer 内的其他物体所遮挡（如 UI 被手柄遮挡），此时可以使用 Underlay 类型的合成层。 可通过 compostion depth 来区分 Overlay 和 Underlay 类型的合成层： Eye Buffer 的深度值为 0。 Underlay 类型的合成层深度值小于 0。 Overlay 类型的合成层深度值大于 0。 合成层形状 合成层的形状决定了合成层的展示效果。合成层的形状有三种：Quad、Cylinder 和 Equirect： Quad：具有四个顶点的四边形平面纹理，通常用来显示场景中的文本或信息。 Cylinder：具有柱面弧度的圆柱形纹理，通常用于显示曲面 UI 界面。若使用 Cylinder，则： Transform 中心将作为 Cylinder 的中心，Transform 的尺寸将作为 Cylinder 的尺寸，且 Cylinder 中 Transform 的尺寸均为全局尺寸（Global Scale）。其中，Z 作为 Cylinder 的半径，Y 作为 Cylinder 的高，X/Z 作为 Cylinder 的弧长。 必须将摄像机放置在圆柱内切球内。如果摄像机接近内切球表面，合成层将无法显示。 Equirect：球体纹理，通常用于显示 360/180 全景纹理。 Radius 参数用于指定圆柱的半径，当设置为 0 或者正无限大（1.0f/0.0f）时，表示无限大的半径。球面半径无限大时，其展示效果如同空场景中的天空盒。 Destination Rects 下的 X 参数无用；W 参数映射到中心角，关于中心点坐标 (0, 0) 对称。 纹理类型 合成层处理的对象为纹理，纹理类型可分为三种： 外部纹理：纹理内容是从 Unity 的渲染上下文外获取。在通常的使用案例下，为 Android Surface 直接获取纹理（例如：Android 播放器视频纹理），对于视频播放器等场景，需要使用外部纹理。 动态纹理：纹理内容在运行时会发生更新，例如：摄像机生成的 RenderTexture 图片。 静态纹理：纹理内容在运行时不会发生更新，如场景中的静态广告图片。 纹理 针对使用在合成层上的纹理，可以有以下的设置： Texture Rects 勾选 Texture Rects 选框后，可配置 Source Rects 和 Destination Rects 相关参数。 若选择自定义 Source Rects 和 Destination Rects（即选择 Custom 选项），则需确保 X、Y、W、H 的值位于指定区间内：X：\\([0,1)\\)、Y：\\([0,1)\\)、W：\\((0,1]\\)、H：\\((0,1]\\)。 透明度 alpha 参数用于设置纹理的透明度，取值范围为 \\([0,1]\\)。 示例 CompositeLayer 场景是用来说明合成层效果的。合成层的设计是为了提高平面 UI 的清晰度。在传统的渲染管道中，UI 纹理必须首先被渲染到 Unity 管理的颜色缓冲区，然后 Unity 管理的颜色缓冲区将被渲染到屏幕缓冲区。而使用合成层时，目标 UI 纹理可以直接由本地渲染。因此，可以减少由采样引起的失真。 在 YVR 设备上运行 CompositeLayer 场景时的屏幕截图如下： Caution 由于合成层是由 YVR 设备的原生系统渲染的，所以内容不能在 Unity 编辑器中显示。 下面的部分是由 Unity Eye Buffer 渲染的界面，上面的部分是用合成层渲染的。左边的部分是动态纹理，右边的部分是静态纹理。 使用合成层（上部）和 Unity Eye Buffer（下部）渲染的详细区别如下： Caution 在细节图像中可以看到一些色散，这是为抵消镜头造成的色散而产生的。因此，在使用设备时，不会看到所有的色散. 合成层示例 请参考以下示例项目。 打开一个新项目或当前项目。 导入最新版 SDK。 在 Project 面板下，选择 Pacakages > YVR Core > Scenes > CompositeLayer。 在 CompositeLayer 文件夹中，选择 CompositeLayer.unity 打开该场景。 在 File > Build Settings... 下，选择 Add Open Scenes。 选择 Build 并为文件命名。 在设备上安装 APK 文件。 该场景显示不同深度值遮挡效果、动态和静态图像的效果。 图形雨矩形示例 请参考以下示例项目。 打开一个新项目或当前项目。 导入最新版 SDK。 在 Project 面板下，选择 Pacakages > YVR Core > Scenes > CompositeLayer。 在 CompositeLayer 文件夹中，选择 CompositeLayerShapeAndRect.unity 打开该场景。 在 File > Build Settings... 下，选择 Add Open Scenes。 选择 Build 并为文件命名。 在设备上安装 APK 文件。 该场景显示形状切换、设置源矩形和目标矩形的效果。 Underlay vs Overlay 由于原生系统需要对多个图层进行合成，因此需要知道所有图层的顺序。这个顺序是由合成层的深度决定的，Unity Eye Buffer 的深度被设置为 0。而所有深度大于 0 的层被称为 Overlay，而深度小于 0 的层被称为 Underlay。 底层将首先被绘制，然后是 Unity Eye Buffer，最后是 Overlay。因此，Unity Eye Buffer 将覆盖 Underlay，而 Overlay 将覆盖 Eye Buffer。 为了让 Underlay 正常显示，而不是被完全覆盖，需要在 Unity Eye Buffer 中开一个孔。着色器 YVR/UnderlayPuncher 被设计用来生成这样的孔： Tip 示例场景中左上角的图层是 Underlay。"
  },
  "Documentation_CN/AdvancedFeatures/DisplayRefreshRate.html": {
    "href": "Documentation_CN/AdvancedFeatures/DisplayRefreshRate.html",
    "title": "屏幕刷新率 | Core",
    "keywords": "屏幕刷新率 屏幕刷新率代表眼镜屏幕每秒的刷新次数，通常屏幕刷新率与应用支持的最高帧率相同。例如，屏幕刷新率为 72 Hz 时，应用的最高帧率为 72 FPS。屏幕刷新率越高，画面刷新越快，画面流畅度和稳定性越好。但是，高屏幕刷新率也会对设备性能产生一定影响，当应用无法达到设备的最高刷新率时，可能会导致掉帧、卡顿、撕裂、延迟等问题。 默认情况下，我们鼓励应用将屏幕刷新率设定为 90 Hz，以提供更好的用户体验，仅当特殊需求时才将屏幕刷新率设定为 72 Hz，如： 性能不足、电量消耗过大时：你可以通过 你可以使用实时监控工具监控应用性能，确保应用可以承受高屏幕刷新率。详情可参考性能监控与分析。 当播放视频时：如果视频帧率与屏幕刷新率不匹配，可能会导致视觉上的不连续、顿挫感。如视频是 24 hz 的，而屏幕刷新率设定为 90 HZ。因为 24Hz 的视频帧率无法均匀地分布在 90Hz 的刷新率上，导致每一帧的在屏幕上显示的时间不一样，从而产生视觉上的卡顿感，因此建议在播放视频时切换到适合的屏幕刷新率。 设置屏幕刷新率 通过 YVRManager.instance.cameraRenderer.displayFrequency 设置屏幕刷新率，如下所示： YVRManager.instance.cameraRenderer.displayFrequency = 90; 你可以在应用启动时设置屏幕刷新率，也可以在应用运行时根据需要动态调整屏幕刷新率，当你未设置屏幕刷新率时，屏幕刷新率默认为 90 Hz。"
  },
  "Documentation_CN/AdvancedFeatures/FixedFoveatedRendering.html": {
    "href": "Documentation_CN/AdvancedFeatures/FixedFoveatedRendering.html",
    "title": "固定注视点渲染 | Core",
    "keywords": "固定注视点渲染 静态注视点渲染 (FFR) 以低于中心的分辨率渲染眼睛纹理的边缘，由于较低的碎片着色器要求，可以减少 GPU 负载。因此，具有高碎片着色器计算量的内容将从使用 FFR 中看到最大的性能优势。 FFR 的级别可以通过 YVR管理程序 进行调整，如下图所示，较高的级别将导致较低的 GPU 负载，但在眼睛渲染纹理的边缘出现模糊的结果。 FFR 级别可以按帧修改，这意味着你可以根据运行时间中的内容切换 FFR 级别。然而，不同 FFR 级别之间的跳跃可能是明显的，因此强烈建议在切换场景时改变 FFR 级别。 请记住FFR 带来的 GPU 性能提升是以减少眼睛渲染纹理的边缘效果为代价的。因此，在使用 FFR 时，你应该注意视觉质量和 GPU 性能之间的平衡。 Warning FFR 不是解决 GPU 性能问题的长久之计。 启用动态注视点渲染 在 YVR 管理器设置下，勾选 Fixed Foveated Rendering Dynamic。"
  },
  "Documentation_CN/AdvancedFeatures/FocusAwareness.html": {
    "href": "Documentation_CN/AdvancedFeatures/FocusAwareness.html",
    "title": "焦点感知 | Core",
    "keywords": "焦点感知 焦点感知功能允许系统 UI 在 XR 应用上叠加显示，这样当用户需要访问系统 UI 进行操作时，可以直接在应用中进行操作，而无需退出应用。 焦点感知功能属于系统的能力，开发者无需编写代码即可使用，在用户按下手柄 Home 键时，系统会自动使用焦点感知功能显示系统 UI。当系统 UI 出现时，应用会失去焦点，开发者需要监听焦点感知的事件，以保证正确处理焦点感知的状态，例如： 失去焦点时，将游戏暂停 失去焦点时，停止渲染手柄模型（因为系统在此状态也会渲染系统的手/手柄模型，以进行 UI 的交互） 焦点感知相关的事件如下： 事件 说明 YVRManager.instance.eventsManager.onFocusGained 应用程序失去输入焦点。例如：应用程序运行时，若用户按下手柄上的 Home 按钮，系统 UI 显示，应用程序会失去输入焦点。此时，开发者可以暂停游戏、禁用用户的输入功能（例如手柄）或通知其他在线用户该用户当前没有专注于应用程序。 YVRManager.instance.eventsManager.onFocusLost 应用程序获得输入焦点。系统 UI 被关闭时，该事件触发。此时，开发者可以恢复游戏或开启用户的输入功能。 Tip 焦点感知的造成的 Focus 状态变化，与 Unity 默认提供的 Focus 状态变化，并非相同的概念。前者是针对 XR 应用的焦点感知功能，而后者是根据应用窗口的焦点状态变化。因此开发者不可以直接依赖 Unity 的 OnApplicationFocus 方法来处理焦点感知的状态变化。"
  },
  "Documentation_CN/AdvancedFeatures/HMDControllerEmulator.html": {
    "href": "Documentation_CN/AdvancedFeatures/HMDControllerEmulator.html",
    "title": "HMD/手柄模拟器 | Core",
    "keywords": "HMD/手柄模拟器 HMD/手柄模拟器是一个允许你在 Unity 编辑器中使用键盘和鼠标来模拟 HMD/手柄模拟器的行为工具，如平移、旋转和点击。 Warning HMD/手柄模拟器只在 Unity 编辑器模式下工作。 HMD 模拟器 在使用 HMD 模拟器时，你可以用键盘来模拟 HMD 的平移，用鼠标模拟 HMD 的旋转。HMD 模拟器可以在 Unity Inspector 窗口中进行配置，可配置的部分如下： Activate Keys 是激活 HMD 仿真器的按键。当任何一个 Activate Keys 被按下时，HMD 模拟器被激活。您可以通过水平和垂直移动鼠标来模拟 HMD 在 Yaw/Pitch 轴上的旋转。 当 HMD 模拟器被激活时，如果您想让 HMD 在 Roll 轴上旋转，您需要按任意一个 Roll Keys。此后，鼠标的水平移动将使 HMD 在滚动轴上旋转，而鼠标的垂直移动则没有效果。 当 HMD 模拟器被激活时，你可以按 Translation Keys 来翻译 HMD。在默认配置下 W、S、A、D、Q、E 键分别指向前进/后退/左/右/上/下。 平移和旋转的速度可以通过旋转灵敏度（Rotation Sensitivity）和 平移灵敏度（Translation Sensitivity）来配置。 打开 Reset HMD Pose On Release 后，被按的 Activate Keys 松开时，HMD 的旋转和平移都将重置为 0,0,0。 手柄模拟器 在使用手柄器模拟器时，你可以用键盘来模拟手柄的点击动作，用鼠标模拟手柄的平移和旋转。手柄模拟器可以在 Unity Inspector 窗口中进行配置，可配置的部分如下： Activate Keys 是激活手柄仿真器的按键。当任何一个 Activate Keys 被按下时，手柄模拟器被激活。你可以用鼠标模拟手柄的转换。Target Controller 的屏幕位置将与屏幕上的光标位置相同。 当手柄模拟器被激活时，如果你想旋转手柄，你需要按任何一个 Rotation Keys。之后，鼠标的水平移动将使 Target Controller 在 Yaw 轴上旋转，鼠标的垂直移动将使 Target Controller 在 Pitch 轴上旋转。 Important 你不能在模拟器上同时平移和旋转手柄。 像 HMD 模拟器一样，旋转速度可以通过旋转灵敏度（Rotation Sensitivity）来配置。但是，由于手柄的位置是由鼠标光标的位置决定的，而不是由鼠标的移动决定的，所以在手柄模拟器中没有关于平移灵敏度（Translation Sensitivity）的概念。 当手柄模拟器被激活时，按下 Key Mapping 中的按键将模拟手柄中相应的按键。与默认配置一样，按键盘上的 Alpha 1 键会模拟左手手柄的 Index Trigger 键的点击动作。"
  },
  "Documentation_CN/AdvancedFeatures/MultiViewStereoRendering.html": {
    "href": "Documentation_CN/AdvancedFeatures/MultiViewStereoRendering.html",
    "title": "多视图立体渲染 | Core",
    "keywords": "多视图立体渲染 Tip 也被称为单通道立体渲染。 YVR 设备支持单通道立体渲染 (Single Pass Stereo Rendering)，这减少了 CPU 的负荷，而 CPU 的负荷来自于绘图调用。 在典型的立体渲染中，双眼的缓冲区必须依次进行渲染，这就导致了双重绘制调用。多视图立体渲染依赖于 OpenGL 中的多视图渲染 MultiView Rendering 功能，它允许绘制调用同时渲染阵列纹理的几个层。因此，左眼和右眼缓冲区的内容都可以在一次绘制调用中被绘制出来，而且顶点着色器可以知道它正在写入哪一层，所以每个眼睛缓冲区的渲染结果仍然是不同的，这保证了立体效果。 在 Unity 中用 YVR SDK 打开单通道需要两个步骤： 在 YVR XR Plugin-in 配置窗口中，选择 Multiview 作为 Stereo Rendering Mode。 Caution 单程立体渲染需要着色器的支持，因此你需要修改你自己的自定义着色器，以支持单程立体渲染。更多信息，请参考相关的 Unity 文档。"
  },
  "Documentation_CN/AdvancedFeatures/ResonanceAudio.html": {
    "href": "Documentation_CN/AdvancedFeatures/ResonanceAudio.html",
    "title": "Resonance Audio | Core",
    "keywords": "Resonance Audio 这是一份使用 Resonance Audio 开发 Unity 项目的指南。 更多详情，请参考 Resonance Audio Unity's documentation。 创建新的 Unity 项目并导入 SDK 打开 Unity Hub 并创建一个 3D 项目。 选择 Assets -> Import Package -> Custom Package。 选择已下载的 ResonanceAudioForUnity_*.unitypackage 文件。 在 Importing Package 中，点击 Import。如有提示，接受任何 API 升级。 配置 Unity 项目以使用 Resonance Audio 通过 Edit -> Project Settings -> Audio 打开 AudioManager 设置。 选择 Resonance Audio 作为 Spatializer Plugin。 选择 Resonance Audio 作为 Ambisonic Decoder Plugin。"
  },
  "Documentation_CN/AdvancedFeatures/SplashScreen.html": {
    "href": "Documentation_CN/AdvancedFeatures/SplashScreen.html",
    "title": "系统启动画面 | Core",
    "keywords": "系统启动画面 当用户打开应用后，系统需要一段时间加载应用，YVR SDK 支持开发者使用自定义的启动画面来控制这段加载时间内的用户体验。 减少系统加载应用时的时间：通过自定义的启动画面，可以让用户觉得已经进入了游戏，以达到减少加载时间的效果。 提高品牌知名度和形象：启动画面是应用的第一印象，可以通过自定义启动画面，实现加载时展示应用的主题、风格和品牌信息的效果。 Tip 该功能并不能减少应用的初始化时间，也无法替换 Unity 的 Splash，即 Unity Logo 和 “MADE WITH Unity” 文案的显示。 该功能是用于修改系统加载应用时的表现。 开发者可以在 Project Settings -> XR Plug-in Management - YVR 中通过 OS Splash Screen 选项来设置启动画面。"
  },
  "Documentation_CN/AdvancedFeatures/SupersamplingAndSharpening.html": {
    "href": "Documentation_CN/AdvancedFeatures/SupersamplingAndSharpening.html",
    "title": "超采样和锐化 | Core",
    "keywords": "超采样和锐化 启用超采样或锐化功能可以提高图像质量。超采样可以让画面质量进一步提升，适用于解决下采样时的闪烁及摩尔纹等问题。锐化可以提升清晰度，改善上采样时的图像模糊问题。 开启超采样功能 使用合成层选择超采样类型： 在 Compositor Layer 设置中， 选择 Super Sampling Type： - None - Normal - Quality 开启锐化功能 使用 YVR 管理器选择锐化类型： 在 YVR Manager 设置中， 选择 Sharpen Type： - None - Normal - Quality 注意事项 使用锐化时，申请的 swapchain 请开启多层 mipmap，并在提交前为其每层 mipmap 生成纹理数据。 在 OpenXR 中，所有设置都只是建议，合成器可以根据需要启用或禁用它们。 合成图层过滤需要更多的 GPU 资源。对于锐化和超采样算法尤其如此，在开发时，您应该权衡增加的视觉保真度与提供最佳 VR 用户体验所需的额外 GPU 资源。 示例 请参考以下示例项目。 打开一个新项目或当前项目。 导入最新版 SDK。 在 Project 面板下，选择 Pacakages > YVR Core > Scenes > CompositeLayer。 在 CompositeLayer 文件夹中，选择 CompositeLayerSuperSamplingSharpen.unity 打开该场景。 在 File > Build Settings... 下，选择 Add Open Scenes。 选择 Build 并为文件命名。 在设备上安装 APK 文件。"
  },
  "Documentation_CN/AdvancedFeatures/SystemKeyboard.html": {
    "href": "Documentation_CN/AdvancedFeatures/SystemKeyboard.html",
    "title": "系统键盘 | Core",
    "keywords": "系统键盘 系统键盘功能让开发者可以在应用能直接使用 Dream OS 中能提供的系统键盘进行文字的输入，而不需要自己开发键盘。其原理是系统将监听应用需要唤醒键盘的事件，并在这种情况下通过 焦点感知 功能唤醒键盘。 使用示例 Tip 下示例核心是创建一个 Unity 的 InputField，并在场景中使用系统键盘进行输入。 在 Hierarchy 面板下，完成以下步骤： 选择 + > UI > Event System 将事件系统添加至场景中 选择 + > UI > Canvas 将画布添加至场景中 选中 Canvas 并在 Inspector 面板下，完成以下步骤： 将 Render Mode 设置为 World Space 将 Event Camera 将为 Main Camera 将 Tracked Device Graphics Raycast 脚本添加至 Canvas 在 Hierachy 面板下，右击 Canvas 并选择 UI > Input Field - TextMeshPro 从快捷菜单中将输入字段加到场景中。 打包应用至真机，并在真机上点击 Input Field，此时将看到系统键盘弹出。 Note 系统键盘功能在 Editor 下无法使用"
  },
  "Documentation_CN/AdvancedFeatures/UnityAudioSource.html": {
    "href": "Documentation_CN/AdvancedFeatures/UnityAudioSource.html",
    "title": "Unity 音频源 | Core",
    "keywords": "Unity 音频源 创建一个音频源需要音频剪辑。剪辑音源是将要播放的音源文件。音频源就像一个控制器，用于启动和停止该剪辑音源的播放，以及修改其他音频属性。 要创建新的音频源，请执行以下操作： 将音频文件导入到 Unity 项目中。这些文件成了剪辑音源。 从菜单栏中进入 GameObject -> Create Empty。 在选中新的游戏对象之后，选择 Component -> Audio -> Audio Source。 在 Inspector 中， 找到 Audio Source 组件上的 Audio Clip 属性并分配一个剪辑，方法是从 Project 窗口中拖动一个剪辑，或者单击 Inspector 属性右侧的小圆圈图标，然后从列表中选择一个剪辑。 Note 如果只想要为 Assets 文件夹中的一个音频剪辑创建音频源，则可以将该剪辑音源拖动到 Scene 视图中，随后将自动为其创建一个包含音频源组件的游戏对象。如果将剪辑音源拖动到现有游戏对象上，则会附加剪辑以及新的音频源。如果对象已经有了音频源，则新拖放的剪辑音源将替换音频源当前使用的剪辑音源。"
  },
  "Documentation_CN/Archive/CameraRig.html": {
    "href": "Documentation_CN/Archive/CameraRig.html",
    "title": "Camera Rig | Core",
    "keywords": "Camera Rig YVR Unity 软件包包含一个预制件，YVRCameraRig，它是整个 SDK 的核心。它还提供了对 YVRManager 的访问，它是 VR 功能的主要入口。 YVRCameraRig 包含一个名为 TrackingSpace 的游戏对象，它被设计用来微调头部跟踪参考框架和你的世界之间的关系。 在 TrackingSpace 下，你会发现一个 CenterEyeAnchor 的游戏对象，它被标记为主要的 Unity 摄像机，每只眼睛有两个固定的游戏对象，分别命名为 LeftEyeAnchor 和 RightEyeAnchor，以及两个手柄的锚定对象，分别命名为 LeftControllerAnchor 和 RightControllerAnchor。 了解摄像机的行为 当 YVR Unity 包被导入 Unity 时，你的头戴式设备会自动将头部和手柄的跟踪参考传递给 Unity，这使 Unity 摄像机的位置和方向与你在现实世界的位置和方向相匹配。 在一些游戏中，你可能需要控制玩家角色（由摄像机识别）的移动。在这种情况下，你可以让 YVRCameraRig 成为一个游戏对象的子对象，并创建一个脚本来控制该游戏对象的行动。 在场景中添加 YVRCameraRig YVRCameraRig 是 Unity 主摄像机的替代品，这意味着在 YVR 设备上构建应用程序时，应从 Hierarchy 视图中删除 Unity 的 Main Camera 而使用 YVRCameraRig。 执行以下步骤以此替换 Unity 的主摄像机 为 YVRCameraRig： 在 Hierarchy 窗口中右击 Main Camera 游戏对象，并点击 Delete。 进入 Project 选项，展开 Packages -> YVR Core -> Prefabs 文件夹，将 YVRCameraRig 预制件拖入 Hierarchy 面板。"
  },
  "Documentation_CN/Core.html": {
    "href": "Documentation_CN/Core.html",
    "title": "简介 | Core",
    "keywords": "简介 Core 用户手册分为以下几个部分： YVRManager: 介绍核心管理程序 YVRManager。 高级功能：介绍高级功能旨在提高程序性能或简化开发过程。 空间感知: 介绍空间感知相关功能，开发者可使用这部分的 SDK 感知真实环境 多模态交互：介绍多模态交互相关功能，开发者可使用这部分的 SDK 实现应用的多种交互方式 示例场景：介绍 SDK 中所包含的示例场景。"
  },
  "Documentation_CN/CoreDevelopmentBlocks/YVRManager.html": {
    "href": "Documentation_CN/CoreDevelopmentBlocks/YVRManager.html",
    "title": "YVRManager | Core",
    "keywords": "YVRManager YVRManager 脚本是整个 SDK 的核心管理程序，它控制 VR 事件功能的执行，并提供不同的渲染质量、跟踪模式、性能等设置。 配置设置 渲染质量、跟踪空间、性能等方面的设置可以通过 YVRManager 的 Inspector 面板进行设置。 质量 VSync Count：每一帧之间应通过的 VSyncs 数量。 Fixed Foveated Rendering Level：固定凹陷渲染的级别。该值越高，图片的边缘越模糊，但性能会越好。 UseRecommendMSAALevel：固定凹陷渲染的级别。该值越高，图片的边缘越模糊，但性能会越好。 追踪 Tracking Space：刚性姿势的跟踪空间。 Eye Level：HMD 姿势不会考虑地面高度。 Floor Level：大多数情况下使用的模式，它将考虑地面高度和重新定位状态。 Stage：HMD的姿势不会考虑重新定位的状态。 事件 在运行时发生的事件都在 YVRManager.instance.eventsManager 中管理，包括： onTrackingAcquired：当头部获得追踪时发生。 onTrackingLost：当头部失去追踪时发生。 onHMDMounted: 当 HMD 被安装到用户头上时发生。 onHMDUnMounted：当 HMD 从用户头上取下时发生。 onRecenterOccurred：发生在重新定位时。 onFocusGained：当应用程序获得焦点时发生。 onFocusLost：当应用程序的焦点丢失时发生。 onVisibilityGained：当应用程序可见时发生。 onVisibilityLost：当应用程序被其他内容完全遮挡时发生。 onUpdate：发生在每一帧的更新功能中。 onPreSubmitGfx：发生在当前帧被提交到本地之前，这将在渲染线程中被触发。 onPostSubmitGfx：发生在当前帧被提交到本地后，这将在渲染线程中被触发。 设备状态 设备状态可以在 YVRManager.instance.hmdManager 中查询，例如：电池电量、电池温度、音量大小。 边界状态 所有的边界状态都可以在 YVRManager.instance.boundary 中查询，例如：边界尺寸、边界可见度。此外，YVRManager.instance.boundary 还提供了几个接口，用于查询与边界相交的状态。"
  },
  "Documentation_CN/DemoScenes.html": {
    "href": "Documentation_CN/DemoScenes.html",
    "title": "示例场景 | Core",
    "keywords": "示例场景 这部分是对 SDK 中所有示例场景的介绍。 为了更好地说明 SDK 中的各个模块，SDK 中包含了几个示例场景： BoxWorld：最基本的场景，用于说明手柄和云台的 6DoF 追踪状态。 Input：用于说明和调试 YVRInput 接口的场景。 Raycasting：用于说明如何与 UGUI 和物理碰撞器交互的场景。"
  },
  "Documentation_CN/DemoScenes/BoxWorld.html": {
    "href": "Documentation_CN/DemoScenes/BoxWorld.html",
    "title": "DebugScenes.BoxWorld | Core",
    "keywords": "DebugScenes.BoxWorld 位于 Packages/YVR Core/Scenes/BoxWorld.scene BoxWorld 场景是最基本的场景，它用于说明手柄和头部的 6DoF 追踪状态。 Note BoxWorld 场景是某种最小的场景，用于测试 SDK 的渲染功能。如果这个场景无法使用，在大多数情况下，项目的设置存在一些错误。"
  },
  "Documentation_CN/DemoScenes/Input.html": {
    "href": "Documentation_CN/DemoScenes/Input.html",
    "title": "DebugScene.Input | Core",
    "keywords": "DebugScene.Input 位于 YVR/Scenes/Input.scene 另请参见： YVRInput Input 场景是用于说明和调试 YVRInput 接口： 所有输入的可持续状态将会显示在面板的左侧，如：手柄电池 / 按键是否按下 / 索引触发位置。 所有输入的瞬时状态将显示在面板的右侧，如：手柄点击下降 / 上升。 所有关于手柄振动的设置都显示在面板左半部分的底部。用户可以通过这些按钮修改振动的频率 / 振幅，或切换振动状态。"
  },
  "Documentation_CN/DemoScenes/Raycasting.html": {
    "href": "Documentation_CN/DemoScenes/Raycasting.html",
    "title": "DebugScene.Raycasting | Core",
    "keywords": "DebugScene.Raycasting 位于 in YVR/Scenes/Raycasting.scene 另请参见： YVRInputModule YVRRaycastLaserBeam Raycasting 场景用于说明如何在使用 VR 手柄时与 UGUI 和物理碰撞器进行交互。 当射线击中目标物体时，光标（默认情况下用球体表示）将位于射线与物体相交的位置。 放在场景中的立方体被用来调试物理学的射线投影功能。 三个不同的 UI 元素，按钮 / 滑块 / 卷轴，放置在场景中，用于调试 UI 的光线投射功能。"
  },
  "Documentation_CN/MultiModalInteraction.html": {
    "href": "Documentation_CN/MultiModalInteraction.html",
    "title": "多模态交互 | Core",
    "keywords": "多模态交互 我们提供了多种交互方式供你在应用中使用，包括： 手柄：最传统的 VR 交互方式 手势 ：获取用户的手势信息 EyeTracking: 获取用户的眼动信息"
  },
  "Documentation_CN/MultiModalInteraction/Controllers.html": {
    "href": "Documentation_CN/MultiModalInteraction/Controllers.html",
    "title": "手柄 | Core",
    "keywords": "手柄 YVRInput 和 YVRControllerRig 是获取手柄数据的两个入口。YVRInput 实现了所有与手柄输入状态相关的功能，而 YVRControllerRig 则封装了所有与手柄刚性相关的操作和信息。 了解更多信息，请参考 YVRInput 和 YVRControllerRig。 YVR 触摸追踪 YVRControllerRig 通过 GetPosition 和 GetRotation 提供触摸位置和方向数据。其他数据，如速度、角速度、加速度和角加速度也可以从 YVRControllerRig 获得。 YVRInput 用途 YVRInput 的主要用途是通过 Get()、GetDown() 和 GetUp() 访问手柄输入状态。并且设置手柄的振幅和时长。 Get()：查询一个控制器的当前状态。 GetDown()：查询该帧中是否有按钮（触摸）被按下。 GetUp()：查询这一帧是否有按钮（触摸）被释放。 SetControllerVibration()：设置手柄振幅与时长。 控制输入枚举 对于 Get()、GetDown() 和 GetUp() 函数，有多种变化以提供对不同控件集的不同访问。这些控制集被分为两类：Virtual Mapping 和 Raw Mapping，并都是通过枚举暴露的。在 Virtual Mapping 中定义的枚举类别如下： VirtualButton：YVR Touches 上的传统按钮。 VirtualTouch：YVR Touches 上的电容感应控制面。 VirtualAxis1D：报告 float 状态的一维控件。 VirtualAxis2D：报告 Vector2 状态的二维控件。 Raw Mapping 类别中定义的枚举与 Virtual Mapping 中的枚举高度相关，如下所示： RawButton RawTouch VirtualAxis1D VirtualAxis2D Raw Mapping 和 Virtual Mapping 之间的转换，请参考以下部分。 Touch Input Mapping"
  },
  "Documentation_CN/MultiModalInteraction/EyeTracking.html": {
    "href": "Documentation_CN/MultiModalInteraction/EyeTracking.html",
    "title": "眼动追踪 | Core",
    "keywords": "眼动追踪 Note 需要 Play For Dream MR 设备， OS 3.1.0 以上版本 我们基于 XR Devices 提供了眼动数据，你可以通过 GetDevicesWithCharacteristics 和 InputDeviceCharacteristics.EyeTracking 找寻到眼动设备，并从中获取眼动的数据： InputDevice eyeDevice = default; var devices = new List<InputDevice>(); InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.EyeTracking, devices); if (devices.Count > 0) eyeDevice = devices[0]; eyeDevice.TryGetFeatureValue(CommonUsages.devicePosition, out Vector3 position); eyeDevice.TryGetFeatureValue(CommonUsages.deviceRotation, out Quaternion rotation); Tip 关于眼动的更多信息，可参考 Eye Tracking Sample"
  },
  "Documentation_CN/MultiModalInteraction/HandGestureLimitation.html": {
    "href": "Documentation_CN/MultiModalInteraction/HandGestureLimitation.html",
    "title": "第三方手势识别限制 | Core",
    "keywords": "第三方手势识别限制 本文档对手势识别中手型应用的边界做一些约束，避免一些常见的识别错误。共分为三部分进行说明： 第一部分：静态手型，针对静态手型进行说明，其中包含建议使用的手型和不建议使用的手型； 第二部分：动态手势，针对手型进行不同类型的运动的边界说明； 第三部分：YVR的控制型手势，建议第三方应用避开使用手势，以免在应用运行过程中被误触发。 静态手型 建议使用用户可以自然的、舒适的完成的手型，更加符合人体工程学，同时在手势的识别层面建议使用： 手部可视特征较多的手型，即可以看到更多手部特征的手型 更建议使用右手 下图仅为部分示意图 各种扭曲的、别扭的、反人类的手势并不推荐，同时在算法层面不建议使用： 手部可视特征较少的手型，即无法看到更多手部特征的手型 不建议使用双手交叠的手型，如双手交叉等 下图仅为部分示意图，类似的手型（左/右）均不建议使用 动态手势 动态手势可以理解为是：静态手形+时间维持判断。因此结合静态手型的使用建议，不建议快速运动的手势： 快速的挥动各种手型，如快速挥动手掌、拳头等 快速的转动各种手型，如快速转动手腕等 快速执行动态手势，如快速握拳、快速捏合等 快速移动各种手型，如快速朝各个方向移动各种手型 控制型手势 以下为YVR的控制型系统手势，建议第三方应用中避免使用该手势进行游戏交互，以免误触发唤起系统菜单。当前版本已上线控制型手势如下： 初始化：手心面向自己，指尖向上 唤起：当手腕处且出现系统图标，即为唤起成功 选择菜单：通过捏合手势，并配合手部位移进行菜单选择 发布命令：悬停在按钮，分开食指和拇指，二级菜单渐隐，仅显示该功能按钮（闪烁一定时间后消失）并响应其对应功能"
  },
  "Documentation_CN/MultiModalInteraction/HandTracking.html": {
    "href": "Documentation_CN/MultiModalInteraction/HandTracking.html",
    "title": "手势追踪 | Core",
    "keywords": "手势追踪 配置开发环境 设备 YVR2 玩出梦想 MR 设备系统版本 1.2.2.209 及以上 Unity 版本 LTS 版本 Note 与实时预览工具 3.1 及以上版本兼容。 配置流程 在设备的系统实验室下打开手部追踪功能。 导入 YVR 软件包。 在 Unity 编辑器中创建一个场景或打开已有的场景。 将 com.yvr.core/Prefabs/ 目录下的 YVRCameraRig 拖拽至 Hierarchy 面板中。 选中 YVRCameraRig， 在 YVRManager 组件中从 Hand Tracking Support 里选择是否支持手势追踪或手柄，为应用启动手势追踪或手柄能力。 构建该场景，然后在设备上运行。 Note 具体接口请查看代码注释。 获取手势追踪数据 你可以通过调用 SDK 提供的接口来获取手势追踪相关信息，包括功能启用状态、追踪精确度、手势数据、手部交互状态。 功能启用状态 接口 功能启用状态 YVRHandManager.GetHandTrackingEnable 来获取手势追踪功能的启用状态。请求将返回一个布尔值，true 表示“启用”，false 表示“未启用”。 追踪精确度 & 手势数据 接口 手势数据 YVRHandManager.leftHandData / YVRHandManager.rightHandData 获取手势数据，包括关节数量、手部尺寸、关节方向和位置，以及手部交互状态，包括射线交互的姿态，以及各个手指是否捏合和具体的捏合力度。 手部交互状态 接口 手部交互状态 YVRHandManger.GetFingerPinchStrength 获取其他手指与大拇指的捏合强度。 YVRHandManager.GetPinch 获取手指是否正在捏合。 YVRHandManager.GetPinchDown 获取当前帧手指是否触发捏合。 YVRHandManager.GetPinchUp 获取当前帧手指是否触发取消捏合。 手柄输入与手势输入切换 在设备开启了手势追踪能力后， 手柄切换手势输入的条件为：手柄未连接或已连接的手柄静置 5 秒，开启手势追踪 手势输入切换手柄的条件为：手柄开机或已连接的休眠手柄有按键触发 切换设备输入流程 监听 YVRManager.instance.eventsManager.onInputDeviceChange 事件 调用 YVRPlugin.Instance.GetCurrentInputDevice(ref ActiveInputDevice inputDevice) 查询当前输入设备 设置当前输入设备为 UI 交互输入，YVRInputModule.Instance.SetInputDataProvider(DataProviderSource source) 显示与隐藏对应的设备对象 Note 交互工具包推荐采用 Samples | XR Interaction Toolkit | 2.3.1"
  },
  "Documentation_CN/SpatialSensing.html": {
    "href": "Documentation_CN/SpatialSensing.html",
    "title": "环境感知 | Core",
    "keywords": "环境感知 本部分描述一系列 SDK 提供的让应用感知真实物理环境的方式： 环境透视：通过摄像头实时显示真实世界 房间标定：通过 SDK 获取预先标定的房间信息 空间网格: 实时获取真实世界的空间网格信息 平面检测：实时获取真实世界中的大块平面信息 空间标定：通过自定义的锚点设置记录真实空间中的位置"
  },
  "Documentation_CN/SpatialSensing/Passthrough.html": {
    "href": "Documentation_CN/SpatialSensing/Passthrough.html",
    "title": "透视 | Core",
    "keywords": "透视 透视这项功能允许用户走出 VR 世界看到现实生活中的东西。它使用 HMD 摄像头和图像处理算法来捕捉和接近用户在直接透过 HMD 显示屏时看到的东西。这最终实现了现实世界和虚拟场景的融合，创造出一个混合现实的场景。 要求 SDK 版本: 2.3.0 及以上 配置设置 完成入门指南。如果已完成，请跳过此步骤。 在主摄像机中，选择 CenterEyeAnchor。 选择 Inspector -> Camera。 设置 Clear Flags 为 Solid Color，HDR 为 Off。 设置 Background 为 RGBA (0000) / Hexadecimal 000000。 在项目中设置透视开关 YVRManager.instance.hmdManager.SetPassthrough(true);。"
  },
  "Documentation_CN/SpatialSensing/PlaneDetection.html": {
    "href": "Documentation_CN/SpatialSensing/PlaneDetection.html",
    "title": "平面检测 | Core",
    "keywords": "平面检测 负责处理平面检测的相关功能，以实现平面检测的创建、获取和结束。 公共字段 public static Action<List<YVRPlaneDetectorLocation>> getPlanesAction 描述: 用于在检测到平面时回调，传递检测到的平面位置列表。 类型: Action<List<YVRPlaneDetectorLocation>> 用途: 当平面检测完成并且有平面位置可用时，调用此回调以处理平面数据。 公共方法 public void CreatePlaneDetector() 描述: 创建平面检测的实例。调用此方法将启动平面检测过程。 参数: 无 返回值: 无 public List<YVRPlaneDetectorPolygonBuffer> GetPlanePolygonBuffer(YVRPlaneDetectorLocation plane) 描述: 获取指定平面的多边形缓冲区。 参数: YVRPlaneDetectorLocation plane: 要获取多边形缓冲区的平面。 类型: YVRPlaneDetectorLocation 描述: 包含平面 ID 和其他相关信息的结构体。 返回值: 类型: List<YVRPlaneDetectorPolygonBuffer> 描述: 返回一个包含该平面的所有多边形缓冲区的列表。如果没有找到多边形缓冲区，则返回空列表。 public void EndPlaneDetector() 描述: 结束平面检测的实例。调用此方法将停止平面检测过程。 参数: 无"
  },
  "Documentation_CN/SpatialSensing/RoomCalibration.html": {
    "href": "Documentation_CN/SpatialSensing/RoomCalibration.html",
    "title": "房间标定 | Core",
    "keywords": "房间标定 房间标定是玩出梦想提供的系统级应用，用于确保虚拟对象和物理环境的精确对齐，通过房间标定，可以提高虚拟现实程序的真实感和稳定性，为用户提供更具交互性和沉浸感的体验。用户可以通过房间标定应用将现实房间中的墙、门窗、桌椅、沙发等物体标定出来。开发者可以通过 SDK 获取用户创建的标定数据，并将其使用在自己的应用中。 要求 你可以通过 SDK 接口获取房间标定应用创建的房间信息和标定数据，并将其用于自己的应用中，也可以在应用内创建自己的锚点。 SDK 版本：Unity SDK 2.8.0 及以上 设备型号：YVR2，Play Form Dream MR 系统版本：DreamOS 1.3.0 及以上 Note 数据修改权限：第三方应用无法创建房间，仅允许房间标定应用修改数据 数据读取权限：房间标定应用和第三方应用可以读取房间标定数据 请确保已在 YVRManager 脚本面板上勾选了 Spatial Anchor Support 和 Scene Support 选框。 Note 勾选 Spatial Anchor Support 和 Scene Support 选框后，AndroidManifest.xml 文件中会添加锚点对应权限。 > <uses-permission android:name=\"com.yvr.permission.USE_ANCHOR_API\"\\> > > <uses-permission android:name=\"com.yvr.permission.USE_SCENE\"\\> com.yvr.permission.USE_SCENE is a runtime permission that allows the application to query spatial data on the user's device only when the user grants the permission. Requesting Android runtime permissions makes a permission request. Scene Anchors 可以包含的组件类型 Scene Anchor 需要组件才能描述标定的环境。因此应用需要通过查询 Scene Anchor 是否支持给定的组件，以及该组件是否已启用，来获取锚点所包含的空间信息 Locatable：可定位组件，通知系统可以跟踪此定位点，启用后，应用可以持续的查询定位点的位姿信息。 Storable：可存储组件，启用后，表示锚点可以被保存。 RoomLayout：房间布局组件，包含对构成房间的墙壁，天花板和地板锚点的引用。 AnchorContainer：包含对房间内其他物体（沙发，茶几，窗户等）定位点列表的引用。 Bounded2D：对 2D 平面数据的定位点信息，包含平面的宽高以及相对于锚点 x,y 轴上的偏移（或者是非矩形平面的索引三角形网格）。 Bounded3D：3D 立方体数据，包含长宽高以及此立方体相对于锚点 x,y,z, 轴上的偏移。 SemanticLabels：锚点的语义标签，此组件可以将锚点分为多个分类，详细信息参考下文。 常见场景锚点 房间的场景锚点将具有： RoomLayout 组件用于引用天花板、墙壁和地板。 AnchorContainer 组件用于保存房间内所有的场景锚点。 2D 元素（如墙壁，天花板，地板，窗户等）的场景锚点具有：用户获取锚点位置的 Locatable 组件；SemanticLabels 语义标签组件；Boundary2D 平面尺寸数据。 3D 元素（如沙发，茶几，桌子等）的场景锚点具有：用户获取锚点位置的 Locatable 组件；SemanticLabels 语义标签组件；Bounded3D 立方体信息。 锚点语义分类 语义分类将 Scene Anchors 分类为预先确定且有系统管理的对象类型列表。语义将对象分隔到其对应的几何描述，以便为应用开发人员提供特定于分类的游戏逻辑。支持的语义标签： 语义类型 描述 FLOOR 地板 2D CEILING 天花板 2D WALL_FACE 墙面 2D COUCH 沙发 3D DOOR_FRAME 门框 2D WINDOW_FRAME 窗框 2D OTHER 窗框 3D TABLE 桌子 3D BED 床 3D Note 此列表标签正在不断发展，因为我们会定期添加对更多 2D 和 3D 对象的支持。 锚点坐标轴 房间标定应用创建的 2D 元素和 3D 元素的坐标轴方向与其类型和创建顺序有关，规则如下： 墙面、门、窗 原点位于墙面中心 +X：根据左手坐标系，从上往下看，逆时针方向 +Y：垂直地面向上 +Z：垂直于墙面向内 地板 原点位于地面的几何中心 +X：从上往下看，顺时针沿着墙面指向第一个绘制的点的方向 +Y：根据左手坐标系确定 +Z：垂直朝上 天花板 原点位于天花板的几何中心 +X：地面的 -X 方向 +Y：根据左手坐标系确定 +Z：垂直朝下 沙发、床、桌子和其他 第一条线 AB 画高度，然后画顶面的两条棱 BC 和 CD。原点位于顶面的中心 +X：CB 方向 +Y：根据左手坐标系确定 +Z：AB 方向 获取房间标定数据接口 获取锚点的房间布局信息 YVRSceneAnchor.instance.GetAnchorRoomLayout 接口获取锚点的房间布局信息。 /// <summary> /// 获取指定空间锚点的房间布局信息。 /// </summary> /// <param name=\"anchorHandle\">空间锚点的句柄</param> /// <param name=\"roomLayout\">返回的房间布局信息</param> /// <returns>如果成功获取房间布局信息，则为 true；否则为 false</returns> public bool GetAnchorRoomLayout(ulong anchorHandle, out YVRRoomLayout roomLayout) YVRRoomLayout 包含房间地板、天花板、墙壁锚点的 UUID。 public struct YVRRoomLayout { // 地板锚点 public YVRSpatialAnchorUUID floorUuid; // 天花板锚点 public YVRSpatialAnchorUUID ceilingUuid; // 墙壁锚点列表 public YVRSpatialAnchorUUID[] wallUuids; } 获取锚点的容器信息 YVRSceneAnchor.instance.GetAnchorContainer 接口获取锚点的容器信息。 /// <summary> /// 获取指定空间锚点的容器信息。 /// </summary> /// <param name=\"anchorHandle\">空间锚点的句柄</param> /// <param name=\"containerUuids\">返回的容器 UUID 列表</param> /// <returns>如果成功获取容器信息，则为 true；否则为 false</returns> public bool GetAnchorContainer(ulong anchorHandle, out List<YVRSpatialAnchorUUID> containerUuids) 获取锚点的矩形平面 YVRSceneAnchor.instance.GetAnchorBoundingBox2D 接口提供对锚点矩形平面信息的访问。 /// <summary> /// 获取指定空间锚点的二维边界框信息。 /// </summary> /// <param name=\"anchorHandle\">空间锚点的句柄</param> /// <param name=\"boundingBox2D\">返回的二维边界框信息</param> /// <returns>如果成功获取边界框信息，则为 true；否则为 false</returns> public bool GetAnchorBoundingBox2D(ulong anchorHandle, out YVRRect2D boundingBox2D) YVRRect2D 包含平面的宽高以及相对与锚点位姿原点在 x,y 轴上的偏移。 public struct YVRRect2D { // 平面相对于锚点在 x,y 轴上的偏移 public Vector2 offset; // 平面的宽高 public Vector2 extent; } 获取锚点的三维边界框 YVRSceneAnchor.instance.GetAnchorBoundingBox3D 接口提供对锚点 3D 信息的访问。 /// <summary>/// 获取指定空间锚点的三维边界框信息。/// </summary> /// <param name=\"anchorHandle\">空间锚点的句柄</param> /// <param name=\"boundingBox3D\">返回的三维边界框信息</param> /// <returns>如果成功获取边界框信息，则为 true；否则为 false</returns> public bool GetAnchorBoundingBox3D(ulong anchorHandle, out YVRRect3D boundingBox3D) YVRRect3D 包含 3D 对象的长宽高以及相对于锚点位姿原点在 x,y,z 轴上的偏移。 public struct YVRRect3D { // 3D 对象相对于锚点原点在 x,y,z 轴上的偏移 public Vector3 offset; // L3D 对象的长宽高 public Vector3 extent;} 获取锚点的不规则平面顶点信息 YVRSceneAnchor.instance.GetAnchorBoundary2D 接口返回锚点的非矩形平面信息。 /// <summary>/// 获取锚点的平面顶点信息/// </summary> /// <param name=\"anchorHandle\">空间锚点的句柄</param> /// <param name=\"boundary\">返回平面的顶点集合</param> /// <returns>如果成功获取边界信息，则为 true；否则为 false</returns> public bool GetAnchorBoundary2D(ulong anchorHandle, out List<Vector2> boundary) 获取锚点的语义标签 YVRSceneAnchor.instance.GetAnchorSemanticLabels 接口返回锚点的语义标签。 /// <summary>/// 获取锚点的语义标签信息。/// </summary> /// <param name=\"anchorHandle\">空间锚点的句柄</param> /// <param name=\"labels\">返回的语义标签字符串</param> /// <returns>如果成功获取语义标签信息，则为 true；否则为 false</returns> public bool GetAnchorSemanticLabels(ulong anchorHandle, out string labels) Note 当锚点支持的组件类型为 Bounded2D 类型是，既可以使用 GetAnchorBoundingBox2D 接口获取矩形平面数据，也可以使用 GetAnchorBoundary2D 获取平面的顶点数据。（若房间标定的平面为非矩形，此时使用 GetAnchorBoundingBox2D 时将根据平面顶点信息返回对应的最小外接矩形。） 启动房间标定应用 调用 YVRSceneAnchor.instance.RequestSceneCapture 接口可以启用房间标定引用进行房间标定。 获取房间标定数据流程 你可以通过以下流程来检索房间标定数据的内容： 通过 YVRSpatialAnchor.instance.QuerySpatialAnchor 接口查询具有组件 RoomLayout 的锚点。 对于查询到的 RoomLayout 组件锚点，通过 YVRSceneAnchor.instance.GetAnchorContainer 接口获取该房间标定下的所有子锚点。 通过 UUID 使用 YVRSpatialAnchor.instance.QuerySpatialAnchor 接口循环查询到所有子锚点。 对于查询到的子锚点，调用 YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus 检索其是否支持对应的组件类型。 如果想要了解尺寸，调用 GetAnchorBoundingBox2D ，GetAnchorBoundary2D 或 GetAnchorBoundingBox3D 返回对应信息，并相应的缩放 Unity 对象。 代码示例 private YVRSpatialAnchorResult m_RoomLayoutAnchor; private List<YVRSpatialAnchorResult> m_ContainerAnchors = new List<YVRSpatialAnchorResult>(); // 获取 RoomLayout 组件的锚点 public void GetRoomLayoutAnchor() { YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; queryInfo.component = YVRSpatialAnchorComponentType.RoomLayout; YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, OnQueryRoomLayoutAnchorCallback); } private void OnQueryRoomLayoutAnchorCallback(List<YVRSpatialAnchorResult> spatialAnchorResults) { if(spatialAnchorResults != null && spatialAnchorResults.Count >= 0) { m_RoomLayoutAnchor = spatialAnchorResults.First(); } else { // 无标定信息，跳转至房间标定应用进行标定 YVRSceneAnchor.instance.RequestSceneCapture(\"\"); } } // 获取房间标定下的所有锚点 public void GetAnchorAontainer() { if(m_RoomLayoutAnchor.anchorHandle == 0) return; bool result = YVRSceneAnchor.instance.GetAnchorContainer(m_RoomLayoutAnchor.anchorHandle, out List<YVRSpatialAnchorUUID> container); if (!result) return; YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; queryInfo.ids = container.ToArray(); YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, OnQueryContainerCallback); } private void OnQueryContainerCallback(List<YVRSpatialAnchorResult> spatialAnchorResults) { m_ContainerAnchors = spatialAnchorResults; } // 获取不规则平面顶点信息 private void GetAnchorBoundary2DData(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.Bounded2D, out YVRSpatialAnchorComponentStatus status); if(status.enable) { YVRSceneAnchor.instance.GetAnchorBoundary2D(anchor.anchorHandle, out List<Vector2> boundary); if (boundary!=null) { for (int i = 0; i < boundary.Count; i++) { Debug.Log($\"boundary uuid:{new string(anchor.uuid)} index:{i} x:{boundary[i].x},y:{boundary[i].y}\"); } } } } // 获取锚点矩形平面信息 private void GetAnchorBoundingBox2DDate(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.Bounded2D, out YVRSpatialAnchorComponentStatus status); if (status.enable) { YVRSceneAnchor.instance.GetAnchorBoundingBox2D(anchor.anchorHandle, out YVRRect2D boundingBox2D); Debug.Log( $\"box2d uuid:{new string(anchor.uuid)} boundingBox2D offset.x:{boundingBox2D.offset.x},offset.y:{boundingBox2D.offset.y},extent.x:{boundingBox2D.extent.x},extent.y:{boundingBox2D.extent.y}\"); } } // 获取锚点 3D 信息 private void GetAnchorBoundingBox3DDate(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.Bounded3D, out YVRSpatialAnchorComponentStatus status); if (status.enable) { YVRSceneAnchor.instance.GetAnchorBoundingBox3D(anchor.anchorHandle, out YVRRect3D boundingBox3D); Debug.Log( $\"box3d uuid:{new string(anchor.uuid)} boundingBox3D offset.x:{boundingBox3D.offset.x},offset.y:{boundingBox3D.offset.y},offset.z:{boundingBox3D.offset.z},extent.x:{boundingBox3D.extent.x},extent.y:{boundingBox3D.extent.y},extent.z:{boundingBox3D.extent.z}\"); } } // 获取锚点语义标签信息 private void GetAnchorSemanticLabelsDate(YVRSpatialAnchorResult anchor) { YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus(anchor.anchorHandle, YVRSpatialAnchorComponentType.SemanticLabels, out YVRSpatialAnchorComponentStatus status); if (status.enable) { YVRSceneAnchor.instance.GetAnchorSemanticLabels(anchor.anchorHandle, out string semanticLabels); Debug.Log($\"semanticLabel anchor uuid:{new string(anchor.uuid)} semanticLabels:{semanticLabels}\"); } } private void GetAnchoComponentData() { foreach (var anchor in m_ContainerAnchors) { GetAnchorBoundary2DData(anchor); GetAnchorBoundingBox2DDate(anchor); GetAnchorBoundingBox3DDate(anchor); GetAnchorSemanticLabelsDate(anchor); } } 示例工程 更多详情，请参考 Scene Anchor Sample。"
  },
  "Documentation_CN/SpatialSensing/SpatialAnchor.html": {
    "href": "Documentation_CN/SpatialSensing/SpatialAnchor.html",
    "title": "空间锚点 | Core",
    "keywords": "空间锚点 介绍 空间锚点(Spatial Anchors)是在虚拟或增强现实环境中用于定位和跟踪物体或场景的关键点。它们可以被用来实现虚拟物体的稳定放置、环境理解、共享虚拟场景等功能。空间锚点是一种由软件和硬件共同实现的技术，能够将虚拟内容与现实世界中的特定位置或物体相对应起来。 基本概念 名称 说明 UUID 锚点的唯一标识码，在创建锚点时返回 anchorHandle 锚点的句柄，在应用内存中的标识 为应用开启空间锚点权限 在 Unity 中打开项目 为场景添加 XR Origin 添加 YVRManager 脚本 在 YVRManager 脚本面板上勾选启用 SpatialAnchorSupport 勾选 SpatialAnchorSupport 选框后，AndroidManifest.xml 文件中会添加锚点对应权限 **\\<uses-permission android:name=\"com.yvr.permission.USE_ANCHOR_API\"\\\\>** 空间锚点接口 创建锚点 /// <summary> /// 使用给定的位置和旋转创建空间锚点。 /// </summary> /// <param name=\"position\">锚点位置</param> /// <param name=\"rotation\">锚点旋转</param> /// <param name=\"result\">创建锚点的接口回调</param> public void CreateSpatialAnchor(Vector3 position, Quaternion rotation, Action<YVRSpatialAnchorResult,bool> result) 创建锚点后会响应 Action<YVRSpatialAnchorResult,bool> 回调，YVRSpatialAnchorResult 返回锚点信息，bool 表示锚点创建是否成功。 public struct YVRSpatialAnchorResult { //任务 Id public ulong requestId; //锚点的句柄 public ulong anchorHandle; //锚点的唯一标识码 public Char[] uuid; } 代码示例 public void CreateSpatialAnchor(Transform transform) { YVRSpatialAnchor.instance.CreateSpatialAnchor(transform.position, transform.rotation, OnCreateSpatialAnchor); } private void OnCreateSpatialAnchor(YVRSpatialAnchorResult result, bool success) { if(!success) { Debug.LogError(\"Create spatial anchor failed!\" ); return; } Debug.Log(\"Create spatial anchor success\"); //TODO 自定义逻辑 } 保存锚点 调用 YVRSpatialAnchor.instance.SaveSpatialAnchor 接口保存锚点，可以将锚点保存在本地设备中或保存在云端，将锚点保存在云端需要用户已登陆设备账号并且设备联网 /// <summary> /// 使用提供的保存信息保存空间锚点 /// </summary> /// <param name=\"saveInfo\">保存信息</param> /// <param name=\"callback\">保存结果回调</param> public void SaveSpatialAnchor(YVRSpatialAnchorSaveInfo saveInfo, Action<YVRSpatialAnchorSaveCompleteInfo,bool> callback) 保存锚点参数信息 YVRSpatialAnchorSaveInfo public struct YVRSpatialAnchorSaveInfo { // 需要保存锚点的句柄 public ulong anchorHandle; // 保存位置 Local: 本地内存，Cloud: 云端 public YVRSpatialAnchorStorageLocation storageLocation; } 保存结果的回调 Action<YVRSpatialAnchorSaveCompleteInfo,bool> YVRSpatialAnchorSaveCompleteInfo 保存结果信息，bool 保存是否成功 public struct YVRSpatialAnchorSaveCompleteInfo { // 任务 Id public ulong requestId; // 返回结果码 public int resultCode; // 保存的锚点句柄 public ulong anchorHandle; // 保存的锚点 UUID public char[] uuid; // 保存的位置 public YVRSpatialAnchorStorageLocation location; } 代码示例： private void SaveAnchor(ulong anchorHandle) { YVRSpatialAnchorSaveInfo saveInfo = new YVRSpatialAnchorSaveInfo(); saveInfo.anchorHandle = anchorHandle; // 保存至本地 saveInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; // 保存至云端 //saveInfo.storageLocation = YVRSpatialAnchorStorageLocation.Cloud; YVRSpatialAnchor.instance.SaveSpatialAnchor(saveInfo, OnSaveCompleteCallback); } private void OnSaveCompleteCallback(YVRSpatialAnchorSaveCompleteInfo saveResult,bool success) { Debug.Log(\"Save anchor result:\" + success); } 删除锚点 调用 YVRSpatialAnchor.instance.EraseSpatialAnchor() 接口删除指定位置指定锚点 /// <summary> /// 根据锚点句柄和存储位置删除对应的空间锚点 /// </summary> /// <param name=\"anchorHandle\">需要删除的锚点句柄</param> /// <param name=\"location\">锚点的存储位置</param> /// <param name=\"callback\">删除结果的回调</param> public void EraseSpatialAnchor(UInt64 anchorHandle, YVRSpatialAnchorStorageLocation location,Action<YVRSpatialAnchorResult,bool> callback) 删除结果回调 Action<YVRSpatialAnchorResult,bool> YVRSpatialAnchorResult 删除的锚点，bool 是否成功 代码示例： private void EraseSpatialAnchor() { YVRSpatialAnchor.instance.EraseSpatialAnchor(m_spatialAnchor.spaceHandle, YVRSpatialAnchorStorageLocation.Local, OnEraseCompleteCallback); } private void OnEraseCompleteCallback(YVRSpatialAnchorResult result,bool success) { Debug.Log($\"Erase anchor:{result.anchorHandle}, uuid:{new string(result.uuid)} {success}\"); } 查询锚点 调用 YVRSpatialAnchor.instance.QuerySpatialAnchor 查询锚点 /// <summary> /// 根据提供的查询信息查询空间锚点 /// </summary> /// <param name=\"queryInfo\">查询信息</param> /// <param name=\"queryCallback\">查询结果</param> public void QuerySpatialAnchor(YVRSpatialAnchorQueryInfo queryInfo , Action<List<YVRSpatialAnchorResult>> queryCallback) YVRSpatialAnchorQueryInfo 查询信息，支持通过 uuid 查询，或者 component 类型查询 public struct YVRSpatialAnchorQueryInfo { // 查询返回最多锚点个数(默认为零，表示不限制查询返回个数) public uint MaxQuerySpaces; // 查询超时时间(默认为零，表示不设置超时时间) public double Timeout; // 查询位置 public YVRSpatialAnchorStorageLocation storageLocation; // 查询锚点的组件类型 public YVRSpatialAnchorComponentType component; // 使用 uuid 查询锚点时 uuid 个数 public int numIds; // uuid 查询列表 public YVRSpatialAnchorUUID[] ids; } 代码示例： // 查询当前引用在这台设备中保存的所有本地锚点 private void QueryAllLocalAnchor() { YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Local; YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, QuerySpatialAnchorComplete); } // 通过 uuids 查询之前保存在云端的锚点 private void QuerryUUIDsAnchor(List<char[]> uuids) { YVRSpatialAnchorQueryInfo queryInfo = new YVRSpatialAnchorQueryInfo(); queryInfo.storageLocation = YVRSpatialAnchorStorageLocation.Cloud; queryInfo.ids = new YVRSpatialAnchorUUID[uuids.Count]; for(int i = 0; i < uuids.Count; i++) { queryInfo.ids[i] = new YVRSpatialAnchorUUID(); queryInfo.ids[i].Id = uuids[i]; } YVRSpatialAnchor.instance.QuerySpatialAnchor(queryInfo, QuerySpatialAnchorComplete); } // 查询结果 private void QuerySpatialAnchorComplete(List<YVRSpatialAnchorResult> results) { Debug.Log(\"QuerySpacesComplete count:\" + results.Count); } 在同一片区域查询已保存过的锚点时，可能会查询不到锚点，可以尝试在周围进行走动，采集更多点云数据后再次调用查询，接口调用频率可自行决定，**建议 1 秒左右调用一次** 获取锚点的实时位姿 调用 YVRSpatialAnchor.instance.GetSpatialAnchorPose 接口获取锚点的实时位置，保持锚点的位置始终固定，若不获取，当用户在场景内移动或者进行 recenter 时，锚点的位置可能会发生偏移，支持每帧调用。 /// <summary> /// 获取锚点位姿 /// </summary> /// <param name=\"anchorHandle\">锚点句柄</param> /// <param name=\"position\">返回锚点的位置</param> /// <param name=\"rotation\">返回锚点的旋转</param> /// <param name=\"locationFlags\">锚点的位置状态</param> /// <returns></returns> public bool GetSpatialAnchorPose(ulong anchorHandle, out Vector3 position, out Quaternion rotation,out YVRAnchorLocationFlags locationFlags) 当获取锚点位姿方法返回失败，或位置状态为未追踪时，表示当前地图发生了切换，此时锚点变为失效，返回的位姿可能是错误的，需要等用户回到创建锚点的地图下，或创建锚点的地图和其他地图融合时，锚点会再次有效。 获取锚点支持的 component 枚举类型 调用 YVRSpatialAnchor.instance.GetSpatialAnchorEnumerateSupported 可以获取指定锚点支持的 component 类型，目前第三方引用创建的锚点仅支持位姿(Locatable)、存储(Storable)、分享(Sharable)。 /// <summary> /// 获取锚点支持的 component 枚举类型 /// </summary> /// <param name=\"anchorHandle\">锚点的句柄</param> /// <param name=\"components\">支持的 component 类型</param> public void GetSpatialAnchorEnumerateSupported(ulong anchorHandle, out YVRSpatialAnchorSupportedComponent components) 设置锚点的 component 状态 调用 YVRSpatialAnchor.instance.SetSpatialAnchorComponentStatus() 方法可以锚点的 component 状态。创建的锚点默认包含位姿(Locatable)，存储(Storable)，分享(Sharable). /// <summary> /// 设置锚点的 component 状态 /// </summary> /// <param name=\"anchorHandle\">锚点句柄</param> /// <param name=\"setInfo\">状态信息</param> /// <param name=\"callback\">设置锚点状态的回调</param> /// <returns></returns> public bool SetSpatialAnchorComponentStatus(ulong anchorHandle, YVRSpatialAnchorComponentStatusSetInfo setInfo, Action<YVRSpatialAnchorSetStatusCompleteInfo,bool> callback) 代码示例： private void DisableAnchorStorableState(ulong anchorHandle) { YVRSpatialAnchorComponentStatusSetInfo componentStatusSetInfo = new YVRSpatialAnchorComponentStatusSetInfo(); componentStatusSetInfo.component = YVRSpatialAnchorComponentType.Storable; //将创建锚点的 Storable 设置为 false 时，锚点将不能被保存。 componentStatusSetInfo.enable = false; YVRSpatialAnchor.instance.SetSpatialAnchorComponentStatus(result.anchorHandle, componentStatusSetInfo,null); } 上面示例中代码将关闭锚点的存储权限 获取锚点指定 component 状态 通过调用 YVRSpatialAnchor.instance.GetSpatialAnchorComponentStatus 可以获取锚点对应组件状态 /// <summary> /// 获取锚点指定 component 状态 /// </summary> /// <param name=\"anchorHandle\">锚点句柄</param> /// <param name=\"componentType\">组件类型</param> /// <param name=\"status\">返回的状态信息</param> public void GetSpatialAnchorComponentStatus(ulong anchorHandle, YVRSpatialAnchorComponentType componentType, out YVRSpatialAnchorComponentStatus status) 批量保存锚点 YVRSpatialAnchor.instance.SaveSpatialAnchorList 一次保存多个锚点 /// <summary> /// 批量保存锚点 /// </summary> /// <param name=\"spatialAnchorHandleList\">锚点句柄集合</param> /// <param name=\"location\">保存位置</param> /// <param name=\"callback\">保存结果回调</param> public void SaveSpatialAnchorList(List<ulong> spatialAnchorHandleList, YVRSpatialAnchorStorageLocation location, Action<bool> callback) 通过 anchorHandle 获取锚点 UUID 调用 YVRSpatialAnchor.instance.GetSpatialAnchorUUIDForHandle 通过锚点句柄获取锚点的唯一标识 /// <summary> /// 通过锚点句柄获取锚点的唯一标识 /// </summary> /// <param name=\"anchorHandle\">锚点句柄</param> /// <param name=\"uuid\">锚点唯一标识</param> public void GetSpatialAnchorUUIDForHandle(ulong anchorHandle, out YVRSpatialAnchorUUID uuid) 获取空间标定锚点信息 只有系统中的 空间标定 应用创建的锚点才支持设置标定信息，包括锚点组件，语义标签，平面信息，立方体信息。你可以使用 空间标定 接口获取锚点的标定信息，然后在自己的引用内使用，详情参考 空间标定 文档。 Demo SpatialAnchorSample 示例展示空间锚点的相关功能，包括创建锚点，保存锚点，删除锚点，查询锚点，分享锚点等功能。当演示分享功能时，需要你手动配置自己的 photon id 及服务。"
  },
  "Documentation_CN/SpatialSensing/SpatialMesh.html": {
    "href": "Documentation_CN/SpatialSensing/SpatialMesh.html",
    "title": "空间网格 | Core",
    "keywords": "空间网格 概述 空间网格用于表示和理解物理环境的三维结构。它通常由一系列的多边形（通常是三角形）组成，这些多边形共同构成了一个三维网格，用于描述现实世界中的物体和表面。在 Unity 中将通过访问 XRMeshSubsystem 来获取和更新网格信息，并在场景中动态生成和更新网格对象。 如何启用空间网格 YVR 实现了 UnityXR XRMeshSubsystem 对应接口，具体可参考 Unity XRMeshSubsystem 文档 开启 scene 对应功能。 勾选 scene Support 功能 申请 scene 对应权限 public void ScenePermissionRequest() { const string spatialPermission = \"com.yvr.permission.USE_SCENE\"; if (!UnityEngine.Android.Permission.HasUserAuthorizedPermission(spatialPermission)) { var callbacks = new UnityEngine.Android.PermissionCallbacks(); callbacks.PermissionDenied += Denied; callbacks.PermissionGranted += Granted; UnityEngine.Android.Permission.RequestUserPermission(spatialPermission, callbacks); } } private void Denied(string permission) => Debug.Log($\"{permission} Denied\"); private void Granted(string permission) => Debug.Log($\"{permission} Granted\"); 开启网格检测 YVRMeshTracking.instance.CreateMeshDetector(); 启用透视模式。 YVRPlugin.Instance.SetPassthrough(true); 获取可用的 XRMeshSubsystem 实例。 var meshSubsystems = new List<XRMeshSubsystem>(); SubsystemManager.GetInstances(meshSubsystems); 获取空间网格更新信息() 获取当前网格信息 private static XRMeshSubsystem s_MeshSubsystem; private static List<MeshInfo> s_MeshInfos = new List<MeshInfo>(); private Dictionary<MeshId, MeshFilter> m_MeshIdToGo = new Dictionary<MeshId, MeshFilter>(); private void UpdateMeshInfos() { if (s_MeshSubsystem == null) { Debug.LogError(\"s_MeshSubsystem is null\"); return; } if (s_MeshSubsystem.TryGetMeshInfos(s_MeshInfos)) { foreach (var meshInfo in s_MeshInfos) { switch (meshInfo.ChangeState) { case MeshChangeState.Added: case MeshChangeState.Updated: AddToQueueIfNecessary(meshInfo); break; case MeshChangeState.Removed: if (m_MeshIdToGo.TryGetValue(meshInfo.MeshId, out var meshGo)) { Destroy(meshGo); m_MeshIdToGo.Remove(meshInfo.MeshId); } break; default: break; } } } } 更新网格块的位置和旋转 更新网格对象位置和旋转。 private void UpdateMeshTransform() { NativeArray<MeshTransform> meshTransforms = s_MeshSubsystem.GetUpdatedMeshTransforms(Allocator.Temp); foreach (var item in meshTransforms) { if (m_MeshIdToGo.TryGetValue(item.MeshId, out MeshFilter meshFilter)) { if (meshFilter.transform.position != item.Position) { meshFilter.transform.position = item.Position; meshFilter.transform.rotation = item.Rotation; } } } } 更新对应网格块数据 如果网格对象不存在，实例化一个新的网格对象并添加到字典中。 存在则异步生成网格并更新其位置和旋转。 public GameObject emptyMeshPrefab; public Transform target; private void AddToQueueIfNecessary(MeshInfo meshInfo) { if (!m_MeshIdToGo.TryGetValue(meshInfo.MeshId, out var meshFilter)) { meshFilter = Instantiate(emptyMeshPrefab, target, false).AddComponent<MeshFilter>(); m_MeshIdToGo[meshInfo.MeshId] = meshFilter; } var mesh = meshFilter.mesh; s_MeshSubsystem.GenerateMeshAsync(meshInfo.MeshId, mesh, null, MeshVertexAttributes.None, (result) => { if (result.Status == MeshGenerationStatus.Success) { if (meshFilter.transform.position != result.Position) { meshFilter.transform.position = result.Position; meshFilter.transform.rotation = result.Rotation; } } }, MeshGenerationOptions.ConsumeTransform); } 如何停止网格检测 YVRMeshTracking.instance.DestroyMeshDetector();"
  },
  "api/YVR.Core.ActiveInputDevice.html": {
    "href": "api/YVR.Core.ActiveInputDevice.html",
    "title": "Enum ActiveInputDevice | Core",
    "keywords": "Enum ActiveInputDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum ActiveInputDevice : ulong Fields ControllerActive = 1 HandTrackingActive = 2 None = 0"
  },
  "api/YVR.Core.ControllerType.html": {
    "href": "api/YVR.Core.ControllerType.html",
    "title": "Enum ControllerType | Core",
    "keywords": "Enum ControllerType Namespace YVR.Core Assembly YVR.Core.Runtime.dll Flags identifying controller type [Flags] public enum ControllerType Fields Active = -2147483648 The active controller All = -1 All controllers, currently equals to Touch LeftHand = 8 Left hand LeftTouch = 1 Left Controller None = 0 Not a controller RightHand = 16 Right hand RightTouch = 2 Right Controller Touch = LeftTouch | RightTouch Both left and right controllers"
  },
  "api/YVR.Core.CylinderShapeHandler.HandleLayerPose.html": {
    "href": "api/YVR.Core.CylinderShapeHandler.HandleLayerPose.html",
    "title": "Method HandleLayerPose | Core",
    "keywords": "Method HandleLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerPose(IYVRLayerHandle, params object[]) public void HandleLayerPose(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.CylinderShapeHandler.HandleLayerShape.html": {
    "href": "api/YVR.Core.CylinderShapeHandler.HandleLayerShape.html",
    "title": "Method HandleLayerShape | Core",
    "keywords": "Method HandleLayerShape Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerShape(IYVRLayerHandle, params object[]) public void HandleLayerShape(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.CylinderShapeHandler.html": {
    "href": "api/YVR.Core.CylinderShapeHandler.html",
    "title": "Class CylinderShapeHandler | Core",
    "keywords": "Class CylinderShapeHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class CylinderShapeHandler : ILayerShapeHandler Inheritance object CylinderShapeHandler Implements ILayerShapeHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleLayerPose(IYVRLayerHandle, params object[]) HandleLayerShape(IYVRLayerHandle, params object[])"
  },
  "api/YVR.Core.DataProviderSource.html": {
    "href": "api/YVR.Core.DataProviderSource.html",
    "title": "Enum DataProviderSource | Core",
    "keywords": "Enum DataProviderSource Namespace YVR.Core Assembly YVR.Core.Runtime.dll Enums for input data provider public enum DataProviderSource Fields Custom = 3 Customized data provider HMD = 0 HMD data provider LeftController = 1 Left controller data provider LeftHand = 4 Left hand tracking data provider None = -1 None data provider RightController = 2 Right controller data provider RightHand = 5 Right hand tracking data provider"
  },
  "api/YVR.Core.DeviceNode.html": {
    "href": "api/YVR.Core.DeviceNode.html",
    "title": "Enum DeviceNode | Core",
    "keywords": "Enum DeviceNode Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public enum DeviceNode Fields ControllerLeft = 0 Node representing the left hand. ControllerRight = 1 Node representing the right hand. Count = 5 The Count of DeviceNode EyeCenter = 2 Node representing a point between the left and right eyes. EyeLeft = 3 Node representing the left eye. EyeRight = 4 Node representing the right eye. None = -1"
  },
  "api/YVR.Core.EmulatorRotationSensitivity.-ctor.html": {
    "href": "api/YVR.Core.EmulatorRotationSensitivity.-ctor.html",
    "title": "Constructor EmulatorRotationSensitivity | Core",
    "keywords": "Constructor EmulatorRotationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll EmulatorRotationSensitivity(float, float, float) public EmulatorRotationSensitivity(float pitch, float yaw, float roll) Parameters pitch float yaw float roll float EmulatorRotationSensitivity(float) public EmulatorRotationSensitivity(float sensitivity) Parameters sensitivity float"
  },
  "api/YVR.Core.EmulatorRotationSensitivity.html": {
    "href": "api/YVR.Core.EmulatorRotationSensitivity.html",
    "title": "Struct EmulatorRotationSensitivity | Core",
    "keywords": "Struct EmulatorRotationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] [Serializable] public struct EmulatorRotationSensitivity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EmulatorRotationSensitivity(float) EmulatorRotationSensitivity(float, float, float) Fields pitch roll yaw"
  },
  "api/YVR.Core.EmulatorRotationSensitivity.pitch.html": {
    "href": "api/YVR.Core.EmulatorRotationSensitivity.pitch.html",
    "title": "Field pitch | Core",
    "keywords": "Field pitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float pitch Returns float"
  },
  "api/YVR.Core.EmulatorRotationSensitivity.roll.html": {
    "href": "api/YVR.Core.EmulatorRotationSensitivity.roll.html",
    "title": "Field roll | Core",
    "keywords": "Field roll Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float roll Returns float"
  },
  "api/YVR.Core.EmulatorRotationSensitivity.yaw.html": {
    "href": "api/YVR.Core.EmulatorRotationSensitivity.yaw.html",
    "title": "Field yaw | Core",
    "keywords": "Field yaw Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float yaw Returns float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.-ctor.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.-ctor.html",
    "title": "Constructor EmulatorTranslationSensitivity | Core",
    "keywords": "Constructor EmulatorTranslationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll EmulatorTranslationSensitivity(float, float, float, float, float, float) public EmulatorTranslationSensitivity(float front, float back, float left, float right, float up, float down) Parameters front float back float left float right float up float down float EmulatorTranslationSensitivity(float) public EmulatorTranslationSensitivity(float sensitivity) Parameters sensitivity float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.back.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.back.html",
    "title": "Field back | Core",
    "keywords": "Field back Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float back Returns float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.down.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.down.html",
    "title": "Field down | Core",
    "keywords": "Field down Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float down Returns float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.front.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.front.html",
    "title": "Field front | Core",
    "keywords": "Field front Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float front Returns float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.html",
    "title": "Struct EmulatorTranslationSensitivity | Core",
    "keywords": "Struct EmulatorTranslationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] [Serializable] public struct EmulatorTranslationSensitivity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EmulatorTranslationSensitivity(float) EmulatorTranslationSensitivity(float, float, float, float, float, float) Fields back down front left right up"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.left.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.left.html",
    "title": "Field left | Core",
    "keywords": "Field left Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float left Returns float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.right.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.right.html",
    "title": "Field right | Core",
    "keywords": "Field right Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float right Returns float"
  },
  "api/YVR.Core.EmulatorTranslationSensitivity.up.html": {
    "href": "api/YVR.Core.EmulatorTranslationSensitivity.up.html",
    "title": "Field up | Core",
    "keywords": "Field up Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float up Returns float"
  },
  "api/YVR.Core.Equirect2ShapeHandler.HandleLayerPose.html": {
    "href": "api/YVR.Core.Equirect2ShapeHandler.HandleLayerPose.html",
    "title": "Method HandleLayerPose | Core",
    "keywords": "Method HandleLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerPose(IYVRLayerHandle, params object[]) public void HandleLayerPose(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.Equirect2ShapeHandler.HandleLayerShape.html": {
    "href": "api/YVR.Core.Equirect2ShapeHandler.HandleLayerShape.html",
    "title": "Method HandleLayerShape | Core",
    "keywords": "Method HandleLayerShape Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerShape(IYVRLayerHandle, params object[]) public void HandleLayerShape(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.Equirect2ShapeHandler.html": {
    "href": "api/YVR.Core.Equirect2ShapeHandler.html",
    "title": "Class Equirect2ShapeHandler | Core",
    "keywords": "Class Equirect2ShapeHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class Equirect2ShapeHandler : ILayerShapeHandler Inheritance object Equirect2ShapeHandler Implements ILayerShapeHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleLayerPose(IYVRLayerHandle, params object[]) HandleLayerShape(IYVRLayerHandle, params object[])"
  },
  "api/YVR.Core.EquirectShapeHandler.HandleLayerPose.html": {
    "href": "api/YVR.Core.EquirectShapeHandler.HandleLayerPose.html",
    "title": "Method HandleLayerPose | Core",
    "keywords": "Method HandleLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerPose(IYVRLayerHandle, params object[]) public void HandleLayerPose(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.EquirectShapeHandler.HandleLayerShape.html": {
    "href": "api/YVR.Core.EquirectShapeHandler.HandleLayerShape.html",
    "title": "Method HandleLayerShape | Core",
    "keywords": "Method HandleLayerShape Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerShape(IYVRLayerHandle, params object[]) public void HandleLayerShape(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.EquirectShapeHandler.html": {
    "href": "api/YVR.Core.EquirectShapeHandler.html",
    "title": "Class EquirectShapeHandler | Core",
    "keywords": "Class EquirectShapeHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class EquirectShapeHandler : ILayerShapeHandler Inheritance object EquirectShapeHandler Implements ILayerShapeHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleLayerPose(IYVRLayerHandle, params object[]) HandleLayerShape(IYVRLayerHandle, params object[])"
  },
  "api/YVR.Core.ExtendUsages.batteryCharging.html": {
    "href": "api/YVR.Core.ExtendUsages.batteryCharging.html",
    "title": "Field batteryCharging | Core",
    "keywords": "Field batteryCharging Namespace YVR.Core Assembly YVR.Core.Runtime.dll public static InputFeatureUsage<bool> batteryCharging Returns InputFeatureUsage<bool>"
  },
  "api/YVR.Core.ExtendUsages.html": {
    "href": "api/YVR.Core.ExtendUsages.html",
    "title": "Class ExtendUsages | Core",
    "keywords": "Class ExtendUsages Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class ExtendUsages : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ExtendUsages Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields batteryCharging"
  },
  "api/YVR.Core.EyeSide.html": {
    "href": "api/YVR.Core.EyeSide.html",
    "title": "Enum EyeSide | Core",
    "keywords": "Enum EyeSide Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public enum EyeSide Fields Both = 3 Left = 1 Right = 2"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazePose.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazePose.html",
    "title": "Struct EyeTrackingData.EyeGazePose | Core",
    "keywords": "Struct EyeTrackingData.EyeGazePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct EyeTrackingData.EyeGazePose Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields isValid orientation position"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazePose.isValid.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazePose.isValid.html",
    "title": "Field isValid | Core",
    "keywords": "Field isValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool isValid Returns bool"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazePose.orientation.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazePose.orientation.html",
    "title": "Field orientation | Core",
    "keywords": "Field orientation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Quaternion orientation Returns Quaternion"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazePose.position.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazePose.position.html",
    "title": "Field position | Core",
    "keywords": "Field position Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 position Returns Vector3"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazeState.confidence.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazeState.confidence.html",
    "title": "Field confidence | Core",
    "keywords": "Field confidence Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float confidence Returns float"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazeState.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazeState.html",
    "title": "Struct EyeTrackingData.EyeGazeState | Core",
    "keywords": "Struct EyeTrackingData.EyeGazeState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct EyeTrackingData.EyeGazeState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields confidence isValid position rotation"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazeState.isValid.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazeState.isValid.html",
    "title": "Field isValid | Core",
    "keywords": "Field isValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool isValid Returns bool"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazeState.position.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazeState.position.html",
    "title": "Field position | Core",
    "keywords": "Field position Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 position Returns Vector3"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazeState.rotation.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazeState.rotation.html",
    "title": "Field rotation | Core",
    "keywords": "Field rotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Quaternion rotation Returns Quaternion"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazesState.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazesState.html",
    "title": "Struct EyeTrackingData.EyeGazesState | Core",
    "keywords": "Struct EyeTrackingData.EyeGazesState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct EyeTrackingData.EyeGazesState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields leftEyeGaze rightEyeGaze time"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazesState.leftEyeGaze.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazesState.leftEyeGaze.html",
    "title": "Field leftEyeGaze | Core",
    "keywords": "Field leftEyeGaze Namespace YVR.Core Assembly YVR.Core.Runtime.dll public EyeTrackingData.EyeGazeState leftEyeGaze Returns EyeTrackingData.EyeGazeState"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazesState.rightEyeGaze.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazesState.rightEyeGaze.html",
    "title": "Field rightEyeGaze | Core",
    "keywords": "Field rightEyeGaze Namespace YVR.Core Assembly YVR.Core.Runtime.dll public EyeTrackingData.EyeGazeState rightEyeGaze Returns EyeTrackingData.EyeGazeState"
  },
  "api/YVR.Core.EyeTrackingData.EyeGazesState.time.html": {
    "href": "api/YVR.Core.EyeTrackingData.EyeGazesState.time.html",
    "title": "Field time | Core",
    "keywords": "Field time Namespace YVR.Core Assembly YVR.Core.Runtime.dll public long time Returns long"
  },
  "api/YVR.Core.EyeTrackingData.html": {
    "href": "api/YVR.Core.EyeTrackingData.html",
    "title": "Class EyeTrackingData | Core",
    "keywords": "Class EyeTrackingData Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class EyeTrackingData Inheritance object EyeTrackingData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/YVR.Core.HandData.aimState.html": {
    "href": "api/YVR.Core.HandData.aimState.html",
    "title": "Field aimState | Core",
    "keywords": "Field aimState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandTrackingAimState aimState Returns HandTrackingAimState"
  },
  "api/YVR.Core.HandData.handScale.html": {
    "href": "api/YVR.Core.HandData.handScale.html",
    "title": "Field handScale | Core",
    "keywords": "Field handScale Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float handScale Returns float"
  },
  "api/YVR.Core.HandData.html": {
    "href": "api/YVR.Core.HandData.html",
    "title": "Struct HandData | Core",
    "keywords": "Struct HandData Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct HandData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aimState handScale isActive jointCount"
  },
  "api/YVR.Core.HandData.isActive.html": {
    "href": "api/YVR.Core.HandData.isActive.html",
    "title": "Field isActive | Core",
    "keywords": "Field isActive Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint isActive Returns uint"
  },
  "api/YVR.Core.HandData.jointCount.html": {
    "href": "api/YVR.Core.HandData.jointCount.html",
    "title": "Field jointCount | Core",
    "keywords": "Field jointCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint jointCount Returns uint"
  },
  "api/YVR.Core.HandInteractEffectController.handSkinnedMeshRenderer.html": {
    "href": "api/YVR.Core.HandInteractEffectController.handSkinnedMeshRenderer.html",
    "title": "Field handSkinnedMeshRenderer | Core",
    "keywords": "Field handSkinnedMeshRenderer Namespace YVR.Core Assembly YVR.Core.Runtime.dll public SkinnedMeshRenderer handSkinnedMeshRenderer Returns SkinnedMeshRenderer"
  },
  "api/YVR.Core.HandInteractEffectController.handType.html": {
    "href": "api/YVR.Core.HandInteractEffectController.handType.html",
    "title": "Field handType | Core",
    "keywords": "Field handType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandType handType Returns HandType"
  },
  "api/YVR.Core.HandInteractEffectController.html": {
    "href": "api/YVR.Core.HandInteractEffectController.html",
    "title": "Class HandInteractEffectController | Core",
    "keywords": "Class HandInteractEffectController Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class HandInteractEffectController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour HandInteractEffectController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields handSkinnedMeshRenderer handType pointer yvrHand"
  },
  "api/YVR.Core.HandInteractEffectController.pointer.html": {
    "href": "api/YVR.Core.HandInteractEffectController.pointer.html",
    "title": "Field pointer | Core",
    "keywords": "Field pointer Namespace YVR.Core Assembly YVR.Core.Runtime.dll public GameObject pointer Returns GameObject"
  },
  "api/YVR.Core.HandInteractEffectController.yvrHand.html": {
    "href": "api/YVR.Core.HandInteractEffectController.yvrHand.html",
    "title": "Field yvrHand | Core",
    "keywords": "Field yvrHand Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRHand yvrHand Returns YVRHand"
  },
  "api/YVR.Core.HandJoint.html": {
    "href": "api/YVR.Core.HandJoint.html",
    "title": "Enum HandJoint | Core",
    "keywords": "Enum HandJoint Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum HandJoint Fields JointIndexDistal = 9 JointIndexIntermediate = 8 JointIndexMetacarpal = 6 JointIndexProximal = 7 JointIndexTip = 10 JointLittleDistal = 24 JointLittleIntermediate = 23 JointLittleMetacarpal = 21 JointLittleProximal = 22 JointLittleTip = 25 JointMax = 26 JointMiddleDistal = 14 JointMiddleIntermediate = 13 JointMiddleMetacarpal = 11 JointMiddleProximal = 12 JointMiddleTip = 15 JointPalm = 0 JointRingDistal = 19 JointRingIntermediate = 18 JointRingMetacarpal = 16 JointRingProximal = 17 JointRingTip = 20 JointThumbDistal = 4 JointThumbMetacarpal = 2 JointThumbProximal = 3 JointThumbTip = 5 JointWrist = 1"
  },
  "api/YVR.Core.HandJointLocation.html": {
    "href": "api/YVR.Core.HandJointLocation.html",
    "title": "Struct HandJointLocation | Core",
    "keywords": "Struct HandJointLocation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct HandJointLocation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields locationFlags pose radius"
  },
  "api/YVR.Core.HandJointLocation.locationFlags.html": {
    "href": "api/YVR.Core.HandJointLocation.locationFlags.html",
    "title": "Field locationFlags | Core",
    "keywords": "Field locationFlags Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong locationFlags Returns ulong"
  },
  "api/YVR.Core.HandJointLocation.pose.html": {
    "href": "api/YVR.Core.HandJointLocation.pose.html",
    "title": "Field pose | Core",
    "keywords": "Field pose Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Posef pose Returns Posef"
  },
  "api/YVR.Core.HandJointLocation.radius.html": {
    "href": "api/YVR.Core.HandJointLocation.radius.html",
    "title": "Field radius | Core",
    "keywords": "Field radius Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float radius Returns float"
  },
  "api/YVR.Core.HandJointLocations.aimState.html": {
    "href": "api/YVR.Core.HandJointLocations.aimState.html",
    "title": "Field aimState | Core",
    "keywords": "Field aimState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandTrackingAimState aimState Returns HandTrackingAimState"
  },
  "api/YVR.Core.HandJointLocations.handScale.html": {
    "href": "api/YVR.Core.HandJointLocations.handScale.html",
    "title": "Field handScale | Core",
    "keywords": "Field handScale Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float handScale Returns float"
  },
  "api/YVR.Core.HandJointLocations.html": {
    "href": "api/YVR.Core.HandJointLocations.html",
    "title": "Struct HandJointLocations | Core",
    "keywords": "Struct HandJointLocations Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct HandJointLocations Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aimState handScale isActive jointCount jointLocations jointVelocities"
  },
  "api/YVR.Core.HandJointLocations.isActive.html": {
    "href": "api/YVR.Core.HandJointLocations.isActive.html",
    "title": "Field isActive | Core",
    "keywords": "Field isActive Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint isActive Returns uint"
  },
  "api/YVR.Core.HandJointLocations.jointCount.html": {
    "href": "api/YVR.Core.HandJointLocations.jointCount.html",
    "title": "Field jointCount | Core",
    "keywords": "Field jointCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint jointCount Returns uint"
  },
  "api/YVR.Core.HandJointLocations.jointLocations.html": {
    "href": "api/YVR.Core.HandJointLocations.jointLocations.html",
    "title": "Field jointLocations | Core",
    "keywords": "Field jointLocations Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandJointLocation[] jointLocations Returns HandJointLocation[]"
  },
  "api/YVR.Core.HandJointLocations.jointVelocities.html": {
    "href": "api/YVR.Core.HandJointLocations.jointVelocities.html",
    "title": "Field jointVelocities | Core",
    "keywords": "Field jointVelocities Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandJointVelocity[] jointVelocities Returns HandJointVelocity[]"
  },
  "api/YVR.Core.HandJointVelocity.angularVelocity.html": {
    "href": "api/YVR.Core.HandJointVelocity.angularVelocity.html",
    "title": "Field angularVelocity | Core",
    "keywords": "Field angularVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 angularVelocity Returns Vector3"
  },
  "api/YVR.Core.HandJointVelocity.html": {
    "href": "api/YVR.Core.HandJointVelocity.html",
    "title": "Struct HandJointVelocity | Core",
    "keywords": "Struct HandJointVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct HandJointVelocity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields angularVelocity linearVelocity velocityFlags"
  },
  "api/YVR.Core.HandJointVelocity.linearVelocity.html": {
    "href": "api/YVR.Core.HandJointVelocity.linearVelocity.html",
    "title": "Field linearVelocity | Core",
    "keywords": "Field linearVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 linearVelocity Returns Vector3"
  },
  "api/YVR.Core.HandJointVelocity.velocityFlags.html": {
    "href": "api/YVR.Core.HandJointVelocity.velocityFlags.html",
    "title": "Field velocityFlags | Core",
    "keywords": "Field velocityFlags Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong velocityFlags Returns ulong"
  },
  "api/YVR.Core.HandStatus.html": {
    "href": "api/YVR.Core.HandStatus.html",
    "title": "Enum HandStatus | Core",
    "keywords": "Enum HandStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll [Flags] public enum HandStatus : ulong Fields DominantHand = 128 HandTracked = 1 IndexPinching = 4 InputStateValid = 2 MenuPressed = 256 MiddlePinching = 8 PinkPinching = 32 RingPinching = 16 SystemGestureInProgress = 64"
  },
  "api/YVR.Core.HandTrackingAimState.aimPose.html": {
    "href": "api/YVR.Core.HandTrackingAimState.aimPose.html",
    "title": "Field aimPose | Core",
    "keywords": "Field aimPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Posef aimPose Returns Posef"
  },
  "api/YVR.Core.HandTrackingAimState.html": {
    "href": "api/YVR.Core.HandTrackingAimState.html",
    "title": "Struct HandTrackingAimState | Core",
    "keywords": "Struct HandTrackingAimState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct HandTrackingAimState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aimPose pinchStrengthIndex pinchStrengthLittle pinchStrengthMiddle pinchStrengthRing status"
  },
  "api/YVR.Core.HandTrackingAimState.pinchStrengthIndex.html": {
    "href": "api/YVR.Core.HandTrackingAimState.pinchStrengthIndex.html",
    "title": "Field pinchStrengthIndex | Core",
    "keywords": "Field pinchStrengthIndex Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float pinchStrengthIndex Returns float"
  },
  "api/YVR.Core.HandTrackingAimState.pinchStrengthLittle.html": {
    "href": "api/YVR.Core.HandTrackingAimState.pinchStrengthLittle.html",
    "title": "Field pinchStrengthLittle | Core",
    "keywords": "Field pinchStrengthLittle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float pinchStrengthLittle Returns float"
  },
  "api/YVR.Core.HandTrackingAimState.pinchStrengthMiddle.html": {
    "href": "api/YVR.Core.HandTrackingAimState.pinchStrengthMiddle.html",
    "title": "Field pinchStrengthMiddle | Core",
    "keywords": "Field pinchStrengthMiddle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float pinchStrengthMiddle Returns float"
  },
  "api/YVR.Core.HandTrackingAimState.pinchStrengthRing.html": {
    "href": "api/YVR.Core.HandTrackingAimState.pinchStrengthRing.html",
    "title": "Field pinchStrengthRing | Core",
    "keywords": "Field pinchStrengthRing Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float pinchStrengthRing Returns float"
  },
  "api/YVR.Core.HandTrackingAimState.status.html": {
    "href": "api/YVR.Core.HandTrackingAimState.status.html",
    "title": "Field status | Core",
    "keywords": "Field status Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandStatus status Returns HandStatus"
  },
  "api/YVR.Core.HandType.html": {
    "href": "api/YVR.Core.HandType.html",
    "title": "Enum HandType | Core",
    "keywords": "Enum HandType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum HandType Fields HandLeft = 1 HandRight = 2 None = 0"
  },
  "api/YVR.Core.ILayerShapeHandler.HandleLayerPose.html": {
    "href": "api/YVR.Core.ILayerShapeHandler.HandleLayerPose.html",
    "title": "Method HandleLayerPose | Core",
    "keywords": "Method HandleLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerPose(IYVRLayerHandle, params object[]) void HandleLayerPose(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.ILayerShapeHandler.HandleLayerShape.html": {
    "href": "api/YVR.Core.ILayerShapeHandler.HandleLayerShape.html",
    "title": "Method HandleLayerShape | Core",
    "keywords": "Method HandleLayerShape Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerShape(IYVRLayerHandle, params object[]) void HandleLayerShape(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.ILayerShapeHandler.html": {
    "href": "api/YVR.Core.ILayerShapeHandler.html",
    "title": "Interface ILayerShapeHandler | Core",
    "keywords": "Interface ILayerShapeHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll public interface ILayerShapeHandler Methods HandleLayerPose(IYVRLayerHandle, params object[]) HandleLayerShape(IYVRLayerHandle, params object[])"
  },
  "api/YVR.Core.IYVRLayerHandle.AddLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.AddLayer.html",
    "title": "Method AddLayer | Core",
    "keywords": "Method AddLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddLayer(int) void AddLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.IYVRLayerHandle.AddLayerAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.AddLayerAsync.html",
    "title": "Method AddLayerAsync | Core",
    "keywords": "Method AddLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddLayerAsync(int, Action) void AddLayerAsync(int layerId, Action onLayerAdded = null) Parameters layerId int onLayerAdded Action"
  },
  "api/YVR.Core.IYVRLayerHandle.CreateLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.CreateLayer.html",
    "title": "Method CreateLayer | Core",
    "keywords": "Method CreateLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateLayer(YVRLayerCreateInfo) int CreateLayer(YVRLayerCreateInfo layerCreateInfo) Parameters layerCreateInfo YVRLayerCreateInfo Returns int"
  },
  "api/YVR.Core.IYVRLayerHandle.CreateLayerAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.CreateLayerAsync.html",
    "title": "Method CreateLayerAsync | Core",
    "keywords": "Method CreateLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateLayerAsync(YVRLayerCreateInfo, Action<int>) void CreateLayerAsync(YVRLayerCreateInfo layerCreateInfo, Action<int> onLayerCreated = null) Parameters layerCreateInfo YVRLayerCreateInfo onLayerCreated Action<int>"
  },
  "api/YVR.Core.IYVRLayerHandle.DestroyLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.DestroyLayer.html",
    "title": "Method DestroyLayer | Core",
    "keywords": "Method DestroyLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyLayer(int, bool) void DestroyLayer(int layer, bool destroyImmediate) Parameters layer int destroyImmediate bool"
  },
  "api/YVR.Core.IYVRLayerHandle.DestroyLayerAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.DestroyLayerAsync.html",
    "title": "Method DestroyLayerAsync | Core",
    "keywords": "Method DestroyLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyLayerAsync(int, bool, Action) void DestroyLayerAsync(int layerId, bool destroyImmediate, Action onLayerDestroyed = null) Parameters layerId int destroyImmediate bool onLayerDestroyed Action"
  },
  "api/YVR.Core.IYVRLayerHandle.GetAlLayersColorHandle.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.GetAlLayersColorHandle.html",
    "title": "Method GetAlLayersColorHandle | Core",
    "keywords": "Method GetAlLayersColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAlLayersColorHandle() int[] GetAlLayersColorHandle() Returns int[]"
  },
  "api/YVR.Core.IYVRLayerHandle.GetEyeBufferLayerId.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.GetEyeBufferLayerId.html",
    "title": "Method GetEyeBufferLayerId | Core",
    "keywords": "Method GetEyeBufferLayerId Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeBufferLayerId() int GetEyeBufferLayerId() Returns int"
  },
  "api/YVR.Core.IYVRLayerHandle.GetLayerColorHandle.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.GetLayerColorHandle.html",
    "title": "Method GetLayerColorHandle | Core",
    "keywords": "Method GetLayerColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayerColorHandle(int, int) int GetLayerColorHandle(int layerId, int index) Parameters layerId int index int Returns int GetLayerColorHandle(int) int GetLayerColorHandle(int layerId) Parameters layerId int Returns int"
  },
  "api/YVR.Core.IYVRLayerHandle.GetLayerSurface.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.GetLayerSurface.html",
    "title": "Method GetLayerSurface | Core",
    "keywords": "Method GetLayerSurface Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayerSurface(int) IntPtr GetLayerSurface(int layerId) Parameters layerId int Returns IntPtr"
  },
  "api/YVR.Core.IYVRLayerHandle.GetLayersCount.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.GetLayersCount.html",
    "title": "Method GetLayersCount | Core",
    "keywords": "Method GetLayersCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayersCount() int GetLayersCount() Returns int"
  },
  "api/YVR.Core.IYVRLayerHandle.PrepareAddLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.PrepareAddLayer.html",
    "title": "Method PrepareAddLayer | Core",
    "keywords": "Method PrepareAddLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareAddLayer(Action) void PrepareAddLayer(Action onPrepareAddLayer = null) Parameters onPrepareAddLayer Action"
  },
  "api/YVR.Core.IYVRLayerHandle.PrepareCreateLayerAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.PrepareCreateLayerAsync.html",
    "title": "Method PrepareCreateLayerAsync | Core",
    "keywords": "Method PrepareCreateLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareCreateLayerAsync(Action) void PrepareCreateLayerAsync(Action onCreateLayerPrepared = null) Parameters onCreateLayerPrepared Action"
  },
  "api/YVR.Core.IYVRLayerHandle.PrepareDestroyLayerAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.PrepareDestroyLayerAsync.html",
    "title": "Method PrepareDestroyLayerAsync | Core",
    "keywords": "Method PrepareDestroyLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareDestroyLayerAsync(Action) void PrepareDestroyLayerAsync(Action onPrepareDestroyLayer = null) Parameters onPrepareDestroyLayer Action"
  },
  "api/YVR.Core.IYVRLayerHandle.PrepareRemoveLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.PrepareRemoveLayer.html",
    "title": "Method PrepareRemoveLayer | Core",
    "keywords": "Method PrepareRemoveLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareRemoveLayer(Action) void PrepareRemoveLayer(Action onPrepareRemoveLayer = null) Parameters onPrepareRemoveLayer Action"
  },
  "api/YVR.Core.IYVRLayerHandle.PrepareSetLayerVisible.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.PrepareSetLayerVisible.html",
    "title": "Method PrepareSetLayerVisible | Core",
    "keywords": "Method PrepareSetLayerVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareSetLayerVisible(bool, Action) void PrepareSetLayerVisible(bool visible, Action onPrepareSetLayerVisible = null) Parameters visible bool onPrepareSetLayerVisible Action"
  },
  "api/YVR.Core.IYVRLayerHandle.RemoveLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.RemoveLayer.html",
    "title": "Method RemoveLayer | Core",
    "keywords": "Method RemoveLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll RemoveLayer(int) void RemoveLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.IYVRLayerHandle.RemoveLayerAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.RemoveLayerAsync.html",
    "title": "Method RemoveLayerAsync | Core",
    "keywords": "Method RemoveLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll RemoveLayerAsync(int, Action) void RemoveLayerAsync(int layerId, Action onLayerAdded = null) Parameters layerId int onLayerAdded Action"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerCylinderParam.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerCylinderParam.html",
    "title": "Method SetLayerCylinderParam | Core",
    "keywords": "Method SetLayerCylinderParam Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerCylinderParam(in int, in float, in float, in float) void SetLayerCylinderParam(in int layerId, in float radius, in float centralAngle, in float aspectRatio) Parameters layerId int radius float centralAngle float aspectRatio float"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerDepthAsync.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerDepthAsync.html",
    "title": "Method SetLayerDepthAsync | Core",
    "keywords": "Method SetLayerDepthAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerDepthAsync(int, int, Action<bool>) void SetLayerDepthAsync(int layerId, int depth, Action<bool> onLayerDepthSet = null) Parameters layerId int depth int onLayerDepthSet Action<bool>"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerEquirect2Param.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerEquirect2Param.html",
    "title": "Method SetLayerEquirect2Param | Core",
    "keywords": "Method SetLayerEquirect2Param Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirect2Param(in int, in float, in float, in float, in float) void SetLayerEquirect2Param(in int layerId, in float radius, in float centralHorizontalAngle, in float upperVerticalAngle, in float lowerVerticalAngle) Parameters layerId int radius float centralHorizontalAngle float upperVerticalAngle float lowerVerticalAngle float"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerEquirectOffset.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerEquirectOffset.html",
    "title": "Method SetLayerEquirectOffset | Core",
    "keywords": "Method SetLayerEquirectOffset Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirectOffset(in int, in Rect) void SetLayerEquirectOffset(in int layerId, in Rect rect) Parameters layerId int rect Rect"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerEquirectRadius.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerEquirectRadius.html",
    "title": "Method SetLayerEquirectRadius | Core",
    "keywords": "Method SetLayerEquirectRadius Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirectRadius(in int, in float) void SetLayerEquirectRadius(in int layerId, in float radius) Parameters layerId int radius float"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerImageRect.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerImageRect.html",
    "title": "Method SetLayerImageRect | Core",
    "keywords": "Method SetLayerImageRect Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerImageRect(int, Rect) void SetLayerImageRect(int layerId, Rect rect) Parameters layerId int rect Rect"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerPose.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerPose.html",
    "title": "Method SetLayerPose | Core",
    "keywords": "Method SetLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerPose(in int, in XRPose) void SetLayerPose(in int layerId, in XRPose pose) Parameters layerId int pose XRPose"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerPreSubmitCallback.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerPreSubmitCallback.html",
    "title": "Method SetLayerPreSubmitCallback | Core",
    "keywords": "Method SetLayerPreSubmitCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerPreSubmitCallback(Action) void SetLayerPreSubmitCallback(Action onLayerPreSubmit) Parameters onLayerPreSubmit Action"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerSettings.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerSettings.html",
    "title": "Method SetLayerSettings | Core",
    "keywords": "Method SetLayerSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerSettings(int, bool, bool, bool, bool) void SetLayerSettings(int layerId, bool enableSuperSample, bool expensiveSuperSample, bool enableSharpen, bool expensiveSharpen) Parameters layerId int enableSuperSample bool expensiveSuperSample bool enableSharpen bool expensiveSharpen bool"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerSize.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerSize.html",
    "title": "Method SetLayerSize | Core",
    "keywords": "Method SetLayerSize Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerSize(in int, XRSize) void SetLayerSize(in int layerId, XRSize size) Parameters layerId int size XRSize"
  },
  "api/YVR.Core.IYVRLayerHandle.SetLayerVisible.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetLayerVisible.html",
    "title": "Method SetLayerVisible | Core",
    "keywords": "Method SetLayerVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerVisible(int, bool) void SetLayerVisible(int layerId, bool visible) Parameters layerId int visible bool"
  },
  "api/YVR.Core.IYVRLayerHandle.SetSurfaceDimensions.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SetSurfaceDimensions.html",
    "title": "Method SetSurfaceDimensions | Core",
    "keywords": "Method SetSurfaceDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSurfaceDimensions(int, int, int) void SetSurfaceDimensions(int layerId, int width, int height) Parameters layerId int width int height int"
  },
  "api/YVR.Core.IYVRLayerHandle.SwapBufferLayer.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.SwapBufferLayer.html",
    "title": "Method SwapBufferLayer | Core",
    "keywords": "Method SwapBufferLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll SwapBufferLayer(int) void SwapBufferLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.IYVRLayerHandle.html": {
    "href": "api/YVR.Core.IYVRLayerHandle.html",
    "title": "Interface IYVRLayerHandle | Core",
    "keywords": "Interface IYVRLayerHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public interface IYVRLayerHandle Methods AddLayer(int) AddLayerAsync(int, Action) CreateLayer(YVRLayerCreateInfo) CreateLayerAsync(YVRLayerCreateInfo, Action<int>) DestroyLayer(int, bool) DestroyLayerAsync(int, bool, Action) GetAlLayersColorHandle() GetEyeBufferLayerId() GetLayerColorHandle(int) GetLayerColorHandle(int, int) GetLayerSurface(int) GetLayersCount() PrepareAddLayer(Action) PrepareCreateLayerAsync(Action) PrepareDestroyLayerAsync(Action) PrepareRemoveLayer(Action) PrepareSetLayerVisible(bool, Action) RemoveLayer(int) RemoveLayerAsync(int, Action) SetLayerCylinderParam(in int, in float, in float, in float) SetLayerDepthAsync(int, int, Action<bool>) SetLayerEquirect2Param(in int, in float, in float, in float, in float) SetLayerEquirectOffset(in int, in Rect) SetLayerEquirectRadius(in int, in float) SetLayerImageRect(int, Rect) SetLayerPose(in int, in XRPose) SetLayerPreSubmitCallback(Action) SetLayerSettings(int, bool, bool, bool, bool) SetLayerSize(in int, XRSize) SetLayerVisible(int, bool) SetSurfaceDimensions(int, int, int) SwapBufferLayer(int)"
  },
  "api/YVR.Core.InputDeviceTest.ClearText.html": {
    "href": "api/YVR.Core.InputDeviceTest.ClearText.html",
    "title": "Method ClearText | Core",
    "keywords": "Method ClearText Namespace YVR.Core Assembly YVR.Core.Runtime.dll ClearText() public void ClearText()"
  },
  "api/YVR.Core.InputDeviceTest.LeftControllerAddAmplitude.html": {
    "href": "api/YVR.Core.InputDeviceTest.LeftControllerAddAmplitude.html",
    "title": "Method LeftControllerAddAmplitude | Core",
    "keywords": "Method LeftControllerAddAmplitude Namespace YVR.Core Assembly YVR.Core.Runtime.dll LeftControllerAddAmplitude() public void LeftControllerAddAmplitude()"
  },
  "api/YVR.Core.InputDeviceTest.LeftControllerSubAmplitude.html": {
    "href": "api/YVR.Core.InputDeviceTest.LeftControllerSubAmplitude.html",
    "title": "Method LeftControllerSubAmplitude | Core",
    "keywords": "Method LeftControllerSubAmplitude Namespace YVR.Core Assembly YVR.Core.Runtime.dll LeftControllerSubAmplitude() public void LeftControllerSubAmplitude()"
  },
  "api/YVR.Core.InputDeviceTest.RightControllerAddAmplitude.html": {
    "href": "api/YVR.Core.InputDeviceTest.RightControllerAddAmplitude.html",
    "title": "Method RightControllerAddAmplitude | Core",
    "keywords": "Method RightControllerAddAmplitude Namespace YVR.Core Assembly YVR.Core.Runtime.dll RightControllerAddAmplitude() public void RightControllerAddAmplitude()"
  },
  "api/YVR.Core.InputDeviceTest.RightControllerSubAmplitude.html": {
    "href": "api/YVR.Core.InputDeviceTest.RightControllerSubAmplitude.html",
    "title": "Method RightControllerSubAmplitude | Core",
    "keywords": "Method RightControllerSubAmplitude Namespace YVR.Core Assembly YVR.Core.Runtime.dll RightControllerSubAmplitude() public void RightControllerSubAmplitude()"
  },
  "api/YVR.Core.InputDeviceTest.SendLeftHapticImpulse.html": {
    "href": "api/YVR.Core.InputDeviceTest.SendLeftHapticImpulse.html",
    "title": "Method SendLeftHapticImpulse | Core",
    "keywords": "Method SendLeftHapticImpulse Namespace YVR.Core Assembly YVR.Core.Runtime.dll SendLeftHapticImpulse() public void SendLeftHapticImpulse()"
  },
  "api/YVR.Core.InputDeviceTest.SendRightHapticImpulse.html": {
    "href": "api/YVR.Core.InputDeviceTest.SendRightHapticImpulse.html",
    "title": "Method SendRightHapticImpulse | Core",
    "keywords": "Method SendRightHapticImpulse Namespace YVR.Core Assembly YVR.Core.Runtime.dll SendRightHapticImpulse() public void SendRightHapticImpulse()"
  },
  "api/YVR.Core.InputDeviceTest.StopLeftControllerHaptic.html": {
    "href": "api/YVR.Core.InputDeviceTest.StopLeftControllerHaptic.html",
    "title": "Method StopLeftControllerHaptic | Core",
    "keywords": "Method StopLeftControllerHaptic Namespace YVR.Core Assembly YVR.Core.Runtime.dll StopLeftControllerHaptic() public void StopLeftControllerHaptic()"
  },
  "api/YVR.Core.InputDeviceTest.StopRightControllerHaptic.html": {
    "href": "api/YVR.Core.InputDeviceTest.StopRightControllerHaptic.html",
    "title": "Method StopRightControllerHaptic | Core",
    "keywords": "Method StopRightControllerHaptic Namespace YVR.Core Assembly YVR.Core.Runtime.dll StopRightControllerHaptic() public void StopRightControllerHaptic()"
  },
  "api/YVR.Core.InputDeviceTest.debugInfoScrollRect.html": {
    "href": "api/YVR.Core.InputDeviceTest.debugInfoScrollRect.html",
    "title": "Field debugInfoScrollRect | Core",
    "keywords": "Field debugInfoScrollRect Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ScrollRect debugInfoScrollRect Returns ScrollRect"
  },
  "api/YVR.Core.InputDeviceTest.html": {
    "href": "api/YVR.Core.InputDeviceTest.html",
    "title": "Class InputDeviceTest | Core",
    "keywords": "Class InputDeviceTest Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class InputDeviceTest : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour InputDeviceTest Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields debugInfoScrollRect inputText Methods ClearText() LeftControllerAddAmplitude() LeftControllerSubAmplitude() RightControllerAddAmplitude() RightControllerSubAmplitude() SendLeftHapticImpulse() SendRightHapticImpulse() StopLeftControllerHaptic() StopRightControllerHaptic()"
  },
  "api/YVR.Core.InputDeviceTest.inputText.html": {
    "href": "api/YVR.Core.InputDeviceTest.inputText.html",
    "title": "Field inputText | Core",
    "keywords": "Field inputText Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text inputText Returns Text"
  },
  "api/YVR.Core.PoseData.html": {
    "href": "api/YVR.Core.PoseData.html",
    "title": "Struct PoseData | Core",
    "keywords": "Struct PoseData Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public struct PoseData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields orientation position"
  },
  "api/YVR.Core.PoseData.orientation.html": {
    "href": "api/YVR.Core.PoseData.orientation.html",
    "title": "Field orientation | Core",
    "keywords": "Field orientation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Quaternion orientation Returns Quaternion"
  },
  "api/YVR.Core.PoseData.position.html": {
    "href": "api/YVR.Core.PoseData.position.html",
    "title": "Field position | Core",
    "keywords": "Field position Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 position Returns Vector3"
  },
  "api/YVR.Core.Posef.ToJointPosef.html": {
    "href": "api/YVR.Core.Posef.ToJointPosef.html",
    "title": "Method ToJointPosef | Core",
    "keywords": "Method ToJointPosef Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToJointPosef(HandType) public void ToJointPosef(HandType hand) Parameters hand HandType"
  },
  "api/YVR.Core.Posef.ToString.html": {
    "href": "api/YVR.Core.Posef.ToString.html",
    "title": "Method ToString | Core",
    "keywords": "Method ToString Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToString() public override string ToString() Returns string"
  },
  "api/YVR.Core.Posef.html": {
    "href": "api/YVR.Core.Posef.html",
    "title": "Struct Posef | Core",
    "keywords": "Struct Posef Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct Posef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields orientation position Methods ToJointPosef(HandType) ToString()"
  },
  "api/YVR.Core.Posef.orientation.html": {
    "href": "api/YVR.Core.Posef.orientation.html",
    "title": "Field orientation | Core",
    "keywords": "Field orientation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Quaternion orientation Returns Quaternion"
  },
  "api/YVR.Core.Posef.position.html": {
    "href": "api/YVR.Core.Posef.position.html",
    "title": "Field position | Core",
    "keywords": "Field position Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 position Returns Vector3"
  },
  "api/YVR.Core.QuadShapeHandler.HandleLayerPose.html": {
    "href": "api/YVR.Core.QuadShapeHandler.HandleLayerPose.html",
    "title": "Method HandleLayerPose | Core",
    "keywords": "Method HandleLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerPose(IYVRLayerHandle, params object[]) public void HandleLayerPose(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.QuadShapeHandler.HandleLayerShape.html": {
    "href": "api/YVR.Core.QuadShapeHandler.HandleLayerShape.html",
    "title": "Method HandleLayerShape | Core",
    "keywords": "Method HandleLayerShape Namespace YVR.Core Assembly YVR.Core.Runtime.dll HandleLayerShape(IYVRLayerHandle, params object[]) public void HandleLayerShape(IYVRLayerHandle layerHandle, params object[] data) Parameters layerHandle IYVRLayerHandle data object[]"
  },
  "api/YVR.Core.QuadShapeHandler.html": {
    "href": "api/YVR.Core.QuadShapeHandler.html",
    "title": "Class QuadShapeHandler | Core",
    "keywords": "Class QuadShapeHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class QuadShapeHandler : ILayerShapeHandler Inheritance object QuadShapeHandler Implements ILayerShapeHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleLayerPose(IYVRLayerHandle, params object[]) HandleLayerShape(IYVRLayerHandle, params object[])"
  },
  "api/YVR.Core.Step.html": {
    "href": "api/YVR.Core.Step.html",
    "title": "Enum Step | Core",
    "keywords": "Enum Step Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public enum Step Fields Physics = 0 Render = -1"
  },
  "api/YVR.Core.StereoRenderingMode.html": {
    "href": "api/YVR.Core.StereoRenderingMode.html",
    "title": "Enum StereoRenderingMode | Core",
    "keywords": "Enum StereoRenderingMode Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum StereoRenderingMode Fields MultiPass = 0 Multiview = 2 QuadViews = 3"
  },
  "api/YVR.Core.VRApiHandlersTrigger.html": {
    "href": "api/YVR.Core.VRApiHandlersTrigger.html",
    "title": "Class VRApiHandlersTrigger | Core",
    "keywords": "Class VRApiHandlersTrigger Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class VRApiHandlersTrigger : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour VRApiHandlersTrigger Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/YVR.Core.XR.YVRPlatformSetting.Instance.html": {
    "href": "api/YVR.Core.XR.YVRPlatformSetting.Instance.html",
    "title": "Property Instance | Core",
    "keywords": "Property Instance Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll Instance public static YVRPlatformSetting Instance { get; } Property Value YVRPlatformSetting"
  },
  "api/YVR.Core.XR.YVRPlatformSetting.appID.html": {
    "href": "api/YVR.Core.XR.YVRPlatformSetting.appID.html",
    "title": "Field appID | Core",
    "keywords": "Field appID Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] public string appID Returns string"
  },
  "api/YVR.Core.XR.YVRPlatformSetting.html": {
    "href": "api/YVR.Core.XR.YVRPlatformSetting.html",
    "title": "Class YVRPlatformSetting | Core",
    "keywords": "Class YVRPlatformSetting Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public sealed class YVRPlatformSetting : ScriptableObject Inheritance object Object ScriptableObject YVRPlatformSetting Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields appID Properties Instance"
  },
  "api/YVR.Core.XR.YVRXRLoader.Deinitialize.html": {
    "href": "api/YVR.Core.XR.YVRXRLoader.Deinitialize.html",
    "title": "Method Deinitialize | Core",
    "keywords": "Method Deinitialize Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll Deinitialize() Override of UnityEngine.XR.Management.XRLoader.Deinitialize() to provide for clearing the instance map.true If you override this method in your subclass, you must call the base implementation to allow the instance map tp be cleaned up correctly. public override bool Deinitialize() Returns bool True if de-initialization was successful."
  },
  "api/YVR.Core.XR.YVRXRLoader.Initialize.html": {
    "href": "api/YVR.Core.XR.YVRXRLoader.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll Initialize() Initialize the loader. This should initialize all subsystems to support the desired runtime setup this loader represents. This is the only method on XRLoader that Management uses to determine the active loader to use. If this method returns true, Management locks this loader as the UnityEngine.XR.Management.XRManagerSettings.activeLoader and and stops fall through processing on the UnityEngine.XR.Management.XRManagerSettings.loaders list of current loaders. If this method returns false, UnityEngine.XR.Management.XRManagerSettings continues to process the next loader in the UnityEngine.XR.Management.XRManagerSettings.loaders list, or fails completely when the list is exhausted. public override bool Initialize() Returns bool Whether or not initialization succeeded."
  },
  "api/YVR.Core.XR.YVRXRLoader.Start.html": {
    "href": "api/YVR.Core.XR.YVRXRLoader.Start.html",
    "title": "Method Start | Core",
    "keywords": "Method Start Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll Start() Ask loader to start all initialized subsystems. public override bool Start() Returns bool Whether or not all subsystems were successfully started."
  },
  "api/YVR.Core.XR.YVRXRLoader.Stop.html": {
    "href": "api/YVR.Core.XR.YVRXRLoader.Stop.html",
    "title": "Method Stop | Core",
    "keywords": "Method Stop Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll Stop() Ask loader to stop all initialized subsystems. public override bool Stop() Returns bool Whether or not all subsystems were successfully stopped."
  },
  "api/YVR.Core.XR.YVRXRLoader.html": {
    "href": "api/YVR.Core.XR.YVRXRLoader.html",
    "title": "Class YVRXRLoader | Core",
    "keywords": "Class YVRXRLoader Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public class YVRXRLoader : XRLoaderHelper Inheritance object Object ScriptableObject XRLoader XRLoaderHelper YVRXRLoader Inherited Members XRLoaderHelper.m_SubsystemInstanceMap XRLoaderHelper.GetLoadedSubsystem<T>() XRLoaderHelper.StartSubsystem<T>() XRLoaderHelper.StopSubsystem<T>() XRLoaderHelper.DestroySubsystem<T>() XRLoaderHelper.CreateSubsystem<TDescriptor, TSubsystem>(List<TDescriptor>, string) XRLoaderHelper.CreateIntegratedSubsystem<TDescriptor, TSubsystem>(List<TDescriptor>, string) XRLoaderHelper.CreateStandaloneSubsystem<TDescriptor, TSubsystem>(List<TDescriptor>, string) XRLoader.GetSupportedGraphicsDeviceTypes(bool) ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields xrUserDefinedSettings Methods Deinitialize() Override of UnityEngine.XR.Management.XRLoader.Deinitialize() to provide for clearing the instance map.true If you override this method in your subclass, you must call the base implementation to allow the instance map tp be cleaned up correctly. Initialize() Initialize the loader. This should initialize all subsystems to support the desired runtime setup this loader represents. This is the only method on XRLoader that Management uses to determine the active loader to use. If this method returns true, Management locks this loader as the UnityEngine.XR.Management.XRManagerSettings.activeLoader and and stops fall through processing on the UnityEngine.XR.Management.XRManagerSettings.loaders list of current loaders. If this method returns false, UnityEngine.XR.Management.XRManagerSettings continues to process the next loader in the UnityEngine.XR.Management.XRManagerSettings.loaders list, or fails completely when the list is exhausted. Start() Ask loader to start all initialized subsystems. Stop() Ask loader to stop all initialized subsystems."
  },
  "api/YVR.Core.XR.YVRXRLoader.xrUserDefinedSettings.html": {
    "href": "api/YVR.Core.XR.YVRXRLoader.xrUserDefinedSettings.html",
    "title": "Field xrUserDefinedSettings | Core",
    "keywords": "Field xrUserDefinedSettings Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public static YVRXRUserDefinedSettings xrUserDefinedSettings Returns YVRXRUserDefinedSettings"
  },
  "api/YVR.Core.XR.YVRXRSettings.Awake.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.Awake.html",
    "title": "Method Awake | Core",
    "keywords": "Method Awake Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll Awake() public void Awake()"
  },
  "api/YVR.Core.XR.YVRXRSettings.GetStereoRenderingMode.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.GetStereoRenderingMode.html",
    "title": "Method GetStereoRenderingMode | Core",
    "keywords": "Method GetStereoRenderingMode Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll GetStereoRenderingMode() public ushort GetStereoRenderingMode() Returns ushort"
  },
  "api/YVR.Core.XR.YVRXRSettings.OSSplashScreen.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.OSSplashScreen.html",
    "title": "Field OSSplashScreen | Core",
    "keywords": "Field OSSplashScreen Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Set a PNG format file as system splash screen\")] public Texture2D OSSplashScreen Returns Texture2D"
  },
  "api/YVR.Core.XR.YVRXRSettings.autoResolve.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.autoResolve.html",
    "title": "Field autoResolve | Core",
    "keywords": "Field autoResolve Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Get PassThrough Image in Unity\")] public bool autoResolve Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.extraRenderPass.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.extraRenderPass.html",
    "title": "Field extraRenderPass | Core",
    "keywords": "Field extraRenderPass Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Double RenderPasses\")] public bool extraRenderPass Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.extraRenderPassDepth.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.extraRenderPassDepth.html",
    "title": "Field extraRenderPassDepth | Core",
    "keywords": "Field extraRenderPassDepth Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Set RenderPass Depth\")] public int extraRenderPassDepth Returns int"
  },
  "api/YVR.Core.XR.YVRXRSettings.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.html",
    "title": "Class YVRXRSettings | Core",
    "keywords": "Class YVRXRSettings Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [Serializable] [XRConfigurationData(\"YVR\", \"YVR.Core.XR.YVRXRSettings\")] public class YVRXRSettings : ScriptableObject Inheritance object Object ScriptableObject YVRXRSettings Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields OSSplashScreen autoResolve extraRenderPass extraRenderPassDepth innerExtraPassRenderScale innerPassRenderScale isP3 optimizeBufferDiscards outerExtraPassRenderScale outerPassRenderScale passthroughProvider stereoRenderingMode use16BitDepthBuffer useAppSW useMonoscopic useVRWidget Properties xrSettings Methods Awake() GetStereoRenderingMode()"
  },
  "api/YVR.Core.XR.YVRXRSettings.innerExtraPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.innerExtraPassRenderScale.html",
    "title": "Field innerExtraPassRenderScale | Core",
    "keywords": "Field innerExtraPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Only works while rendering mode is QuadViews and extraRenderPass enabled\")] public float innerExtraPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRSettings.innerPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.innerPassRenderScale.html",
    "title": "Field innerPassRenderScale | Core",
    "keywords": "Field innerPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Inner Pass Render Scale, works only when stereoRenderingMode is QuadViews\")] public float innerPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRSettings.isP3.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.isP3.html",
    "title": "Field isP3 | Core",
    "keywords": "Field isP3 Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Is in P3 color space\")] public bool isP3 Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.optimizeBufferDiscards.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.optimizeBufferDiscards.html",
    "title": "Field optimizeBufferDiscards | Core",
    "keywords": "Field optimizeBufferDiscards Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Always discarding depth and resolving MSAA color to improve performance, this may break user content, Vulkan only\")] public bool optimizeBufferDiscards Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.outerExtraPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.outerExtraPassRenderScale.html",
    "title": "Field outerExtraPassRenderScale | Core",
    "keywords": "Field outerExtraPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Only works while rendering mode is QuadViews and extraRenderPass enabled\")] public float outerExtraPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRSettings.outerPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.outerPassRenderScale.html",
    "title": "Field outerPassRenderScale | Core",
    "keywords": "Field outerPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Outer Pass Render Scale, works only when stereoRenderingMode is QuadViews\")] public float outerPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRSettings.passthroughProvider.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.passthroughProvider.html",
    "title": "Field passthroughProvider | Core",
    "keywords": "Field passthroughProvider Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Get PassThrough Image in Unity\")] public bool passthroughProvider Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.stereoRenderingMode.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.stereoRenderingMode.html",
    "title": "Field stereoRenderingMode | Core",
    "keywords": "Field stereoRenderingMode Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Set the Stereo Rendering Method\")] public StereoRenderingMode stereoRenderingMode Returns StereoRenderingMode"
  },
  "api/YVR.Core.XR.YVRXRSettings.use16BitDepthBuffer.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.use16BitDepthBuffer.html",
    "title": "Field use16BitDepthBuffer | Core",
    "keywords": "Field use16BitDepthBuffer Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Use 16-bit depth buffer to save bandwidth\")] public bool use16BitDepthBuffer Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.useAppSW.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.useAppSW.html",
    "title": "Field useAppSW | Core",
    "keywords": "Field useAppSW Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Enable AppSW, Vulkan only\")] public bool useAppSW Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.useMonoscopic.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.useMonoscopic.html",
    "title": "Field useMonoscopic | Core",
    "keywords": "Field useMonoscopic Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Use the same poses for left/right eyes\")] public bool useMonoscopic Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.useVRWidget.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.useVRWidget.html",
    "title": "Field useVRWidget | Core",
    "keywords": "Field useVRWidget Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll [SerializeField] [Tooltip(\"Submit default layer on VRWidget\")] public bool useVRWidget Returns bool"
  },
  "api/YVR.Core.XR.YVRXRSettings.xrSettings.html": {
    "href": "api/YVR.Core.XR.YVRXRSettings.xrSettings.html",
    "title": "Property xrSettings | Core",
    "keywords": "Property xrSettings Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll xrSettings public static YVRXRSettings xrSettings { get; } Property Value YVRXRSettings"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.UseVRWidget.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.UseVRWidget.html",
    "title": "Field UseVRWidget | Core",
    "keywords": "Field UseVRWidget Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool UseVRWidget Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.autoResolve.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.autoResolve.html",
    "title": "Field autoResolve | Core",
    "keywords": "Field autoResolve Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool autoResolve Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.enablePassthroughProvider.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.enablePassthroughProvider.html",
    "title": "Field enablePassthroughProvider | Core",
    "keywords": "Field enablePassthroughProvider Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool enablePassthroughProvider Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.extraRenderPass.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.extraRenderPass.html",
    "title": "Field extraRenderPass | Core",
    "keywords": "Field extraRenderPass Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool extraRenderPass Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.extraRenderPassDepth.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.extraRenderPassDepth.html",
    "title": "Field extraRenderPassDepth | Core",
    "keywords": "Field extraRenderPassDepth Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public int extraRenderPassDepth Returns int"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.html",
    "title": "Struct YVRXRUserDefinedSettings | Core",
    "keywords": "Struct YVRXRUserDefinedSettings Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public struct YVRXRUserDefinedSettings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields UseVRWidget autoResolve enablePassthroughProvider extraRenderPass extraRenderPassDepth innerExtraPassRenderScale innerPassRenderScale isP3 optimizeBufferDiscards outerExtraPassRenderScale outerPassRenderScale stereoRenderingMode use16BitDepthBuffer useAppSW useLinearColorSpace useMonoscopic"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.innerExtraPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.innerExtraPassRenderScale.html",
    "title": "Field innerExtraPassRenderScale | Core",
    "keywords": "Field innerExtraPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public float innerExtraPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.innerPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.innerPassRenderScale.html",
    "title": "Field innerPassRenderScale | Core",
    "keywords": "Field innerPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public float innerPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.isP3.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.isP3.html",
    "title": "Field isP3 | Core",
    "keywords": "Field isP3 Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool isP3 Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.optimizeBufferDiscards.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.optimizeBufferDiscards.html",
    "title": "Field optimizeBufferDiscards | Core",
    "keywords": "Field optimizeBufferDiscards Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool optimizeBufferDiscards Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.outerExtraPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.outerExtraPassRenderScale.html",
    "title": "Field outerExtraPassRenderScale | Core",
    "keywords": "Field outerExtraPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public float outerExtraPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.outerPassRenderScale.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.outerPassRenderScale.html",
    "title": "Field outerPassRenderScale | Core",
    "keywords": "Field outerPassRenderScale Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public float outerPassRenderScale Returns float"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.stereoRenderingMode.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.stereoRenderingMode.html",
    "title": "Field stereoRenderingMode | Core",
    "keywords": "Field stereoRenderingMode Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public ushort stereoRenderingMode Returns ushort"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.use16BitDepthBuffer.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.use16BitDepthBuffer.html",
    "title": "Field use16BitDepthBuffer | Core",
    "keywords": "Field use16BitDepthBuffer Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool use16BitDepthBuffer Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.useAppSW.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.useAppSW.html",
    "title": "Field useAppSW | Core",
    "keywords": "Field useAppSW Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool useAppSW Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.useLinearColorSpace.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.useLinearColorSpace.html",
    "title": "Field useLinearColorSpace | Core",
    "keywords": "Field useLinearColorSpace Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool useLinearColorSpace Returns bool"
  },
  "api/YVR.Core.XR.YVRXRUserDefinedSettings.useMonoscopic.html": {
    "href": "api/YVR.Core.XR.YVRXRUserDefinedSettings.useMonoscopic.html",
    "title": "Field useMonoscopic | Core",
    "keywords": "Field useMonoscopic Namespace YVR.Core.XR Assembly YVR.Core.Runtime.dll public bool useMonoscopic Returns bool"
  },
  "api/YVR.Core.XR.html": {
    "href": "api/YVR.Core.XR.html",
    "title": "Namespace YVR.Core.XR | Core",
    "keywords": "Namespace YVR.Core.XR Classes YVRPlatformSetting YVRXRLoader YVRXRSettings Structs YVRXRUserDefinedSettings"
  },
  "api/YVR.Core.XRHandFingerID.html": {
    "href": "api/YVR.Core.XRHandFingerID.html",
    "title": "Enum XRHandFingerID | Core",
    "keywords": "Enum XRHandFingerID Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum XRHandFingerID Extension Methods YVRHandUtility.GetBackJointID(XRHandFingerID) YVRHandUtility.GetFrontJointID(XRHandFingerID) Fields Index = 1 Represents the index finger. Little = 4 Represents the little finger. Middle = 2 Represents the middle finger. Ring = 3 Represents the ring finger. Thumb = 0 Represents the thumb."
  },
  "api/YVR.Core.XRPose.-ctor.html": {
    "href": "api/YVR.Core.XRPose.-ctor.html",
    "title": "Constructor XRPose | Core",
    "keywords": "Constructor XRPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll XRPose(Vector3, Quaternion) public XRPose(Vector3 position, Quaternion orientation) Parameters position Vector3 orientation Quaternion"
  },
  "api/YVR.Core.XRPose.Inverse.html": {
    "href": "api/YVR.Core.XRPose.Inverse.html",
    "title": "Method Inverse | Core",
    "keywords": "Method Inverse Namespace YVR.Core Assembly YVR.Core.Runtime.dll Inverse() public XRPose Inverse() Returns XRPose"
  },
  "api/YVR.Core.XRPose.html": {
    "href": "api/YVR.Core.XRPose.html",
    "title": "Struct XRPose | Core",
    "keywords": "Struct XRPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct XRPose Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors XRPose(Vector3, Quaternion) Fields orientation The orientation position The position Properties identity Methods Inverse() Operators operator *(XRPose, XRPose)"
  },
  "api/YVR.Core.XRPose.identity.html": {
    "href": "api/YVR.Core.XRPose.identity.html",
    "title": "Property identity | Core",
    "keywords": "Property identity Namespace YVR.Core Assembly YVR.Core.Runtime.dll identity public static XRPose identity { get; } Property Value XRPose"
  },
  "api/YVR.Core.XRPose.op_Multiply.html": {
    "href": "api/YVR.Core.XRPose.op_Multiply.html",
    "title": "Operator operator * | Core",
    "keywords": "Operator operator * Namespace YVR.Core Assembly YVR.Core.Runtime.dll operator *(XRPose, XRPose) public static XRPose operator *(XRPose lhs, XRPose rhs) Parameters lhs XRPose rhs XRPose Returns XRPose"
  },
  "api/YVR.Core.XRPose.orientation.html": {
    "href": "api/YVR.Core.XRPose.orientation.html",
    "title": "Field orientation | Core",
    "keywords": "Field orientation Namespace YVR.Core Assembly YVR.Core.Runtime.dll The orientation public Quaternion orientation Returns Quaternion The orientation"
  },
  "api/YVR.Core.XRPose.position.html": {
    "href": "api/YVR.Core.XRPose.position.html",
    "title": "Field position | Core",
    "keywords": "Field position Namespace YVR.Core Assembly YVR.Core.Runtime.dll The position public Vector3 position Returns Vector3 The position"
  },
  "api/YVR.Core.XRSize.-ctor.html": {
    "href": "api/YVR.Core.XRSize.-ctor.html",
    "title": "Constructor XRSize | Core",
    "keywords": "Constructor XRSize Namespace YVR.Core Assembly YVR.Core.Runtime.dll XRSize(float, float) public XRSize(float width, float height) Parameters width float height float"
  },
  "api/YVR.Core.XRSize.height.html": {
    "href": "api/YVR.Core.XRSize.height.html",
    "title": "Field height | Core",
    "keywords": "Field height Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float height Returns float"
  },
  "api/YVR.Core.XRSize.html": {
    "href": "api/YVR.Core.XRSize.html",
    "title": "Struct XRSize | Core",
    "keywords": "Struct XRSize Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct XRSize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors XRSize(float, float) Fields height width"
  },
  "api/YVR.Core.XRSize.width.html": {
    "href": "api/YVR.Core.XRSize.width.html",
    "title": "Field width | Core",
    "keywords": "Field width Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float width Returns float"
  },
  "api/YVR.Core.YVRAnchorLocationFlags.html": {
    "href": "api/YVR.Core.YVRAnchorLocationFlags.html",
    "title": "Enum YVRAnchorLocationFlags | Core",
    "keywords": "Enum YVRAnchorLocationFlags Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRAnchorLocationFlags Fields LocationOrientationTracked = 4 LocationOrientationValid = 1 LocationPositionTracked = 8 LocationPositionValid = 2"
  },
  "api/YVR.Core.YVRAnchorSemanticLabel.byteCapacityInput.html": {
    "href": "api/YVR.Core.YVRAnchorSemanticLabel.byteCapacityInput.html",
    "title": "Field byteCapacityInput | Core",
    "keywords": "Field byteCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int byteCapacityInput Returns int"
  },
  "api/YVR.Core.YVRAnchorSemanticLabel.byteCountOutput.html": {
    "href": "api/YVR.Core.YVRAnchorSemanticLabel.byteCountOutput.html",
    "title": "Field byteCountOutput | Core",
    "keywords": "Field byteCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int byteCountOutput Returns int"
  },
  "api/YVR.Core.YVRAnchorSemanticLabel.html": {
    "href": "api/YVR.Core.YVRAnchorSemanticLabel.html",
    "title": "Struct YVRAnchorSemanticLabel | Core",
    "keywords": "Struct YVRAnchorSemanticLabel Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRAnchorSemanticLabel Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields byteCapacityInput byteCountOutput labels"
  },
  "api/YVR.Core.YVRAnchorSemanticLabel.labels.html": {
    "href": "api/YVR.Core.YVRAnchorSemanticLabel.labels.html",
    "title": "Field labels | Core",
    "keywords": "Field labels Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr labels Returns IntPtr"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.html",
    "title": "Struct YVRAnchorTriangleMeshInternal | Core",
    "keywords": "Struct YVRAnchorTriangleMeshInternal Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRAnchorTriangleMeshInternal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields indexCapacityInput indexCountOutput indicesIntPtr vertexCapacityInput vertexCountOutput verticesIntPtr"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.indexCapacityInput.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.indexCapacityInput.html",
    "title": "Field indexCapacityInput | Core",
    "keywords": "Field indexCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int indexCapacityInput Returns int"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.indexCountOutput.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.indexCountOutput.html",
    "title": "Field indexCountOutput | Core",
    "keywords": "Field indexCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int indexCountOutput Returns int"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.indicesIntPtr.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.indicesIntPtr.html",
    "title": "Field indicesIntPtr | Core",
    "keywords": "Field indicesIntPtr Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr indicesIntPtr Returns IntPtr"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.vertexCapacityInput.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.vertexCapacityInput.html",
    "title": "Field vertexCapacityInput | Core",
    "keywords": "Field vertexCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int vertexCapacityInput Returns int"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.vertexCountOutput.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.vertexCountOutput.html",
    "title": "Field vertexCountOutput | Core",
    "keywords": "Field vertexCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int vertexCountOutput Returns int"
  },
  "api/YVR.Core.YVRAnchorTriangleMeshInternal.verticesIntPtr.html": {
    "href": "api/YVR.Core.YVRAnchorTriangleMeshInternal.verticesIntPtr.html",
    "title": "Field verticesIntPtr | Core",
    "keywords": "Field verticesIntPtr Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr verticesIntPtr Returns IntPtr"
  },
  "api/YVR.Core.YVRBaseRig.ConfigureAnchor.html": {
    "href": "api/YVR.Core.YVRBaseRig.ConfigureAnchor.html",
    "title": "Method ConfigureAnchor | Core",
    "keywords": "Method ConfigureAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll ConfigureAnchor(Transform, string) Configure an anchor protected Transform ConfigureAnchor(Transform parent, string anchorName) Parameters parent Transform Target anchor's parent anchorName string Target anchor's name Returns Transform Configured transform"
  },
  "api/YVR.Core.YVRBaseRig.Initialize.html": {
    "href": "api/YVR.Core.YVRBaseRig.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize(YVRManager) Initialize function which will be triggered by YVRManager public virtual void Initialize(YVRManager yvrManager) Parameters yvrManager YVRManager The YVRManager trigger"
  },
  "api/YVR.Core.YVRBaseRig.InitializeAnchor.html": {
    "href": "api/YVR.Core.YVRBaseRig.InitializeAnchor.html",
    "title": "Method InitializeAnchor | Core",
    "keywords": "Method InitializeAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll InitializeAnchor() Initialization function for derived classes to override protected virtual void InitializeAnchor()"
  },
  "api/YVR.Core.YVRBaseRig.OnDestroy.html": {
    "href": "api/YVR.Core.YVRBaseRig.OnDestroy.html",
    "title": "Method OnDestroy | Core",
    "keywords": "Method OnDestroy Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnDestroy() Equals to MonoBehavior.OnDestroy protected virtual void OnDestroy()"
  },
  "api/YVR.Core.YVRBaseRig.RigUpdateType.html": {
    "href": "api/YVR.Core.YVRBaseRig.RigUpdateType.html",
    "title": "Enum YVRBaseRig.RigUpdateType | Core",
    "keywords": "Enum YVRBaseRig.RigUpdateType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRBaseRig.RigUpdateType Fields BeforeRender = 1 Dynamic = 0"
  },
  "api/YVR.Core.YVRBaseRig.UpdateAnchorPose.html": {
    "href": "api/YVR.Core.YVRBaseRig.UpdateAnchorPose.html",
    "title": "Method UpdateAnchorPose | Core",
    "keywords": "Method UpdateAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateAnchorPose(RigUpdateType) Get the pose of the anchors and assign it to each anchor protected virtual void UpdateAnchorPose(YVRBaseRig.RigUpdateType updateType) Parameters updateType YVRBaseRig.RigUpdateType"
  },
  "api/YVR.Core.YVRBaseRig.UpdatePhysicalAnchorPose.html": {
    "href": "api/YVR.Core.YVRBaseRig.UpdatePhysicalAnchorPose.html",
    "title": "Method UpdatePhysicalAnchorPose | Core",
    "keywords": "Method UpdatePhysicalAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdatePhysicalAnchorPose() public void UpdatePhysicalAnchorPose()"
  },
  "api/YVR.Core.YVRBaseRig.UpdateRenderingAnchorPose.html": {
    "href": "api/YVR.Core.YVRBaseRig.UpdateRenderingAnchorPose.html",
    "title": "Method UpdateRenderingAnchorPose | Core",
    "keywords": "Method UpdateRenderingAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateRenderingAnchorPose() public void UpdateRenderingAnchorPose()"
  },
  "api/YVR.Core.YVRBaseRig.YVRXRDeviceNode.html": {
    "href": "api/YVR.Core.YVRBaseRig.YVRXRDeviceNode.html",
    "title": "Enum YVRBaseRig.YVRXRDeviceNode | Core",
    "keywords": "Enum YVRBaseRig.YVRXRDeviceNode Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected enum YVRBaseRig.YVRXRDeviceNode Fields Headset = 0 LeftController = 1 RightController = 2"
  },
  "api/YVR.Core.YVRBaseRig.hmdPose.html": {
    "href": "api/YVR.Core.YVRBaseRig.hmdPose.html",
    "title": "Field hmdPose | Core",
    "keywords": "Field hmdPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected static PoseData hmdPose Returns PoseData"
  },
  "api/YVR.Core.YVRBaseRig.html": {
    "href": "api/YVR.Core.YVRBaseRig.html",
    "title": "Class YVRBaseRig | Core",
    "keywords": "Class YVRBaseRig Namespace YVR.Core Assembly YVR.Core.Runtime.dll Base class of rigid class public class YVRBaseRig : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRBaseRig Derived YVRCameraRig YVRControllerRig Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields hmdPose lControllerPose leftEyePose rControllerPose rightEyePose yvrXRDevices Properties trackingSpace The parent of all tracking anchors Methods ConfigureAnchor(Transform, string) Configure an anchor Initialize(YVRManager) Initialize function which will be triggered by YVRManager InitializeAnchor() Initialization function for derived classes to override OnDestroy() Equals to MonoBehavior.OnDestroy UpdateAnchorPose(RigUpdateType) Get the pose of the anchors and assign it to each anchor UpdatePhysicalAnchorPose() UpdateRenderingAnchorPose()"
  },
  "api/YVR.Core.YVRBaseRig.lControllerPose.html": {
    "href": "api/YVR.Core.YVRBaseRig.lControllerPose.html",
    "title": "Field lControllerPose | Core",
    "keywords": "Field lControllerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected static PoseData lControllerPose Returns PoseData"
  },
  "api/YVR.Core.YVRBaseRig.leftEyePose.html": {
    "href": "api/YVR.Core.YVRBaseRig.leftEyePose.html",
    "title": "Field leftEyePose | Core",
    "keywords": "Field leftEyePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected static PoseData leftEyePose Returns PoseData"
  },
  "api/YVR.Core.YVRBaseRig.rControllerPose.html": {
    "href": "api/YVR.Core.YVRBaseRig.rControllerPose.html",
    "title": "Field rControllerPose | Core",
    "keywords": "Field rControllerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected static PoseData rControllerPose Returns PoseData"
  },
  "api/YVR.Core.YVRBaseRig.rightEyePose.html": {
    "href": "api/YVR.Core.YVRBaseRig.rightEyePose.html",
    "title": "Field rightEyePose | Core",
    "keywords": "Field rightEyePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected static PoseData rightEyePose Returns PoseData"
  },
  "api/YVR.Core.YVRBaseRig.trackingSpace.html": {
    "href": "api/YVR.Core.YVRBaseRig.trackingSpace.html",
    "title": "Property trackingSpace | Core",
    "keywords": "Property trackingSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll trackingSpace The parent of all tracking anchors public Transform trackingSpace { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRBaseRig.yvrXRDevices.html": {
    "href": "api/YVR.Core.YVRBaseRig.yvrXRDevices.html",
    "title": "Field yvrXRDevices | Core",
    "keywords": "Field yvrXRDevices Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] protected static List<InputDevice> yvrXRDevices Returns List<InputDevice>"
  },
  "api/YVR.Core.YVRBoundary.BoundaryNode.html": {
    "href": "api/YVR.Core.YVRBoundary.BoundaryNode.html",
    "title": "Enum YVRBoundary.BoundaryNode | Core",
    "keywords": "Enum YVRBoundary.BoundaryNode Namespace YVR.Core Assembly YVR.Core.Runtime.dll Specifies a tracked node that can be queried through the boundary system. public enum YVRBoundary.BoundaryNode Fields ControllerLeft = 0 Tracks the left controller node ControllerRight = 1 Tracks the right controller node Head = 2 Tracks the hand node"
  },
  "api/YVR.Core.YVRBoundary.BoundaryTestResult.ClosestDistance.html": {
    "href": "api/YVR.Core.YVRBoundary.BoundaryTestResult.ClosestDistance.html",
    "title": "Field ClosestDistance | Core",
    "keywords": "Field ClosestDistance Namespace YVR.Core Assembly YVR.Core.Runtime.dll The Distance between the queried test object and the closest boundary point public float ClosestDistance Returns float The Distance between the queried test object and the closest boundary point"
  },
  "api/YVR.Core.YVRBoundary.BoundaryTestResult.ClosestPoint.html": {
    "href": "api/YVR.Core.YVRBoundary.BoundaryTestResult.ClosestPoint.html",
    "title": "Field ClosestPoint | Core",
    "keywords": "Field ClosestPoint Namespace YVR.Core Assembly YVR.Core.Runtime.dll The closest point to the queried test object public Vector3 ClosestPoint Returns Vector3 The closest point to the queried test object"
  },
  "api/YVR.Core.YVRBoundary.BoundaryTestResult.ClosestPointNormal.html": {
    "href": "api/YVR.Core.YVRBoundary.BoundaryTestResult.ClosestPointNormal.html",
    "title": "Field ClosestPointNormal | Core",
    "keywords": "Field ClosestPointNormal Namespace YVR.Core Assembly YVR.Core.Runtime.dll The normal of the closest point to the queried test object public Vector3 ClosestPointNormal Returns Vector3 The normal of the closest point to the queried test object"
  },
  "api/YVR.Core.YVRBoundary.BoundaryTestResult.IsTriggering.html": {
    "href": "api/YVR.Core.YVRBoundary.BoundaryTestResult.IsTriggering.html",
    "title": "Field IsTriggering | Core",
    "keywords": "Field IsTriggering Namespace YVR.Core Assembly YVR.Core.Runtime.dll Whether the quired test would violate the boundary public bool IsTriggering Returns bool Whether the quired test would violate the boundary"
  },
  "api/YVR.Core.YVRBoundary.BoundaryTestResult.html": {
    "href": "api/YVR.Core.YVRBoundary.BoundaryTestResult.html",
    "title": "Struct YVRBoundary.BoundaryTestResult | Core",
    "keywords": "Struct YVRBoundary.BoundaryTestResult Namespace YVR.Core Assembly YVR.Core.Runtime.dll The test results of boundary system queries. public struct YVRBoundary.BoundaryTestResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ClosestDistance The Distance between the queried test object and the closest boundary point ClosestPoint The closest point to the queried test object ClosestPointNormal The normal of the closest point to the queried test object IsTriggering Whether the quired test would violate the boundary"
  },
  "api/YVR.Core.YVRBoundary.GetConfigured.html": {
    "href": "api/YVR.Core.YVRBoundary.GetConfigured.html",
    "title": "Method GetConfigured | Core",
    "keywords": "Method GetConfigured Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetConfigured() Returns true if the boundary system is currently configured with valid boundary data. public bool GetConfigured() Returns bool Is the boundary data valid"
  },
  "api/YVR.Core.YVRBoundary.GetDimensions.html": {
    "href": "api/YVR.Core.YVRBoundary.GetDimensions.html",
    "title": "Method GetDimensions | Core",
    "keywords": "Method GetDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetDimensions() Returns a vector that indicates the spatial dimensions public Vector3 GetDimensions() Returns Vector3"
  },
  "api/YVR.Core.YVRBoundary.GetGeometry.html": {
    "href": "api/YVR.Core.YVRBoundary.GetGeometry.html",
    "title": "Method GetGeometry | Core",
    "keywords": "Method GetGeometry Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetGeometry() Returns an array of 3d points (in clockwise order) that define the specified boundary type. The points must add the offset of the camera root node when moving the root node. public Vector3[] GetGeometry() Returns Vector3[]"
  },
  "api/YVR.Core.YVRBoundary.GetVisible.html": {
    "href": "api/YVR.Core.YVRBoundary.GetVisible.html",
    "title": "Method GetVisible | Core",
    "keywords": "Method GetVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetVisible() Returns true if the boundary system is currently visible. public bool GetVisible() Returns bool"
  },
  "api/YVR.Core.YVRBoundary.SetVisible.html": {
    "href": "api/YVR.Core.YVRBoundary.SetVisible.html",
    "title": "Method SetVisible | Core",
    "keywords": "Method SetVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetVisible(bool) Requests the boundary system visibility to be set to the specified value. public void SetVisible(bool visible) Parameters visible bool"
  },
  "api/YVR.Core.YVRBoundary.TestNode.html": {
    "href": "api/YVR.Core.YVRBoundary.TestNode.html",
    "title": "Method TestNode | Core",
    "keywords": "Method TestNode Namespace YVR.Core Assembly YVR.Core.Runtime.dll TestNode(BoundaryNode) Returns the results of testing a tracked node public YVRBoundary.BoundaryTestResult TestNode(YVRBoundary.BoundaryNode node) Parameters node YVRBoundary.BoundaryNode Returns YVRBoundary.BoundaryTestResult The test results of boundary system queries."
  },
  "api/YVR.Core.YVRBoundary.TestPoint.html": {
    "href": "api/YVR.Core.YVRBoundary.TestPoint.html",
    "title": "Method TestPoint | Core",
    "keywords": "Method TestPoint Namespace YVR.Core Assembly YVR.Core.Runtime.dll TestPoint(Vector3) Returns the results of testing a 3d point public YVRBoundary.BoundaryTestResult TestPoint(Vector3 point) Parameters point Vector3 Returns YVRBoundary.BoundaryTestResult The test results of boundary system queries."
  },
  "api/YVR.Core.YVRBoundary.html": {
    "href": "api/YVR.Core.YVRBoundary.html",
    "title": "Class YVRBoundary | Core",
    "keywords": "Class YVRBoundary Namespace YVR.Core Assembly YVR.Core.Runtime.dll Provides access to the boundary system. public class YVRBoundary Inheritance object YVRBoundary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetConfigured() Returns true if the boundary system is currently configured with valid boundary data. GetDimensions() Returns a vector that indicates the spatial dimensions GetGeometry() Returns an array of 3d points (in clockwise order) that define the specified boundary type. The points must add the offset of the camera root node when moving the root node. GetVisible() Returns true if the boundary system is currently visible. SetVisible(bool) Requests the boundary system visibility to be set to the specified value. TestNode(BoundaryNode) Returns the results of testing a tracked node TestPoint(Vector3) Returns the results of testing a 3d point"
  },
  "api/YVR.Core.YVRBoundary2D.html": {
    "href": "api/YVR.Core.YVRBoundary2D.html",
    "title": "Struct YVRBoundary2D | Core",
    "keywords": "Struct YVRBoundary2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRBoundary2D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vertexCapacityInput vertexCountOutput vertices"
  },
  "api/YVR.Core.YVRBoundary2D.vertexCapacityInput.html": {
    "href": "api/YVR.Core.YVRBoundary2D.vertexCapacityInput.html",
    "title": "Field vertexCapacityInput | Core",
    "keywords": "Field vertexCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int vertexCapacityInput Returns int"
  },
  "api/YVR.Core.YVRBoundary2D.vertexCountOutput.html": {
    "href": "api/YVR.Core.YVRBoundary2D.vertexCountOutput.html",
    "title": "Field vertexCountOutput | Core",
    "keywords": "Field vertexCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int vertexCountOutput Returns int"
  },
  "api/YVR.Core.YVRBoundary2D.vertices.html": {
    "href": "api/YVR.Core.YVRBoundary2D.vertices.html",
    "title": "Field vertices | Core",
    "keywords": "Field vertices Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr vertices Returns IntPtr"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeFov.DownFov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeFov.DownFov.html",
    "title": "Field DownFov | Core",
    "keywords": "Field DownFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll the fov of down screen public float DownFov Returns float the fov of down screen"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeFov.LeftFov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeFov.LeftFov.html",
    "title": "Field LeftFov | Core",
    "keywords": "Field LeftFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll the fov of left screen public float LeftFov Returns float the fov of left screen"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeFov.RightFov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeFov.RightFov.html",
    "title": "Field RightFov | Core",
    "keywords": "Field RightFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll the fov of right screen public float RightFov Returns float the fov of right screen"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeFov.UpFov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeFov.UpFov.html",
    "title": "Field UpFov | Core",
    "keywords": "Field UpFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll the fov of up screen public float UpFov Returns float the fov of up screen"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeFov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeFov.html",
    "title": "Struct YVRCameraRenderer.EyeFov | Core",
    "keywords": "Struct YVRCameraRenderer.EyeFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll Contains full fov information per eye in degree Under Symmetric Fov mode, UpFov == DownFov and LeftFov == RightFov. public struct YVRCameraRenderer.EyeFov Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields DownFov the fov of down screen LeftFov the fov of left screen RightFov the fov of right screen UpFov the fov of up screen"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.fov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.fov.html",
    "title": "Field fov | Core",
    "keywords": "Field fov Namespace YVR.Core Assembly YVR.Core.Runtime.dll The angle of the horizontal and vertical field of view in degrees. For Symmetric FOV interface compatibility Note this includes the fov angle from both sides public Vector2 fov Returns Vector2 The angle of the horizontal and vertical field of view in degrees. For Symmetric FOV interface compatibility Note this includes the fov angle from both sides"
  },
  "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.fullFov.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.fullFov.html",
    "title": "Field fullFov | Core",
    "keywords": "Field fullFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll The full information of field of view in degrees. public YVRCameraRenderer.EyeFov fullFov Returns YVRCameraRenderer.EyeFov The full information of field of view in degrees."
  },
  "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.html",
    "title": "Struct YVRCameraRenderer.EyeRenderDescription | Core",
    "keywords": "Struct YVRCameraRenderer.EyeRenderDescription Namespace YVR.Core Assembly YVR.Core.Runtime.dll Specifies the size and field-of-view for one eye texture. public struct YVRCameraRenderer.EyeRenderDescription Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fov The angle of the horizontal and vertical field of view in degrees. For Symmetric FOV interface compatibility Note this includes the fov angle from both sides fullFov The full information of field of view in degrees. resolution The horizontal and vertical size of the texture."
  },
  "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.resolution.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.EyeRenderDescription.resolution.html",
    "title": "Field resolution | Core",
    "keywords": "Field resolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll The horizontal and vertical size of the texture. public Vector2 resolution Returns Vector2 The horizontal and vertical size of the texture."
  },
  "api/YVR.Core.YVRCameraRenderer.GetEyeRenderDesc.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.GetEyeRenderDesc.html",
    "title": "Method GetEyeRenderDesc | Core",
    "keywords": "Method GetEyeRenderDesc Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeRenderDesc(EyeSide) Gets the resolution and field of view for the given eye. public YVRCameraRenderer.EyeRenderDescription GetEyeRenderDesc(EyeSide eye) Parameters eye EyeSide Returns YVRCameraRenderer.EyeRenderDescription"
  },
  "api/YVR.Core.YVRCameraRenderer.Initialize.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize(YVRManager) Initialize function public void Initialize(YVRManager yvrManager) Parameters yvrManager YVRManager"
  },
  "api/YVR.Core.YVRCameraRenderer.centerEyeCamera.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.centerEyeCamera.html",
    "title": "Property centerEyeCamera | Core",
    "keywords": "Property centerEyeCamera Namespace YVR.Core Assembly YVR.Core.Runtime.dll centerEyeCamera The camera of center eye public Camera centerEyeCamera { get; } Property Value Camera"
  },
  "api/YVR.Core.YVRCameraRenderer.displayFrequenciesAvailable.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.displayFrequenciesAvailable.html",
    "title": "Property displayFrequenciesAvailable | Core",
    "keywords": "Property displayFrequenciesAvailable Namespace YVR.Core Assembly YVR.Core.Runtime.dll displayFrequenciesAvailable Gets the list of available display frequencies supported by this hardware. public float[] displayFrequenciesAvailable { get; } Property Value float[]"
  },
  "api/YVR.Core.YVRCameraRenderer.displayFrequency.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.displayFrequency.html",
    "title": "Property displayFrequency | Core",
    "keywords": "Property displayFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll displayFrequency Get or Set the current display frequency. public float displayFrequency { get; set; } Property Value float"
  },
  "api/YVR.Core.YVRCameraRenderer.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.html",
    "title": "Class YVRCameraRenderer | Core",
    "keywords": "Class YVRCameraRenderer Namespace YVR.Core Assembly YVR.Core.Runtime.dll Encapsulate all rendering related operation and data public class YVRCameraRenderer Inheritance object YVRCameraRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties centerEyeCamera The camera of center eye displayFrequenciesAvailable Gets the list of available display frequencies supported by this hardware. displayFrequency Get or Set the current display frequency. isFocusing Whether the application is displayed in focus. isVisible Whether the app is currently visible. leftEyeCamera The camera of left eye rightEyeCamera The camera of right eye stereoRenderingMode The actual used rendering mode, which may be different from the mode in settings in some case i.e. set to QuadViews when the hardware doesn't support QuadViews will be changed to MultiView Methods GetEyeRenderDesc(EyeSide) Gets the resolution and field of view for the given eye. Initialize(YVRManager) Initialize function"
  },
  "api/YVR.Core.YVRCameraRenderer.isFocusing.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.isFocusing.html",
    "title": "Property isFocusing | Core",
    "keywords": "Property isFocusing Namespace YVR.Core Assembly YVR.Core.Runtime.dll isFocusing Whether the application is displayed in focus. public bool isFocusing { get; } Property Value bool"
  },
  "api/YVR.Core.YVRCameraRenderer.isVisible.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.isVisible.html",
    "title": "Property isVisible | Core",
    "keywords": "Property isVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll isVisible Whether the app is currently visible. public bool isVisible { get; } Property Value bool"
  },
  "api/YVR.Core.YVRCameraRenderer.leftEyeCamera.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.leftEyeCamera.html",
    "title": "Property leftEyeCamera | Core",
    "keywords": "Property leftEyeCamera Namespace YVR.Core Assembly YVR.Core.Runtime.dll leftEyeCamera The camera of left eye public Camera leftEyeCamera { get; } Property Value Camera"
  },
  "api/YVR.Core.YVRCameraRenderer.rightEyeCamera.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.rightEyeCamera.html",
    "title": "Property rightEyeCamera | Core",
    "keywords": "Property rightEyeCamera Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightEyeCamera The camera of right eye public Camera rightEyeCamera { get; } Property Value Camera"
  },
  "api/YVR.Core.YVRCameraRenderer.stereoRenderingMode.html": {
    "href": "api/YVR.Core.YVRCameraRenderer.stereoRenderingMode.html",
    "title": "Property stereoRenderingMode | Core",
    "keywords": "Property stereoRenderingMode Namespace YVR.Core Assembly YVR.Core.Runtime.dll stereoRenderingMode The actual used rendering mode, which may be different from the mode in settings in some case i.e. set to QuadViews when the hardware doesn't support QuadViews will be changed to MultiView public StereoRenderingMode stereoRenderingMode { get; } Property Value StereoRenderingMode"
  },
  "api/YVR.Core.YVRCameraRig.GetAcceleration.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetAcceleration.html",
    "title": "Method GetAcceleration | Core",
    "keywords": "Method GetAcceleration Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAcceleration() Get the acceleration of the eye Center public static Vector3 GetAcceleration() Returns Vector3 Acceleration of the eye Center"
  },
  "api/YVR.Core.YVRCameraRig.GetAngularAcceleration.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetAngularAcceleration.html",
    "title": "Method GetAngularAcceleration | Core",
    "keywords": "Method GetAngularAcceleration Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAngularAcceleration() Get the angular acceleration of the eye Center public static Vector3 GetAngularAcceleration() Returns Vector3 Angular acceleration of the eye Center"
  },
  "api/YVR.Core.YVRCameraRig.GetAngularVelocity.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetAngularVelocity.html",
    "title": "Method GetAngularVelocity | Core",
    "keywords": "Method GetAngularVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAngularVelocity() Get the angular velocity of the eye Center public static Vector3 GetAngularVelocity() Returns Vector3 Angular velocity of the eye Center"
  },
  "api/YVR.Core.YVRCameraRig.GetOrientationTracked.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetOrientationTracked.html",
    "title": "Method GetOrientationTracked | Core",
    "keywords": "Method GetOrientationTracked Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetOrientationTracked() Whether head's orientation is tracked public static bool GetOrientationTracked() Returns bool true if head's position is tracked"
  },
  "api/YVR.Core.YVRCameraRig.GetPosition.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetPosition.html",
    "title": "Method GetPosition | Core",
    "keywords": "Method GetPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPosition() Get the position of the eye Center public static Vector3 GetPosition() Returns Vector3 Position of the eye Center"
  },
  "api/YVR.Core.YVRCameraRig.GetPositionTracked.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetPositionTracked.html",
    "title": "Method GetPositionTracked | Core",
    "keywords": "Method GetPositionTracked Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPositionTracked() Whether head's position is tracked public static bool GetPositionTracked() Returns bool true if head's position is tracked"
  },
  "api/YVR.Core.YVRCameraRig.GetRotation.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetRotation.html",
    "title": "Method GetRotation | Core",
    "keywords": "Method GetRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRotation() Get the rotation of the eye Center public static Quaternion GetRotation() Returns Quaternion Rotation of the eye Center"
  },
  "api/YVR.Core.YVRCameraRig.GetVelocity.html": {
    "href": "api/YVR.Core.YVRCameraRig.GetVelocity.html",
    "title": "Method GetVelocity | Core",
    "keywords": "Method GetVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetVelocity() Get the velocity of the eye Center public static Vector3 GetVelocity() Returns Vector3 Velocity of the eye Center"
  },
  "api/YVR.Core.YVRCameraRig.Initialize.html": {
    "href": "api/YVR.Core.YVRCameraRig.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize(YVRManager) Override @YVR.Core.YVRBaseRig.Initialize public override void Initialize(YVRManager yvrManager) Parameters yvrManager YVRManager"
  },
  "api/YVR.Core.YVRCameraRig.InitializeAnchor.html": {
    "href": "api/YVR.Core.YVRCameraRig.InitializeAnchor.html",
    "title": "Method InitializeAnchor | Core",
    "keywords": "Method InitializeAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll InitializeAnchor() Override InitializeAnchor() protected override void InitializeAnchor()"
  },
  "api/YVR.Core.YVRCameraRig.RecenterPose.html": {
    "href": "api/YVR.Core.YVRCameraRig.RecenterPose.html",
    "title": "Method RecenterPose | Core",
    "keywords": "Method RecenterPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll RecenterPose() Recenter the pose public static void RecenterPose()"
  },
  "api/YVR.Core.YVRCameraRig.UpdateAnchorPose.html": {
    "href": "api/YVR.Core.YVRCameraRig.UpdateAnchorPose.html",
    "title": "Method UpdateAnchorPose | Core",
    "keywords": "Method UpdateAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateAnchorPose(RigUpdateType) Get the pose of the anchors(left eye,right eye,center eye) and assign it to each anchor protected override void UpdateAnchorPose(YVRBaseRig.RigUpdateType updateType) Parameters updateType YVRBaseRig.RigUpdateType"
  },
  "api/YVR.Core.YVRCameraRig.afterRigBeforeRenderUpdated.html": {
    "href": "api/YVR.Core.YVRCameraRig.afterRigBeforeRenderUpdated.html",
    "title": "Field afterRigBeforeRenderUpdated | Core",
    "keywords": "Field afterRigBeforeRenderUpdated Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action afterRigBeforeRenderUpdated Returns Action"
  },
  "api/YVR.Core.YVRCameraRig.afterRigDynamicUpdated.html": {
    "href": "api/YVR.Core.YVRCameraRig.afterRigDynamicUpdated.html",
    "title": "Field afterRigDynamicUpdated | Core",
    "keywords": "Field afterRigDynamicUpdated Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action afterRigDynamicUpdated Returns Action"
  },
  "api/YVR.Core.YVRCameraRig.centerEyeAnchor.html": {
    "href": "api/YVR.Core.YVRCameraRig.centerEyeAnchor.html",
    "title": "Property centerEyeAnchor | Core",
    "keywords": "Property centerEyeAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll centerEyeAnchor Transform of center eye public Transform centerEyeAnchor { get; set; } Property Value Transform"
  },
  "api/YVR.Core.YVRCameraRig.centerEyeDevice.html": {
    "href": "api/YVR.Core.YVRCameraRig.centerEyeDevice.html",
    "title": "Property centerEyeDevice | Core",
    "keywords": "Property centerEyeDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll centerEyeDevice public static InputDevice centerEyeDevice { get; } Property Value InputDevice"
  },
  "api/YVR.Core.YVRCameraRig.html": {
    "href": "api/YVR.Core.YVRCameraRig.html",
    "title": "Class YVRCameraRig | Core",
    "keywords": "Class YVRCameraRig Namespace YVR.Core Assembly YVR.Core.Runtime.dll Encapsulate all camera rigid related operations and data public class YVRCameraRig : YVRBaseRig Inheritance object Object Component Behaviour MonoBehaviour YVRBaseRig YVRCameraRig Inherited Members YVRBaseRig.trackingSpace YVRBaseRig.hmdPose YVRBaseRig.leftEyePose YVRBaseRig.rightEyePose YVRBaseRig.lControllerPose YVRBaseRig.rControllerPose YVRBaseRig.yvrXRDevices YVRBaseRig.UpdatePhysicalAnchorPose() YVRBaseRig.UpdateRenderingAnchorPose() YVRBaseRig.ConfigureAnchor(Transform, string) YVRBaseRig.OnDestroy() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields afterRigBeforeRenderUpdated afterRigDynamicUpdated Properties centerEyeAnchor Transform of center eye centerEyeDevice leftEyeAnchor Transform of left eye rightEyeAnchor Transform of right eye Methods GetAcceleration() Get the acceleration of the eye Center GetAngularAcceleration() Get the angular acceleration of the eye Center GetAngularVelocity() Get the angular velocity of the eye Center GetOrientationTracked() Whether head's orientation is tracked GetPosition() Get the position of the eye Center GetPositionTracked() Whether head's position is tracked GetRotation() Get the rotation of the eye Center GetVelocity() Get the velocity of the eye Center Initialize(YVRManager) Override @YVR.Core.YVRBaseRig.Initialize InitializeAnchor() Override InitializeAnchor() RecenterPose() Recenter the pose UpdateAnchorPose(RigUpdateType) Get the pose of the anchors(left eye,right eye,center eye) and assign it to each anchor"
  },
  "api/YVR.Core.YVRCameraRig.leftEyeAnchor.html": {
    "href": "api/YVR.Core.YVRCameraRig.leftEyeAnchor.html",
    "title": "Property leftEyeAnchor | Core",
    "keywords": "Property leftEyeAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll leftEyeAnchor Transform of left eye public Transform leftEyeAnchor { get; set; } Property Value Transform"
  },
  "api/YVR.Core.YVRCameraRig.rightEyeAnchor.html": {
    "href": "api/YVR.Core.YVRCameraRig.rightEyeAnchor.html",
    "title": "Property rightEyeAnchor | Core",
    "keywords": "Property rightEyeAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightEyeAnchor Transform of right eye public Transform rightEyeAnchor { get; set; } Property Value Transform"
  },
  "api/YVR.Core.YVRCompositeLayer.ApplyLayerSettings.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.ApplyLayerSettings.html",
    "title": "Method ApplyLayerSettings | Core",
    "keywords": "Method ApplyLayerSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll ApplyLayerSettings() protected void ApplyLayerSettings()"
  },
  "api/YVR.Core.YVRCompositeLayer.CopyTextureToColorHandle.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.CopyTextureToColorHandle.html",
    "title": "Method CopyTextureToColorHandle | Core",
    "keywords": "Method CopyTextureToColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll CopyTextureToColorHandle() protected virtual void CopyTextureToColorHandle()"
  },
  "api/YVR.Core.YVRCompositeLayer.DestRectLeft_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.DestRectLeft_1.html",
    "title": "Property DestRectLeft | Core",
    "keywords": "Property DestRectLeft Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestRectLeft public Rect DestRectLeft { get; set; } Property Value Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.DestRectRight_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.DestRectRight_1.html",
    "title": "Property DestRectRight | Core",
    "keywords": "Property DestRectRight Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestRectRight public Rect DestRectRight { get; set; } Property Value Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.GetExternalAndroidSurface.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.GetExternalAndroidSurface.html",
    "title": "Method GetExternalAndroidSurface | Core",
    "keywords": "Method GetExternalAndroidSurface Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetExternalAndroidSurface() public virtual IntPtr GetExternalAndroidSurface() Returns IntPtr"
  },
  "api/YVR.Core.YVRCompositeLayer.Hide.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.Hide.html",
    "title": "Method Hide | Core",
    "keywords": "Method Hide Namespace YVR.Core Assembly YVR.Core.Runtime.dll Hide() Hide the composite layer protected void Hide()"
  },
  "api/YVR.Core.YVRCompositeLayer.InitCompositeLayer.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.InitCompositeLayer.html",
    "title": "Method InitCompositeLayer | Core",
    "keywords": "Method InitCompositeLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll InitCompositeLayer(int) Init native composite layer, register composite layer update operations. public void InitCompositeLayer(int depth = -2147483648) Parameters depth int The depth of the composite layer"
  },
  "api/YVR.Core.YVRCompositeLayer.LateUpdate.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.LateUpdate.html",
    "title": "Method LateUpdate | Core",
    "keywords": "Method LateUpdate Namespace YVR.Core Assembly YVR.Core.Runtime.dll LateUpdate() protected virtual void LateUpdate()"
  },
  "api/YVR.Core.YVRCompositeLayer.OnDestroy.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnDestroy.html",
    "title": "Method OnDestroy | Core",
    "keywords": "Method OnDestroy Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnDestroy() [ExcludeFromDocs] protected virtual void OnDestroy()"
  },
  "api/YVR.Core.YVRCompositeLayer.OnDisable.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnDisable.html",
    "title": "Method OnDisable | Core",
    "keywords": "Method OnDisable Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnDisable() protected void OnDisable()"
  },
  "api/YVR.Core.YVRCompositeLayer.OnEnable.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnEnable.html",
    "title": "Method OnEnable | Core",
    "keywords": "Method OnEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnEnable() [ExcludeFromDocs] protected void OnEnable()"
  },
  "api/YVR.Core.YVRCompositeLayer.OnLayerAddedGfx_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnLayerAddedGfx_1.html",
    "title": "Method OnLayerAddedGfx | Core",
    "keywords": "Method OnLayerAddedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnLayerAddedGfx() protected virtual void OnLayerAddedGfx()"
  },
  "api/YVR.Core.YVRCompositeLayer.OnLayerCreatedGfx_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnLayerCreatedGfx_1.html",
    "title": "Method OnLayerCreatedGfx | Core",
    "keywords": "Method OnLayerCreatedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnLayerCreatedGfx(int, int) protected virtual void OnLayerCreatedGfx(int layerId, int rightEyeLayerId) Parameters layerId int rightEyeLayerId int"
  },
  "api/YVR.Core.YVRCompositeLayer.OnLayerDepthSetGfx_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnLayerDepthSetGfx_1.html",
    "title": "Method OnLayerDepthSetGfx | Core",
    "keywords": "Method OnLayerDepthSetGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnLayerDepthSetGfx(bool) protected virtual void OnLayerDepthSetGfx(bool result) Parameters result bool"
  },
  "api/YVR.Core.YVRCompositeLayer.OnLayerDestroyedGfx_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnLayerDestroyedGfx_1.html",
    "title": "Method OnLayerDestroyedGfx | Core",
    "keywords": "Method OnLayerDestroyedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnLayerDestroyedGfx() protected virtual void OnLayerDestroyedGfx()"
  },
  "api/YVR.Core.YVRCompositeLayer.OnLayerRemovedGfx_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.OnLayerRemovedGfx_1.html",
    "title": "Method OnLayerRemovedGfx | Core",
    "keywords": "Method OnLayerRemovedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnLayerRemovedGfx() protected virtual void OnLayerRemovedGfx()"
  },
  "api/YVR.Core.YVRCompositeLayer.RecreateLayer.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.RecreateLayer.html",
    "title": "Method RecreateLayer | Core",
    "keywords": "Method RecreateLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll RecreateLayer() public void RecreateLayer() RecreateLayer(int) public void RecreateLayer(int depth) Parameters depth int RecreateLayer(int, bool) public void RecreateLayer(int depth, bool separateLayerBefore) Parameters depth int separateLayerBefore bool"
  },
  "api/YVR.Core.YVRCompositeLayer.SetLayerDepth.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SetLayerDepth.html",
    "title": "Method SetLayerDepth | Core",
    "keywords": "Method SetLayerDepth Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerDepth(int) Set the render depth of the composite layer public void SetLayerDepth(int depth) Parameters depth int The new render depth"
  },
  "api/YVR.Core.YVRCompositeLayer.SetSurfaceDimensions.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SetSurfaceDimensions.html",
    "title": "Method SetSurfaceDimensions | Core",
    "keywords": "Method SetSurfaceDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSurfaceDimensions(int, int) public void SetSurfaceDimensions(int width, int height) Parameters width int height int"
  },
  "api/YVR.Core.YVRCompositeLayer.SetTexture.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SetTexture.html",
    "title": "Method SetTexture | Core",
    "keywords": "Method SetTexture Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetTexture(Texture, int) public void SetTexture(Texture tex, int texID = -1) Parameters tex Texture texID int SetTexture(Texture, YVRRenderLayerEyeMask, int) public void SetTexture(Texture tex, YVRRenderLayerEyeMask eyeMask, int texID = -1) Parameters tex Texture eyeMask YVRRenderLayerEyeMask texID int"
  },
  "api/YVR.Core.YVRCompositeLayer.SharpenType.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SharpenType.html",
    "title": "Property SharpenType | Core",
    "keywords": "Property SharpenType Namespace YVR.Core Assembly YVR.Core.Runtime.dll SharpenType public YVRQualityManager.LayerSettingsType SharpenType { get; set; } Property Value YVRQualityManager.LayerSettingsType"
  },
  "api/YVR.Core.YVRCompositeLayer.Show.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.Show.html",
    "title": "Method Show | Core",
    "keywords": "Method Show Namespace YVR.Core Assembly YVR.Core.Runtime.dll Show() Show the composite layer protected void Show()"
  },
  "api/YVR.Core.YVRCompositeLayer.SourceRectLeft_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SourceRectLeft_1.html",
    "title": "Property SourceRectLeft | Core",
    "keywords": "Property SourceRectLeft Namespace YVR.Core Assembly YVR.Core.Runtime.dll SourceRectLeft public Rect SourceRectLeft { get; set; } Property Value Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.SourceRectRight_1.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SourceRectRight_1.html",
    "title": "Property SourceRectRight | Core",
    "keywords": "Property SourceRectRight Namespace YVR.Core Assembly YVR.Core.Runtime.dll SourceRectRight public Rect SourceRectRight { get; set; } Property Value Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.SuperSamplingType.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SuperSamplingType.html",
    "title": "Property SuperSamplingType | Core",
    "keywords": "Property SuperSamplingType Namespace YVR.Core Assembly YVR.Core.Runtime.dll SuperSamplingType public YVRQualityManager.LayerSettingsType SuperSamplingType { get; set; } Property Value YVRQualityManager.LayerSettingsType"
  },
  "api/YVR.Core.YVRCompositeLayer.SwapBufferLayer.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.SwapBufferLayer.html",
    "title": "Method SwapBufferLayer | Core",
    "keywords": "Method SwapBufferLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll SwapBufferLayer() public void SwapBufferLayer()"
  },
  "api/YVR.Core.YVRCompositeLayer.UpdateCommandBuffer.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.UpdateCommandBuffer.html",
    "title": "Method UpdateCommandBuffer | Core",
    "keywords": "Method UpdateCommandBuffer Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateCommandBuffer() public void UpdateCommandBuffer()"
  },
  "api/YVR.Core.YVRCompositeLayer.UpdateCommandBufferMainThread.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.UpdateCommandBufferMainThread.html",
    "title": "Method UpdateCommandBufferMainThread | Core",
    "keywords": "Method UpdateCommandBufferMainThread Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateCommandBufferMainThread(CommandBuffer) public void UpdateCommandBufferMainThread(CommandBuffer commandBuffer) Parameters commandBuffer CommandBuffer"
  },
  "api/YVR.Core.YVRCompositeLayer.UpdateCompositeLayerContent.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.UpdateCompositeLayerContent.html",
    "title": "Method UpdateCompositeLayerContent | Core",
    "keywords": "Method UpdateCompositeLayerContent Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateCompositeLayerContent() public virtual void UpdateCompositeLayerContent()"
  },
  "api/YVR.Core.YVRCompositeLayer.alpha.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.alpha.html",
    "title": "Property alpha | Core",
    "keywords": "Property alpha Namespace YVR.Core Assembly YVR.Core.Runtime.dll alpha public float alpha { get; set; } Property Value float"
  },
  "api/YVR.Core.YVRCompositeLayer.autoInitLayer.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.autoInitLayer.html",
    "title": "Field autoInitLayer | Core",
    "keywords": "Field autoInitLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll Should init native composite layer automatically [SerializeField] protected bool autoInitLayer Returns bool Should init native composite layer automatically"
  },
  "api/YVR.Core.YVRCompositeLayer.circleSegments.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.circleSegments.html",
    "title": "Property circleSegments | Core",
    "keywords": "Property circleSegments Namespace YVR.Core Assembly YVR.Core.Runtime.dll circleSegments public int circleSegments { get; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.compositionDepth.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.compositionDepth.html",
    "title": "Field compositionDepth | Core",
    "keywords": "Field compositionDepth Namespace YVR.Core Assembly YVR.Core.Runtime.dll Composite layer depth. If depth less-than 0, the layer will work as underLayer, otherwise, the layer will works as overlay [SerializeField] protected int compositionDepth Returns int Composite layer depth. If depth less-than 0, the layer will work as underLayer, otherwise, the layer will works as overlay"
  },
  "api/YVR.Core.YVRCompositeLayer.cylinderAngle.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.cylinderAngle.html",
    "title": "Property cylinderAngle | Core",
    "keywords": "Property cylinderAngle Namespace YVR.Core Assembly YVR.Core.Runtime.dll cylinderAngle public float cylinderAngle { get; set; } Property Value float"
  },
  "api/YVR.Core.YVRCompositeLayer.depth.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.depth.html",
    "title": "Property depth | Core",
    "keywords": "Property depth Namespace YVR.Core Assembly YVR.Core.Runtime.dll depth public int depth { get; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.destRectLeft.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.destRectLeft.html",
    "title": "Field destRectLeft | Core",
    "keywords": "Field destRectLeft Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected Rect destRectLeft Returns Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.destRectRight.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.destRectRight.html",
    "title": "Field destRectRight | Core",
    "keywords": "Field destRectRight Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected Rect destRectRight Returns Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.height.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.height.html",
    "title": "Property height | Core",
    "keywords": "Property height Namespace YVR.Core Assembly YVR.Core.Runtime.dll height The height of the actual texture used in the compositeLayer if texture type is external texture, the size of the texture is controlled by the producer and possibly changes at any time the texture height set to 100 is just for source rect calculate protected virtual int height { get; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.html",
    "title": "Class YVRCompositeLayer | Core",
    "keywords": "Class YVRCompositeLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll Used to represent composite layer, which contains overlay / underlay public class YVRCompositeLayer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRCompositeLayer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields autoInitLayer Should init native composite layer automatically compositionDepth Composite layer depth. If depth less-than 0, the layer will work as underLayer, otherwise, the layer will works as overlay destRectLeft destRectRight isDynamic Render content is dynamic If the content you are rendering is dynamic, set this value to true, otherwise the rendered image will remain static even if the data content is updated. This is done to reduce the performance cost of static page rendering. isExternalTexture layerHandler m_CircleSegments m_CylinderAngle m_Radius m_Shape m_SharpenType m_SuperSamplingType onLayerAddedGfx onLayerCreatedGfx onLayerDepthSetGfx onLayerDestroyedGfx onLayerRemovedGfx onRegenerateHole renderScale Render scale for composite layer resolution. While render scale is 1.0, composite layer resolution will equal to the resolution of [texture](xref: YVR.Core.YVRCompositeLayer.texture) rightEyeTexture The displayed texture on right eye composite layer, textureLeft will be used for both eye; sourceRectLeft sourceRectRight texture The displayed texture on composite layer Properties DestRectLeft DestRectRight SharpenType SourceRectLeft SourceRectRight SuperSamplingType alpha circleSegments cylinderAngle depth height The height of the actual texture used in the compositeLayer if texture type is external texture, the size of the texture is controlled by the producer and possibly changes at any time the texture height set to 100 is just for source rect calculate radius renderLayerId The mask id of render layer rightEyeRenderLayerId rightEyeTextureHandle shape swapChainBufferCount textureHandle ID of the texture width The width of the actual texture used in the compositeLayer if texture type is external texture, the size of the texture is controlled by the producer and possibly changes at any time the texture width set to 100 is just for source rect calculate Methods ApplyLayerSettings() CopyTextureToColorHandle() GetExternalAndroidSurface() Hide() Hide the composite layer InitCompositeLayer(int) Init native composite layer, register composite layer update operations. LateUpdate() OnDestroy() OnDisable() OnEnable() OnLayerAddedGfx() OnLayerCreatedGfx(int, int) OnLayerDepthSetGfx(bool) OnLayerDestroyedGfx() OnLayerRemovedGfx() RecreateLayer() RecreateLayer(int) RecreateLayer(int, bool) SetLayerDepth(int) Set the render depth of the composite layer SetSurfaceDimensions(int, int) SetTexture(Texture, int) SetTexture(Texture, YVRRenderLayerEyeMask, int) Show() Show the composite layer SwapBufferLayer() UpdateCommandBuffer() UpdateCommandBufferMainThread(CommandBuffer) UpdateCompositeLayerContent()"
  },
  "api/YVR.Core.YVRCompositeLayer.isDynamic.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.isDynamic.html",
    "title": "Field isDynamic | Core",
    "keywords": "Field isDynamic Namespace YVR.Core Assembly YVR.Core.Runtime.dll Render content is dynamic If the content you are rendering is dynamic, set this value to true, otherwise the rendered image will remain static even if the data content is updated. This is done to reduce the performance cost of static page rendering. [SerializeField] protected bool isDynamic Returns bool Render content is dynamic If the content you are rendering is dynamic, set this value to true, otherwise the rendered image will remain static even if the data content is updated. This is done to reduce the performance cost of static page rendering."
  },
  "api/YVR.Core.YVRCompositeLayer.isExternalTexture.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.isExternalTexture.html",
    "title": "Field isExternalTexture | Core",
    "keywords": "Field isExternalTexture Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool isExternalTexture Returns bool"
  },
  "api/YVR.Core.YVRCompositeLayer.layerHandler.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.layerHandler.html",
    "title": "Field layerHandler | Core",
    "keywords": "Field layerHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll protected IYVRLayerHandle layerHandler Returns IYVRLayerHandle"
  },
  "api/YVR.Core.YVRCompositeLayer.m_CircleSegments.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.m_CircleSegments.html",
    "title": "Field m_CircleSegments | Core",
    "keywords": "Field m_CircleSegments Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected int m_CircleSegments Returns int"
  },
  "api/YVR.Core.YVRCompositeLayer.m_CylinderAngle.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.m_CylinderAngle.html",
    "title": "Field m_CylinderAngle | Core",
    "keywords": "Field m_CylinderAngle Namespace YVR.Core Assembly YVR.Core.Runtime.dll [Range(0.01, 180)] [SerializeField] protected float m_CylinderAngle Returns float"
  },
  "api/YVR.Core.YVRCompositeLayer.m_Radius.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.m_Radius.html",
    "title": "Field m_Radius | Core",
    "keywords": "Field m_Radius Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected float m_Radius Returns float"
  },
  "api/YVR.Core.YVRCompositeLayer.m_Shape.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.m_Shape.html",
    "title": "Field m_Shape | Core",
    "keywords": "Field m_Shape Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected YVRRenderLayerType m_Shape Returns YVRRenderLayerType"
  },
  "api/YVR.Core.YVRCompositeLayer.m_SharpenType.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.m_SharpenType.html",
    "title": "Field m_SharpenType | Core",
    "keywords": "Field m_SharpenType Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected YVRQualityManager.LayerSettingsType m_SharpenType Returns YVRQualityManager.LayerSettingsType"
  },
  "api/YVR.Core.YVRCompositeLayer.m_SuperSamplingType.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.m_SuperSamplingType.html",
    "title": "Field m_SuperSamplingType | Core",
    "keywords": "Field m_SuperSamplingType Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected YVRQualityManager.LayerSettingsType m_SuperSamplingType Returns YVRQualityManager.LayerSettingsType"
  },
  "api/YVR.Core.YVRCompositeLayer.onLayerAddedGfx.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.onLayerAddedGfx.html",
    "title": "Field onLayerAddedGfx | Core",
    "keywords": "Field onLayerAddedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action onLayerAddedGfx Returns Action"
  },
  "api/YVR.Core.YVRCompositeLayer.onLayerCreatedGfx.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.onLayerCreatedGfx.html",
    "title": "Field onLayerCreatedGfx | Core",
    "keywords": "Field onLayerCreatedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action<int> onLayerCreatedGfx Returns Action<int>"
  },
  "api/YVR.Core.YVRCompositeLayer.onLayerDepthSetGfx.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.onLayerDepthSetGfx.html",
    "title": "Field onLayerDepthSetGfx | Core",
    "keywords": "Field onLayerDepthSetGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action<bool, int> onLayerDepthSetGfx Returns Action<bool, int>"
  },
  "api/YVR.Core.YVRCompositeLayer.onLayerDestroyedGfx.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.onLayerDestroyedGfx.html",
    "title": "Field onLayerDestroyedGfx | Core",
    "keywords": "Field onLayerDestroyedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action onLayerDestroyedGfx Returns Action"
  },
  "api/YVR.Core.YVRCompositeLayer.onLayerRemovedGfx.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.onLayerRemovedGfx.html",
    "title": "Field onLayerRemovedGfx | Core",
    "keywords": "Field onLayerRemovedGfx Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action onLayerRemovedGfx Returns Action"
  },
  "api/YVR.Core.YVRCompositeLayer.onRegenerateHole.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.onRegenerateHole.html",
    "title": "Field onRegenerateHole | Core",
    "keywords": "Field onRegenerateHole Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Action onRegenerateHole Returns Action"
  },
  "api/YVR.Core.YVRCompositeLayer.radius.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.radius.html",
    "title": "Property radius | Core",
    "keywords": "Property radius Namespace YVR.Core Assembly YVR.Core.Runtime.dll radius public float radius { get; set; } Property Value float"
  },
  "api/YVR.Core.YVRCompositeLayer.renderLayerId.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.renderLayerId.html",
    "title": "Property renderLayerId | Core",
    "keywords": "Property renderLayerId Namespace YVR.Core Assembly YVR.Core.Runtime.dll renderLayerId The mask id of render layer public int renderLayerId { get; set; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.renderScale.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.renderScale.html",
    "title": "Field renderScale | Core",
    "keywords": "Field renderScale Namespace YVR.Core Assembly YVR.Core.Runtime.dll Render scale for composite layer resolution. While render scale is 1.0, composite layer resolution will equal to the resolution of [texture](xref: YVR.Core.YVRCompositeLayer.texture) [SerializeField] protected float renderScale Returns float Render scale for composite layer resolution. While render scale is 1.0, composite layer resolution will equal to the resolution of [texture](xref: YVR.Core.YVRCompositeLayer.texture)"
  },
  "api/YVR.Core.YVRCompositeLayer.rightEyeRenderLayerId.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.rightEyeRenderLayerId.html",
    "title": "Property rightEyeRenderLayerId | Core",
    "keywords": "Property rightEyeRenderLayerId Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightEyeRenderLayerId public int rightEyeRenderLayerId { get; set; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.rightEyeTexture.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.rightEyeTexture.html",
    "title": "Field rightEyeTexture | Core",
    "keywords": "Field rightEyeTexture Namespace YVR.Core Assembly YVR.Core.Runtime.dll The displayed texture on right eye composite layer, textureLeft will be used for both eye; public Texture rightEyeTexture Returns Texture The displayed texture on right eye composite layer, textureLeft will be used for both eye;"
  },
  "api/YVR.Core.YVRCompositeLayer.rightEyeTextureHandle.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.rightEyeTextureHandle.html",
    "title": "Property rightEyeTextureHandle | Core",
    "keywords": "Property rightEyeTextureHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightEyeTextureHandle protected virtual int rightEyeTextureHandle { get; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.shape.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.shape.html",
    "title": "Property shape | Core",
    "keywords": "Property shape Namespace YVR.Core Assembly YVR.Core.Runtime.dll shape public YVRRenderLayerType shape { get; set; } Property Value YVRRenderLayerType"
  },
  "api/YVR.Core.YVRCompositeLayer.sourceRectLeft.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.sourceRectLeft.html",
    "title": "Field sourceRectLeft | Core",
    "keywords": "Field sourceRectLeft Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected Rect sourceRectLeft Returns Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.sourceRectRight.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.sourceRectRight.html",
    "title": "Field sourceRectRight | Core",
    "keywords": "Field sourceRectRight Namespace YVR.Core Assembly YVR.Core.Runtime.dll [SerializeField] protected Rect sourceRectRight Returns Rect"
  },
  "api/YVR.Core.YVRCompositeLayer.swapChainBufferCount.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.swapChainBufferCount.html",
    "title": "Property swapChainBufferCount | Core",
    "keywords": "Property swapChainBufferCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll swapChainBufferCount protected int swapChainBufferCount { get; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.texture.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.texture.html",
    "title": "Field texture | Core",
    "keywords": "Field texture Namespace YVR.Core Assembly YVR.Core.Runtime.dll The displayed texture on composite layer public Texture texture Returns Texture The displayed texture on composite layer"
  },
  "api/YVR.Core.YVRCompositeLayer.textureHandle.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.textureHandle.html",
    "title": "Property textureHandle | Core",
    "keywords": "Property textureHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll textureHandle ID of the texture protected virtual int textureHandle { get; } Property Value int"
  },
  "api/YVR.Core.YVRCompositeLayer.width.html": {
    "href": "api/YVR.Core.YVRCompositeLayer.width.html",
    "title": "Property width | Core",
    "keywords": "Property width Namespace YVR.Core Assembly YVR.Core.Runtime.dll width The width of the actual texture used in the compositeLayer if texture type is external texture, the size of the texture is controlled by the producer and possibly changes at any time the texture width set to 100 is just for source rect calculate protected virtual int width { get; } Property Value int"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulateController.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulateController.html",
    "title": "Enum YVRControllerEmulator.EmulateController | Core",
    "keywords": "Enum YVRControllerEmulator.EmulateController Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] [Serializable] public enum YVRControllerEmulator.EmulateController Fields LeftController = 0 RightController = 1"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.-ctor.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.-ctor.html",
    "title": "Constructor EmulatorKeyMapping | Core",
    "keywords": "Constructor EmulatorKeyMapping Namespace YVR.Core Assembly YVR.Core.Runtime.dll EmulatorKeyMapping(int) public EmulatorKeyMapping(int index) Parameters index int"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.A.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.A.html",
    "title": "Field A | Core",
    "keywords": "Field A Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode A Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.B.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.B.html",
    "title": "Field B | Core",
    "keywords": "Field B Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode B Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.LeftHandTrigger.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.LeftHandTrigger.html",
    "title": "Field LeftHandTrigger | Core",
    "keywords": "Field LeftHandTrigger Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode LeftHandTrigger Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.LeftIndexTrigger.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.LeftIndexTrigger.html",
    "title": "Field LeftIndexTrigger | Core",
    "keywords": "Field LeftIndexTrigger Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode LeftIndexTrigger Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.LeftThumbStick.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.LeftThumbStick.html",
    "title": "Field LeftThumbStick | Core",
    "keywords": "Field LeftThumbStick Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode LeftThumbStick Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.RightHandTrigger.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.RightHandTrigger.html",
    "title": "Field RightHandTrigger | Core",
    "keywords": "Field RightHandTrigger Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode RightHandTrigger Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.RightIndexTrigger.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.RightIndexTrigger.html",
    "title": "Field RightIndexTrigger | Core",
    "keywords": "Field RightIndexTrigger Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode RightIndexTrigger Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.RightThumbStick.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.RightThumbStick.html",
    "title": "Field RightThumbStick | Core",
    "keywords": "Field RightThumbStick Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode RightThumbStick Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.X.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.X.html",
    "title": "Field X | Core",
    "keywords": "Field X Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode X Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.Y.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.Y.html",
    "title": "Field Y | Core",
    "keywords": "Field Y Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode Y Returns KeyCode"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.emulatorKeysMap.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.emulatorKeysMap.html",
    "title": "Field emulatorKeysMap | Core",
    "keywords": "Field emulatorKeysMap Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Dictionary<YVRInput.RawButton, KeyCode> emulatorKeysMap Returns Dictionary<YVRInput.RawButton, KeyCode>"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorKeyMapping.html",
    "title": "Struct YVRControllerEmulator.EmulatorKeyMapping | Core",
    "keywords": "Struct YVRControllerEmulator.EmulatorKeyMapping Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] [Serializable] public struct YVRControllerEmulator.EmulatorKeyMapping Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EmulatorKeyMapping(int) Fields A B LeftHandTrigger LeftIndexTrigger LeftThumbStick RightHandTrigger RightIndexTrigger RightThumbStick X Y emulatorKeysMap"
  },
  "api/YVR.Core.YVRControllerEmulator.EmulatorUpdate.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.EmulatorUpdate.html",
    "title": "Method EmulatorUpdate | Core",
    "keywords": "Method EmulatorUpdate Namespace YVR.Core Assembly YVR.Core.Runtime.dll EmulatorUpdate() public void EmulatorUpdate()"
  },
  "api/YVR.Core.YVRControllerEmulator.Init.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.Init.html",
    "title": "Method Init | Core",
    "keywords": "Method Init Namespace YVR.Core Assembly YVR.Core.Runtime.dll Init() protected override void Init()"
  },
  "api/YVR.Core.YVRControllerEmulator.activateKeys.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.activateKeys.html",
    "title": "Field activateKeys | Core",
    "keywords": "Field activateKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<KeyCode> activateKeys Returns List<KeyCode>"
  },
  "api/YVR.Core.YVRControllerEmulator.controllerState.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.controllerState.html",
    "title": "Field controllerState | Core",
    "keywords": "Field controllerState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRPlugin.ControllerState controllerState Returns YVRPlugin.ControllerState"
  },
  "api/YVR.Core.YVRControllerEmulator.currentControllerPosition.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.currentControllerPosition.html",
    "title": "Field currentControllerPosition | Core",
    "keywords": "Field currentControllerPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll [NonSerialized] public Vector3 currentControllerPosition Returns Vector3"
  },
  "api/YVR.Core.YVRControllerEmulator.currentControllerRotation.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.currentControllerRotation.html",
    "title": "Field currentControllerRotation | Core",
    "keywords": "Field currentControllerRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll [NonSerialized] public Vector3 currentControllerRotation Returns Vector3"
  },
  "api/YVR.Core.YVRControllerEmulator.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.html",
    "title": "Class YVRControllerEmulator | Core",
    "keywords": "Class YVRControllerEmulator Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRControllerEmulator : MonoBehaviorSingleton<YVRControllerEmulator> Inheritance object Object Component Behaviour MonoBehaviour MonoBehaviorSingleton<YVRControllerEmulator> YVRControllerEmulator Inherited Members MonoBehaviorSingleton<YVRControllerEmulator>.instance MonoBehaviorSingleton<YVRControllerEmulator>.createdInstance MonoBehaviorSingleton<YVRControllerEmulator>.Start() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields activateKeys controllerState currentControllerPosition currentControllerRotation keyMapping rotationKeys rotationSensitivity targetController Properties isEmulatingLeftController isEmulatingRightController Methods EmulatorUpdate() Init()"
  },
  "api/YVR.Core.YVRControllerEmulator.isEmulatingLeftController.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.isEmulatingLeftController.html",
    "title": "Property isEmulatingLeftController | Core",
    "keywords": "Property isEmulatingLeftController Namespace YVR.Core Assembly YVR.Core.Runtime.dll isEmulatingLeftController public bool isEmulatingLeftController { get; } Property Value bool"
  },
  "api/YVR.Core.YVRControllerEmulator.isEmulatingRightController.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.isEmulatingRightController.html",
    "title": "Property isEmulatingRightController | Core",
    "keywords": "Property isEmulatingRightController Namespace YVR.Core Assembly YVR.Core.Runtime.dll isEmulatingRightController public bool isEmulatingRightController { get; } Property Value bool"
  },
  "api/YVR.Core.YVRControllerEmulator.keyMapping.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.keyMapping.html",
    "title": "Field keyMapping | Core",
    "keywords": "Field keyMapping Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRControllerEmulator.EmulatorKeyMapping keyMapping Returns YVRControllerEmulator.EmulatorKeyMapping"
  },
  "api/YVR.Core.YVRControllerEmulator.rotationKeys.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.rotationKeys.html",
    "title": "Field rotationKeys | Core",
    "keywords": "Field rotationKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<KeyCode> rotationKeys Returns List<KeyCode>"
  },
  "api/YVR.Core.YVRControllerEmulator.rotationSensitivity.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.rotationSensitivity.html",
    "title": "Field rotationSensitivity | Core",
    "keywords": "Field rotationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll public EmulatorRotationSensitivity rotationSensitivity Returns EmulatorRotationSensitivity"
  },
  "api/YVR.Core.YVRControllerEmulator.targetController.html": {
    "href": "api/YVR.Core.YVRControllerEmulator.targetController.html",
    "title": "Field targetController | Core",
    "keywords": "Field targetController Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRControllerEmulator.EmulateController targetController Returns YVRControllerEmulator.EmulateController"
  },
  "api/YVR.Core.YVRControllerRig.GetAcceleration.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetAcceleration.html",
    "title": "Method GetAcceleration | Core",
    "keywords": "Method GetAcceleration Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAcceleration(ControllerType) Get controller's acceleration public static Vector3 GetAcceleration(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns Vector3 controllerType's acceleration"
  },
  "api/YVR.Core.YVRControllerRig.GetAngularAcceleration.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetAngularAcceleration.html",
    "title": "Method GetAngularAcceleration | Core",
    "keywords": "Method GetAngularAcceleration Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAngularAcceleration(ControllerType) Get controller's angular acceleration public static Vector3 GetAngularAcceleration(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns Vector3 controllerType's acceleration"
  },
  "api/YVR.Core.YVRControllerRig.GetAngularVelocity.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetAngularVelocity.html",
    "title": "Method GetAngularVelocity | Core",
    "keywords": "Method GetAngularVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAngularVelocity(ControllerType) Get controller's angular angular velocity public static Vector3 GetAngularVelocity(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns Vector3 controllerType's angular velocity"
  },
  "api/YVR.Core.YVRControllerRig.GetOrientationTracked.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetOrientationTracked.html",
    "title": "Method GetOrientationTracked | Core",
    "keywords": "Method GetOrientationTracked Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetOrientationTracked(ControllerType) Whether controller's orientation is tracked public static bool GetOrientationTracked(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns bool true if controllerType's orientation is tracked"
  },
  "api/YVR.Core.YVRControllerRig.GetPosition.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetPosition.html",
    "title": "Method GetPosition | Core",
    "keywords": "Method GetPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPosition(ControllerType) Get controller's position public static Vector3 GetPosition(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns Vector3 controllerType's position"
  },
  "api/YVR.Core.YVRControllerRig.GetPositionTracked.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetPositionTracked.html",
    "title": "Method GetPositionTracked | Core",
    "keywords": "Method GetPositionTracked Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPositionTracked(ControllerType) Whether controller's position is tracked public static bool GetPositionTracked(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns bool true if controllerType's position is tracked"
  },
  "api/YVR.Core.YVRControllerRig.GetRotation.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetRotation.html",
    "title": "Method GetRotation | Core",
    "keywords": "Method GetRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRotation(ControllerType) Get controller's rotation public static Quaternion GetRotation(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns Quaternion controllerType's rotation"
  },
  "api/YVR.Core.YVRControllerRig.GetVelocity.html": {
    "href": "api/YVR.Core.YVRControllerRig.GetVelocity.html",
    "title": "Method GetVelocity | Core",
    "keywords": "Method GetVelocity Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetVelocity(ControllerType) Get controller's velocity public static Vector3 GetVelocity(ControllerType controllerType) Parameters controllerType ControllerType target controller Returns Vector3 controllerType's velocity"
  },
  "api/YVR.Core.YVRControllerRig.InitializeAnchor.html": {
    "href": "api/YVR.Core.YVRControllerRig.InitializeAnchor.html",
    "title": "Method InitializeAnchor | Core",
    "keywords": "Method InitializeAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll InitializeAnchor() Override InitializeAnchor() protected override void InitializeAnchor()"
  },
  "api/YVR.Core.YVRControllerRig.UpdateAnchorPose.html": {
    "href": "api/YVR.Core.YVRControllerRig.UpdateAnchorPose.html",
    "title": "Method UpdateAnchorPose | Core",
    "keywords": "Method UpdateAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateAnchorPose(RigUpdateType) Get the pose of the anchors and assign it to each anchor [ExcludeFromDocs] protected override void UpdateAnchorPose(YVRBaseRig.RigUpdateType updateType) Parameters updateType YVRBaseRig.RigUpdateType"
  },
  "api/YVR.Core.YVRControllerRig.html": {
    "href": "api/YVR.Core.YVRControllerRig.html",
    "title": "Class YVRControllerRig | Core",
    "keywords": "Class YVRControllerRig Namespace YVR.Core Assembly YVR.Core.Runtime.dll Encapsulate all controllers rigid related operations and information public class YVRControllerRig : YVRBaseRig Inheritance object Object Component Behaviour MonoBehaviour YVRBaseRig YVRControllerRig Inherited Members YVRBaseRig.trackingSpace YVRBaseRig.hmdPose YVRBaseRig.leftEyePose YVRBaseRig.rightEyePose YVRBaseRig.lControllerPose YVRBaseRig.rControllerPose YVRBaseRig.yvrXRDevices YVRBaseRig.Initialize(YVRManager) YVRBaseRig.UpdatePhysicalAnchorPose() YVRBaseRig.UpdateRenderingAnchorPose() YVRBaseRig.ConfigureAnchor(Transform, string) YVRBaseRig.OnDestroy() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties leftControllerAnchor Transform of right controller leftControllerDevice rightControllerAnchor Transform of left controller rightControllerDevice Methods GetAcceleration(ControllerType) Get controller's acceleration GetAngularAcceleration(ControllerType) Get controller's angular acceleration GetAngularVelocity(ControllerType) Get controller's angular angular velocity GetOrientationTracked(ControllerType) Whether controller's orientation is tracked GetPosition(ControllerType) Get controller's position GetPositionTracked(ControllerType) Whether controller's position is tracked GetRotation(ControllerType) Get controller's rotation GetVelocity(ControllerType) Get controller's velocity InitializeAnchor() Override InitializeAnchor() UpdateAnchorPose(RigUpdateType) Get the pose of the anchors and assign it to each anchor"
  },
  "api/YVR.Core.YVRControllerRig.leftControllerAnchor.html": {
    "href": "api/YVR.Core.YVRControllerRig.leftControllerAnchor.html",
    "title": "Property leftControllerAnchor | Core",
    "keywords": "Property leftControllerAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll leftControllerAnchor Transform of right controller public Transform leftControllerAnchor { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRControllerRig.leftControllerDevice.html": {
    "href": "api/YVR.Core.YVRControllerRig.leftControllerDevice.html",
    "title": "Property leftControllerDevice | Core",
    "keywords": "Property leftControllerDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll leftControllerDevice public static InputDevice leftControllerDevice { get; } Property Value InputDevice"
  },
  "api/YVR.Core.YVRControllerRig.rightControllerAnchor.html": {
    "href": "api/YVR.Core.YVRControllerRig.rightControllerAnchor.html",
    "title": "Property rightControllerAnchor | Core",
    "keywords": "Property rightControllerAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightControllerAnchor Transform of left controller public Transform rightControllerAnchor { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRControllerRig.rightControllerDevice.html": {
    "href": "api/YVR.Core.YVRControllerRig.rightControllerDevice.html",
    "title": "Property rightControllerDevice | Core",
    "keywords": "Property rightControllerDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightControllerDevice public static InputDevice rightControllerDevice { get; } Property Value InputDevice"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.Awake.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.Awake.html",
    "title": "Method Awake | Core",
    "keywords": "Method Awake Namespace YVR.Core Assembly YVR.Core.Runtime.dll Awake() protected override void Awake()"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.CreateCollider.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.CreateCollider.html",
    "title": "Method CreateCollider | Core",
    "keywords": "Method CreateCollider Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateCollider(YVRCompositeLayer) public void CreateCollider(YVRCompositeLayer compositeLayer) Parameters compositeLayer YVRCompositeLayer"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.GetRaycastResultScreenPosition.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.GetRaycastResultScreenPosition.html",
    "title": "Method GetRaycastResultScreenPosition | Core",
    "keywords": "Method GetRaycastResultScreenPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRaycastResultScreenPosition(RaycastResult) Convert hit point position from world space to the screen space public override Vector2 GetRaycastResultScreenPosition(RaycastResult raycastResult) Parameters raycastResult RaycastResult Target raycastResult Returns Vector2 Raycast hit point in the screen space of eventCamera"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.GetRemappedWorldPosition.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.GetRemappedWorldPosition.html",
    "title": "Method GetRemappedWorldPosition | Core",
    "keywords": "Method GetRemappedWorldPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRemappedWorldPosition() public Vector3 GetRemappedWorldPosition() Returns Vector3"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.IsCylinderCanvas.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.IsCylinderCanvas.html",
    "title": "Method IsCylinderCanvas | Core",
    "keywords": "Method IsCylinderCanvas Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsCylinderCanvas() public bool IsCylinderCanvas() Returns bool"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.Raycast.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.Raycast.html",
    "title": "Method Raycast | Core",
    "keywords": "Method Raycast Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raycast(PointerEventData, List<RaycastResult>) Processing actual raycast, will be triggered by EventSystem.RaycastAll public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData Data comes from YVRInputModule resultAppendList List<RaycastResult> List contains the ray casting result"
  },
  "api/YVR.Core.YVRCurvedUIRaycaster.html": {
    "href": "api/YVR.Core.YVRCurvedUIRaycaster.html",
    "title": "Class YVRCurvedUIRaycaster | Core",
    "keywords": "Class YVRCurvedUIRaycaster Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRCurvedUIRaycaster : YVRGraphicRaycaster Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster GraphicRaycaster YVRGraphicRaycaster YVRCurvedUIRaycaster Inherited Members YVRGraphicRaycaster.m_RaycastHitResults YVRGraphicRaycaster.canvas YVRGraphicRaycaster.eventCamera YVRGraphicRaycaster.Raycast(YVRPointerEventData, ICollection<RaycastResult>) YVRGraphicRaycaster.GraphicRaycast(Canvas, Ray, List<YVRGraphicRaycaster.RaycastHit>) GraphicRaycaster.kNoEventMaskSet GraphicRaycaster.m_BlockingMask GraphicRaycaster.sortOrderPriority GraphicRaycaster.renderOrderPriority GraphicRaycaster.ignoreReversedGraphics GraphicRaycaster.blockingObjects GraphicRaycaster.blockingMask BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() BaseRaycaster.priority BaseRaycaster.rootRaycaster UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnValidate() UIBehaviour.Reset() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Awake() CreateCollider(YVRCompositeLayer) GetRaycastResultScreenPosition(RaycastResult) Convert hit point position from world space to the screen space GetRemappedWorldPosition() IsCylinderCanvas() Raycast(PointerEventData, List<RaycastResult>) Processing actual raycast, will be triggered by EventSystem.RaycastAll"
  },
  "api/YVR.Core.YVRDebugHub.InitDebugHub.html": {
    "href": "api/YVR.Core.YVRDebugHub.InitDebugHub.html",
    "title": "Method InitDebugHub | Core",
    "keywords": "Method InitDebugHub Namespace YVR.Core Assembly YVR.Core.Runtime.dll InitDebugHub() protected virtual void InitDebugHub()"
  },
  "api/YVR.Core.YVRDebugHub.Start.html": {
    "href": "api/YVR.Core.YVRDebugHub.Start.html",
    "title": "Method Start | Core",
    "keywords": "Method Start Namespace YVR.Core Assembly YVR.Core.Runtime.dll Start() protected virtual IEnumerator Start() Returns IEnumerator"
  },
  "api/YVR.Core.YVRDebugHub.UpdateDebugInfo.html": {
    "href": "api/YVR.Core.YVRDebugHub.UpdateDebugInfo.html",
    "title": "Method UpdateDebugInfo | Core",
    "keywords": "Method UpdateDebugInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateDebugInfo() protected virtual void UpdateDebugInfo()"
  },
  "api/YVR.Core.YVRDebugHub.html": {
    "href": "api/YVR.Core.YVRDebugHub.html",
    "title": "Class YVRDebugHub | Core",
    "keywords": "Class YVRDebugHub Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRDebugHub : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRDebugHub Derived YVRInputDebug YVRTrackingDebug Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods InitDebugHub() Start() UpdateDebugInfo()"
  },
  "api/YVR.Core.YVREventTracking.CurrentActivity.html": {
    "href": "api/YVR.Core.YVREventTracking.CurrentActivity.html",
    "title": "Property CurrentActivity | Core",
    "keywords": "Property CurrentActivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll CurrentActivity public AndroidJavaObject CurrentActivity { get; } Property Value AndroidJavaObject"
  },
  "api/YVR.Core.YVREventTracking.NativeCoreSdkClass.html": {
    "href": "api/YVR.Core.YVREventTracking.NativeCoreSdkClass.html",
    "title": "Property NativeCoreSdkClass | Core",
    "keywords": "Property NativeCoreSdkClass Namespace YVR.Core Assembly YVR.Core.Runtime.dll NativeCoreSdkClass public AndroidJavaClass NativeCoreSdkClass { get; } Property Value AndroidJavaClass"
  },
  "api/YVR.Core.YVREventTracking.UploadSDKInfo.html": {
    "href": "api/YVR.Core.YVREventTracking.UploadSDKInfo.html",
    "title": "Method UploadSDKInfo | Core",
    "keywords": "Method UploadSDKInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll UploadSDKInfo() public void UploadSDKInfo()"
  },
  "api/YVR.Core.YVREventTracking.html": {
    "href": "api/YVR.Core.YVREventTracking.html",
    "title": "Class YVREventTracking | Core",
    "keywords": "Class YVREventTracking Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVREventTracking : Singleton<YVREventTracking> Inheritance object Singleton<YVREventTracking> YVREventTracking Inherited Members Singleton<YVREventTracking>.instance Singleton<YVREventTracking>.createdInstance Singleton<YVREventTracking>.OnInit() Singleton<YVREventTracking>.Reset() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentActivity NativeCoreSdkClass Methods UploadSDKInfo()"
  },
  "api/YVR.Core.YVREventType.html": {
    "href": "api/YVR.Core.YVREventType.html",
    "title": "Enum YVREventType | Core",
    "keywords": "Enum YVREventType Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public enum YVREventType Fields FocusGained = 4 The current activity is in the foreground and has input focus. FocusLost = 5 The current activity is in the background (but possibly still visible) and has lost input focus. None = 0 No event Recenter = 20 recenter occurred RefreshRate = 6 The display refresh rate has changed VisibilityGained = 2 The application's frames are visible to the user. VisibilityLost = 3 The application's frames are no longer visible to the user."
  },
  "api/YVR.Core.YVREventsManager.Initialize.html": {
    "href": "api/YVR.Core.YVREventsManager.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize() public void Initialize()"
  },
  "api/YVR.Core.YVREventsManager.Update.html": {
    "href": "api/YVR.Core.YVREventsManager.Update.html",
    "title": "Method Update | Core",
    "keywords": "Method Update Namespace YVR.Core Assembly YVR.Core.Runtime.dll Update() [ExcludeFromDocs] public void Update()"
  },
  "api/YVR.Core.YVREventsManager.html": {
    "href": "api/YVR.Core.YVREventsManager.html",
    "title": "Class YVREventsManager | Core",
    "keywords": "Class YVREventsManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The manager for events public class YVREventsManager Inheritance object YVREventsManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize() Update() Events onFocusGained Occurs when application focus gained onFocusLost Occurs when application focus lost onHMDMounted Occurs when an HMD is put on the user's head. onHMDUnMounted Occurs when an HMD is taken off the user's head. onInputDeviceChange onRecenterOccurred Occurs when recenter occurred onTrackingAcquired Occurs when head gained tracking. onTrackingLost Occurs when head lost tracking. onUpdate Occurs at the update function of every frame onVisibilityGained Occurs when application is visible onVisibilityLost Occurs when application is completely obscured by other content"
  },
  "api/YVR.Core.YVREventsManager.onFocusGained.html": {
    "href": "api/YVR.Core.YVREventsManager.onFocusGained.html",
    "title": "Event onFocusGained | Core",
    "keywords": "Event onFocusGained Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when application focus gained public event Action onFocusGained Returns Action Occurs when application focus gained"
  },
  "api/YVR.Core.YVREventsManager.onFocusLost.html": {
    "href": "api/YVR.Core.YVREventsManager.onFocusLost.html",
    "title": "Event onFocusLost | Core",
    "keywords": "Event onFocusLost Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when application focus lost public event Action onFocusLost Returns Action Occurs when application focus lost"
  },
  "api/YVR.Core.YVREventsManager.onHMDMounted.html": {
    "href": "api/YVR.Core.YVREventsManager.onHMDMounted.html",
    "title": "Event onHMDMounted | Core",
    "keywords": "Event onHMDMounted Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when an HMD is put on the user's head. public event Action onHMDMounted Returns Action Occurs when an HMD is put on the user's head."
  },
  "api/YVR.Core.YVREventsManager.onHMDUnMounted.html": {
    "href": "api/YVR.Core.YVREventsManager.onHMDUnMounted.html",
    "title": "Event onHMDUnMounted | Core",
    "keywords": "Event onHMDUnMounted Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when an HMD is taken off the user's head. public event Action onHMDUnMounted Returns Action Occurs when an HMD is taken off the user's head."
  },
  "api/YVR.Core.YVREventsManager.onInputDeviceChange.html": {
    "href": "api/YVR.Core.YVREventsManager.onInputDeviceChange.html",
    "title": "Event onInputDeviceChange | Core",
    "keywords": "Event onInputDeviceChange Namespace YVR.Core Assembly YVR.Core.Runtime.dll public event Action<ActiveInputDevice> onInputDeviceChange Returns Action<ActiveInputDevice>"
  },
  "api/YVR.Core.YVREventsManager.onRecenterOccurred.html": {
    "href": "api/YVR.Core.YVREventsManager.onRecenterOccurred.html",
    "title": "Event onRecenterOccurred | Core",
    "keywords": "Event onRecenterOccurred Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when recenter occurred public event Action onRecenterOccurred Returns Action Occurs when recenter occurred"
  },
  "api/YVR.Core.YVREventsManager.onTrackingAcquired.html": {
    "href": "api/YVR.Core.YVREventsManager.onTrackingAcquired.html",
    "title": "Event onTrackingAcquired | Core",
    "keywords": "Event onTrackingAcquired Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when head gained tracking. public event Action onTrackingAcquired Returns Action Occurs when head gained tracking."
  },
  "api/YVR.Core.YVREventsManager.onTrackingLost.html": {
    "href": "api/YVR.Core.YVREventsManager.onTrackingLost.html",
    "title": "Event onTrackingLost | Core",
    "keywords": "Event onTrackingLost Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when head lost tracking. public event Action onTrackingLost Returns Action Occurs when head lost tracking."
  },
  "api/YVR.Core.YVREventsManager.onUpdate.html": {
    "href": "api/YVR.Core.YVREventsManager.onUpdate.html",
    "title": "Event onUpdate | Core",
    "keywords": "Event onUpdate Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs at the update function of every frame public event Action onUpdate Returns Action Occurs at the update function of every frame"
  },
  "api/YVR.Core.YVREventsManager.onVisibilityGained.html": {
    "href": "api/YVR.Core.YVREventsManager.onVisibilityGained.html",
    "title": "Event onVisibilityGained | Core",
    "keywords": "Event onVisibilityGained Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when application is visible public event Action onVisibilityGained Returns Action Occurs when application is visible"
  },
  "api/YVR.Core.YVREventsManager.onVisibilityLost.html": {
    "href": "api/YVR.Core.YVREventsManager.onVisibilityLost.html",
    "title": "Event onVisibilityLost | Core",
    "keywords": "Event onVisibilityLost Namespace YVR.Core Assembly YVR.Core.Runtime.dll Occurs when application is completely obscured by other content public event Action onVisibilityLost Returns Action Occurs when application is completely obscured by other content"
  },
  "api/YVR.Core.YVRExtent2DInt.height.html": {
    "href": "api/YVR.Core.YVRExtent2DInt.height.html",
    "title": "Field height | Core",
    "keywords": "Field height Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int height Returns int"
  },
  "api/YVR.Core.YVRExtent2DInt.html": {
    "href": "api/YVR.Core.YVRExtent2DInt.html",
    "title": "Struct YVRExtent2DInt | Core",
    "keywords": "Struct YVRExtent2DInt Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRExtent2DInt Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields height width"
  },
  "api/YVR.Core.YVRExtent2DInt.width.html": {
    "href": "api/YVR.Core.YVRExtent2DInt.width.html",
    "title": "Field width | Core",
    "keywords": "Field width Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int width Returns int"
  },
  "api/YVR.Core.YVRGraphicRaycaster.GetRaycastResultScreenPosition.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.GetRaycastResultScreenPosition.html",
    "title": "Method GetRaycastResultScreenPosition | Core",
    "keywords": "Method GetRaycastResultScreenPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRaycastResultScreenPosition(RaycastResult) Convert hit point position from world space to the screen space public virtual Vector2 GetRaycastResultScreenPosition(RaycastResult raycastResult) Parameters raycastResult RaycastResult Target raycastResult Returns Vector2 Raycast hit point in the screen space of eventCamera"
  },
  "api/YVR.Core.YVRGraphicRaycaster.GraphicRaycast.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.GraphicRaycast.html",
    "title": "Method GraphicRaycast | Core",
    "keywords": "Method GraphicRaycast Namespace YVR.Core Assembly YVR.Core.Runtime.dll GraphicRaycast(Canvas, Ray, List<RaycastHit>) protected void GraphicRaycast(Canvas canvas, Ray ray, List<YVRGraphicRaycaster.RaycastHit> results) Parameters canvas Canvas ray Ray results List<YVRGraphicRaycaster.RaycastHit>"
  },
  "api/YVR.Core.YVRGraphicRaycaster.Raycast.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.Raycast.html",
    "title": "Method Raycast | Core",
    "keywords": "Method Raycast Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raycast(PointerEventData, List<RaycastResult>) Processing actual raycast, will be triggered by EventSystem.RaycastAll public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData Data comes from YVRInputModule resultAppendList List<RaycastResult> List contains the ray casting result Raycast(YVRPointerEventData, ICollection<RaycastResult>) protected virtual void Raycast(YVRPointerEventData eventData, ICollection<RaycastResult> resultAppendList) Parameters eventData YVRPointerEventData resultAppendList ICollection<RaycastResult>"
  },
  "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.-ctor.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.-ctor.html",
    "title": "Constructor RaycastHit | Core",
    "keywords": "Constructor RaycastHit Namespace YVR.Core Assembly YVR.Core.Runtime.dll RaycastHit(Graphic, Vector3) public RaycastHit(Graphic graphic, Vector3 hitPointWorldPos) Parameters graphic Graphic hitPointWorldPos Vector3"
  },
  "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.graphic.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.graphic.html",
    "title": "Field graphic | Core",
    "keywords": "Field graphic Namespace YVR.Core Assembly YVR.Core.Runtime.dll public readonly Graphic graphic Returns Graphic"
  },
  "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.hitPointWorldPos.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.hitPointWorldPos.html",
    "title": "Field hitPointWorldPos | Core",
    "keywords": "Field hitPointWorldPos Namespace YVR.Core Assembly YVR.Core.Runtime.dll public readonly Vector3 hitPointWorldPos Returns Vector3"
  },
  "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.RaycastHit.html",
    "title": "Struct YVRGraphicRaycaster.RaycastHit | Core",
    "keywords": "Struct YVRGraphicRaycaster.RaycastHit Namespace YVR.Core Assembly YVR.Core.Runtime.dll protected readonly struct YVRGraphicRaycaster.RaycastHit Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RaycastHit(Graphic, Vector3) Fields graphic hitPointWorldPos"
  },
  "api/YVR.Core.YVRGraphicRaycaster.canvas.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.canvas.html",
    "title": "Property canvas | Core",
    "keywords": "Property canvas Namespace YVR.Core Assembly YVR.Core.Runtime.dll canvas protected Canvas canvas { get; } Property Value Canvas"
  },
  "api/YVR.Core.YVRGraphicRaycaster.eventCamera.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.eventCamera.html",
    "title": "Property eventCamera | Core",
    "keywords": "Property eventCamera Namespace YVR.Core Assembly YVR.Core.Runtime.dll eventCamera The camera used to convert rayhit's world position to screen position public override Camera eventCamera { get; } Property Value Camera"
  },
  "api/YVR.Core.YVRGraphicRaycaster.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.html",
    "title": "Class YVRGraphicRaycaster | Core",
    "keywords": "Class YVRGraphicRaycaster Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raycaster used for raycasting graphic targets [RequireComponent(typeof(Canvas))] public class YVRGraphicRaycaster : GraphicRaycaster Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster GraphicRaycaster YVRGraphicRaycaster Derived YVRCurvedUIRaycaster Inherited Members GraphicRaycaster.kNoEventMaskSet GraphicRaycaster.m_BlockingMask GraphicRaycaster.sortOrderPriority GraphicRaycaster.renderOrderPriority GraphicRaycaster.ignoreReversedGraphics GraphicRaycaster.blockingObjects GraphicRaycaster.blockingMask BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() BaseRaycaster.priority BaseRaycaster.rootRaycaster UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnValidate() UIBehaviour.Reset() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields m_RaycastHitResults Properties canvas eventCamera The camera used to convert rayhit's world position to screen position Methods GetRaycastResultScreenPosition(RaycastResult) Convert hit point position from world space to the screen space GraphicRaycast(Canvas, Ray, List<RaycastHit>) Raycast(PointerEventData, List<RaycastResult>) Processing actual raycast, will be triggered by EventSystem.RaycastAll Raycast(YVRPointerEventData, ICollection<RaycastResult>) See Also YVRInputModule YVRPhysicsRaycaster"
  },
  "api/YVR.Core.YVRGraphicRaycaster.m_RaycastHitResults.html": {
    "href": "api/YVR.Core.YVRGraphicRaycaster.m_RaycastHitResults.html",
    "title": "Field m_RaycastHitResults | Core",
    "keywords": "Field m_RaycastHitResults Namespace YVR.Core Assembly YVR.Core.Runtime.dll protected List<YVRGraphicRaycaster.RaycastHit> m_RaycastHitResults Returns List<YVRGraphicRaycaster.RaycastHit>"
  },
  "api/YVR.Core.YVRHMDEmulator.EmulatorUpdate.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.EmulatorUpdate.html",
    "title": "Method EmulatorUpdate | Core",
    "keywords": "Method EmulatorUpdate Namespace YVR.Core Assembly YVR.Core.Runtime.dll EmulatorUpdate() public void EmulatorUpdate()"
  },
  "api/YVR.Core.YVRHMDEmulator.Init.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.Init.html",
    "title": "Method Init | Core",
    "keywords": "Method Init Namespace YVR.Core Assembly YVR.Core.Runtime.dll Init() protected override void Init()"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys(Struct).html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys(Struct).html",
    "title": "Struct YVRHMDEmulator.TranslationKeys | Core",
    "keywords": "Struct YVRHMDEmulator.TranslationKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] [Serializable] public struct YVRHMDEmulator.TranslationKeys Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TranslationKeys(KeyCode, KeyCode, KeyCode, KeyCode, KeyCode, KeyCode) Fields backward down forward left right up"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.-ctor.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.-ctor.html",
    "title": "Constructor TranslationKeys | Core",
    "keywords": "Constructor TranslationKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll TranslationKeys(KeyCode, KeyCode, KeyCode, KeyCode, KeyCode, KeyCode) public TranslationKeys(KeyCode front, KeyCode back, KeyCode left, KeyCode right, KeyCode up, KeyCode down) Parameters front KeyCode back KeyCode left KeyCode right KeyCode up KeyCode down KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.backward.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.backward.html",
    "title": "Field backward | Core",
    "keywords": "Field backward Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode backward Returns KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.down.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.down.html",
    "title": "Field down | Core",
    "keywords": "Field down Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode down Returns KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.forward.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.forward.html",
    "title": "Field forward | Core",
    "keywords": "Field forward Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode forward Returns KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.left.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.left.html",
    "title": "Field left | Core",
    "keywords": "Field left Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode left Returns KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.right.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.right.html",
    "title": "Field right | Core",
    "keywords": "Field right Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode right Returns KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.TranslationKeys.up.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.TranslationKeys.up.html",
    "title": "Field up | Core",
    "keywords": "Field up Namespace YVR.Core Assembly YVR.Core.Runtime.dll public KeyCode up Returns KeyCode"
  },
  "api/YVR.Core.YVRHMDEmulator.activateKeys.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.activateKeys.html",
    "title": "Field activateKeys | Core",
    "keywords": "Field activateKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<KeyCode> activateKeys Returns List<KeyCode>"
  },
  "api/YVR.Core.YVRHMDEmulator.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.html",
    "title": "Class YVRHMDEmulator | Core",
    "keywords": "Class YVRHMDEmulator Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRHMDEmulator : MonoBehaviorSingleton<YVRHMDEmulator> Inheritance object Object Component Behaviour MonoBehaviour MonoBehaviorSingleton<YVRHMDEmulator> YVRHMDEmulator Inherited Members MonoBehaviorSingleton<YVRHMDEmulator>.instance MonoBehaviorSingleton<YVRHMDEmulator>.createdInstance MonoBehaviorSingleton<YVRHMDEmulator>.Start() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields activateKeys resetHmdPoseByMiddleMouseButton resetHmdPoseOnRelease rollKeys rotationSensitivity translationKeys translationSensitivity Methods EmulatorUpdate() Init()"
  },
  "api/YVR.Core.YVRHMDEmulator.resetHmdPoseByMiddleMouseButton.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.resetHmdPoseByMiddleMouseButton.html",
    "title": "Field resetHmdPoseByMiddleMouseButton | Core",
    "keywords": "Field resetHmdPoseByMiddleMouseButton Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool resetHmdPoseByMiddleMouseButton Returns bool"
  },
  "api/YVR.Core.YVRHMDEmulator.resetHmdPoseOnRelease.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.resetHmdPoseOnRelease.html",
    "title": "Field resetHmdPoseOnRelease | Core",
    "keywords": "Field resetHmdPoseOnRelease Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool resetHmdPoseOnRelease Returns bool"
  },
  "api/YVR.Core.YVRHMDEmulator.rollKeys.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.rollKeys.html",
    "title": "Field rollKeys | Core",
    "keywords": "Field rollKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<KeyCode> rollKeys Returns List<KeyCode>"
  },
  "api/YVR.Core.YVRHMDEmulator.rotationSensitivity.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.rotationSensitivity.html",
    "title": "Field rotationSensitivity | Core",
    "keywords": "Field rotationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll public EmulatorRotationSensitivity rotationSensitivity Returns EmulatorRotationSensitivity"
  },
  "api/YVR.Core.YVRHMDEmulator.translationKeys(Field).html": {
    "href": "api/YVR.Core.YVRHMDEmulator.translationKeys(Field).html",
    "title": "Field translationKeys | Core",
    "keywords": "Field translationKeys Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRHMDEmulator.TranslationKeys translationKeys Returns YVRHMDEmulator.TranslationKeys"
  },
  "api/YVR.Core.YVRHMDEmulator.translationSensitivity.html": {
    "href": "api/YVR.Core.YVRHMDEmulator.translationSensitivity.html",
    "title": "Field translationSensitivity | Core",
    "keywords": "Field translationSensitivity Namespace YVR.Core Assembly YVR.Core.Runtime.dll public EmulatorTranslationSensitivity translationSensitivity Returns EmulatorTranslationSensitivity"
  },
  "api/YVR.Core.YVRHMDManager.SetPassthrough.html": {
    "href": "api/YVR.Core.YVRHMDManager.SetPassthrough.html",
    "title": "Method SetPassthrough | Core",
    "keywords": "Method SetPassthrough Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPassthrough(bool) public void SetPassthrough(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRHMDManager.batteryLevel.html": {
    "href": "api/YVR.Core.YVRHMDManager.batteryLevel.html",
    "title": "Property batteryLevel | Core",
    "keywords": "Property batteryLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll batteryLevel Get the battery level public float batteryLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRHMDManager.batteryStatus.html": {
    "href": "api/YVR.Core.YVRHMDManager.batteryStatus.html",
    "title": "Property batteryStatus | Core",
    "keywords": "Property batteryStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll batteryStatus Get the battery state(-1:get fail;1:unkown;2:Charging;3:discharging;4:not charging;5:full ) public int batteryStatus { get; } Property Value int"
  },
  "api/YVR.Core.YVRHMDManager.batteryTemperature.html": {
    "href": "api/YVR.Core.YVRHMDManager.batteryTemperature.html",
    "title": "Property batteryTemperature | Core",
    "keywords": "Property batteryTemperature Namespace YVR.Core Assembly YVR.Core.Runtime.dll batteryTemperature Get the battery temperature public float batteryTemperature { get; } Property Value float"
  },
  "api/YVR.Core.YVRHMDManager.html": {
    "href": "api/YVR.Core.YVRHMDManager.html",
    "title": "Class YVRHMDManager | Core",
    "keywords": "Class YVRHMDManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The manager for hmd device data public class YVRHMDManager Inheritance object YVRHMDManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties batteryLevel Get the battery level batteryStatus Get the battery state(-1:get fail;1:unkown;2:Charging;3:discharging;4:not charging;5:full ) batteryTemperature Get the battery temperature isUserPresent Get whether user is currently wearing the display. volumeLevel Get the volume level Methods SetPassthrough(bool)"
  },
  "api/YVR.Core.YVRHMDManager.isUserPresent.html": {
    "href": "api/YVR.Core.YVRHMDManager.isUserPresent.html",
    "title": "Property isUserPresent | Core",
    "keywords": "Property isUserPresent Namespace YVR.Core Assembly YVR.Core.Runtime.dll isUserPresent Get whether user is currently wearing the display. public bool isUserPresent { get; } Property Value bool"
  },
  "api/YVR.Core.YVRHMDManager.volumeLevel.html": {
    "href": "api/YVR.Core.YVRHMDManager.volumeLevel.html",
    "title": "Property volumeLevel | Core",
    "keywords": "Property volumeLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll volumeLevel Get the volume level public float volumeLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRHand.UpdateHandTransform.html": {
    "href": "api/YVR.Core.YVRHand.UpdateHandTransform.html",
    "title": "Method UpdateHandTransform | Core",
    "keywords": "Method UpdateHandTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateHandTransform() public void UpdateHandTransform()"
  },
  "api/YVR.Core.YVRHand.handJoints.html": {
    "href": "api/YVR.Core.YVRHand.handJoints.html",
    "title": "Field handJoints | Core",
    "keywords": "Field handJoints Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<Transform> handJoints Returns List<Transform>"
  },
  "api/YVR.Core.YVRHand.handType.html": {
    "href": "api/YVR.Core.YVRHand.handType.html",
    "title": "Field handType | Core",
    "keywords": "Field handType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandType handType Returns HandType"
  },
  "api/YVR.Core.YVRHand.html": {
    "href": "api/YVR.Core.YVRHand.html",
    "title": "Class YVRHand | Core",
    "keywords": "Class YVRHand Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRHand : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRHand Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields handJoints handType pointerPose Methods UpdateHandTransform()"
  },
  "api/YVR.Core.YVRHand.pointerPose.html": {
    "href": "api/YVR.Core.YVRHand.pointerPose.html",
    "title": "Field pointerPose | Core",
    "keywords": "Field pointerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Transform pointerPose Returns Transform"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.defaultBlendButton.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.defaultBlendButton.html",
    "title": "Field defaultBlendButton | Core",
    "keywords": "Field defaultBlendButton Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float defaultBlendButton Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.handTriggerBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.handTriggerBlend.html",
    "title": "Field handTriggerBlend | Core",
    "keywords": "Field handTriggerBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float handTriggerBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.html",
    "title": "Struct YVRHandAnimController.YVRHandControllerAnimData | Core",
    "keywords": "Struct YVRHandAnimController.YVRHandControllerAnimData Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public struct YVRHandAnimController.YVRHandControllerAnimData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields defaultBlendButton handTriggerBlend indexTriggerBlend isIndexTriggerTouch joy onePressBlend oneTouchBlend thumbstickTouchBlend touchStickBlendButton twoPressBlend twoTouchBlend"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.indexTriggerBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.indexTriggerBlend.html",
    "title": "Field indexTriggerBlend | Core",
    "keywords": "Field indexTriggerBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float indexTriggerBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.isIndexTriggerTouch.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.isIndexTriggerTouch.html",
    "title": "Field isIndexTriggerTouch | Core",
    "keywords": "Field isIndexTriggerTouch Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool isIndexTriggerTouch Returns bool"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.joy.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.joy.html",
    "title": "Field joy | Core",
    "keywords": "Field joy Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector2 joy Returns Vector2"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.onePressBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.onePressBlend.html",
    "title": "Field onePressBlend | Core",
    "keywords": "Field onePressBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float onePressBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.oneTouchBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.oneTouchBlend.html",
    "title": "Field oneTouchBlend | Core",
    "keywords": "Field oneTouchBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float oneTouchBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.thumbstickTouchBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.thumbstickTouchBlend.html",
    "title": "Field thumbstickTouchBlend | Core",
    "keywords": "Field thumbstickTouchBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float thumbstickTouchBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.touchStickBlendButton.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.touchStickBlendButton.html",
    "title": "Field touchStickBlendButton | Core",
    "keywords": "Field touchStickBlendButton Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float touchStickBlendButton Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.twoPressBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.twoPressBlend.html",
    "title": "Field twoPressBlend | Core",
    "keywords": "Field twoPressBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float twoPressBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.twoTouchBlend.html": {
    "href": "api/YVR.Core.YVRHandAnimController.YVRHandControllerAnimData.twoTouchBlend.html",
    "title": "Field twoTouchBlend | Core",
    "keywords": "Field twoTouchBlend Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float twoTouchBlend Returns float"
  },
  "api/YVR.Core.YVRHandAnimController.html": {
    "href": "api/YVR.Core.YVRHandAnimController.html",
    "title": "Class YVRHandAnimController | Core",
    "keywords": "Class YVRHandAnimController Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRHandAnimController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRHandAnimController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/YVR.Core.YVRHandManager.GetFingerPinchStrength.html": {
    "href": "api/YVR.Core.YVRHandManager.GetFingerPinchStrength.html",
    "title": "Method GetFingerPinchStrength | Core",
    "keywords": "Method GetFingerPinchStrength Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetFingerPinchStrength(HandType, XRHandFingerID) Returns the pinch strength of the specified finger for the given hand type. public float GetFingerPinchStrength(HandType handType, XRHandFingerID fingerID) Parameters handType HandType hand type fingerID XRHandFingerID finger type Returns float"
  },
  "api/YVR.Core.YVRHandManager.GetHandTrackingEnable.html": {
    "href": "api/YVR.Core.YVRHandManager.GetHandTrackingEnable.html",
    "title": "Method GetHandTrackingEnable | Core",
    "keywords": "Method GetHandTrackingEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandTrackingEnable() This method returns a boolean value indicating whether hand tracking is enabled or not public bool GetHandTrackingEnable() Returns bool"
  },
  "api/YVR.Core.YVRHandManager.GetInputDevice.html": {
    "href": "api/YVR.Core.YVRHandManager.GetInputDevice.html",
    "title": "Method GetInputDevice | Core",
    "keywords": "Method GetInputDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetInputDevice() public ActiveInputDevice GetInputDevice() Returns ActiveInputDevice"
  },
  "api/YVR.Core.YVRHandManager.GetPinch.html": {
    "href": "api/YVR.Core.YVRHandManager.GetPinch.html",
    "title": "Method GetPinch | Core",
    "keywords": "Method GetPinch Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPinch(HandType, XRHandFingerID) public bool GetPinch(HandType handType, XRHandFingerID fingerID) Parameters handType HandType fingerID XRHandFingerID Returns bool"
  },
  "api/YVR.Core.YVRHandManager.GetPinchDown.html": {
    "href": "api/YVR.Core.YVRHandManager.GetPinchDown.html",
    "title": "Method GetPinchDown | Core",
    "keywords": "Method GetPinchDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPinchDown(HandType, XRHandFingerID) public bool GetPinchDown(HandType handType, XRHandFingerID fingerID) Parameters handType HandType fingerID XRHandFingerID Returns bool"
  },
  "api/YVR.Core.YVRHandManager.GetPinchUp.html": {
    "href": "api/YVR.Core.YVRHandManager.GetPinchUp.html",
    "title": "Method GetPinchUp | Core",
    "keywords": "Method GetPinchUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPinchUp(HandType, XRHandFingerID) public bool GetPinchUp(HandType handType, XRHandFingerID fingerID) Parameters handType HandType fingerID XRHandFingerID Returns bool"
  },
  "api/YVR.Core.YVRHandManager.Initialize.html": {
    "href": "api/YVR.Core.YVRHandManager.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize() Initialize hand Transform public void Initialize()"
  },
  "api/YVR.Core.YVRHandManager.html": {
    "href": "api/YVR.Core.YVRHandManager.html",
    "title": "Class YVRHandManager | Core",
    "keywords": "Class YVRHandManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRHandManager : MonoBehaviorSingleton<YVRHandManager> Inheritance object Object Component Behaviour MonoBehaviour MonoBehaviorSingleton<YVRHandManager> YVRHandManager Inherited Members MonoBehaviorSingleton<YVRHandManager>.instance MonoBehaviorSingleton<YVRHandManager>.createdInstance MonoBehaviorSingleton<YVRHandManager>.Init() MonoBehaviorSingleton<YVRHandManager>.Start() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields leftHandData rightHandData Properties leftHand Left hand tracking rightHand Right hand tracking Methods GetFingerPinchStrength(HandType, XRHandFingerID) Returns the pinch strength of the specified finger for the given hand type. GetHandTrackingEnable() This method returns a boolean value indicating whether hand tracking is enabled or not GetInputDevice() GetPinch(HandType, XRHandFingerID) GetPinchDown(HandType, XRHandFingerID) GetPinchUp(HandType, XRHandFingerID) Initialize() Initialize hand Transform"
  },
  "api/YVR.Core.YVRHandManager.leftHand.html": {
    "href": "api/YVR.Core.YVRHandManager.leftHand.html",
    "title": "Property leftHand | Core",
    "keywords": "Property leftHand Namespace YVR.Core Assembly YVR.Core.Runtime.dll leftHand Left hand tracking public YVRHand leftHand { get; } Property Value YVRHand"
  },
  "api/YVR.Core.YVRHandManager.leftHandData.html": {
    "href": "api/YVR.Core.YVRHandManager.leftHandData.html",
    "title": "Field leftHandData | Core",
    "keywords": "Field leftHandData Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandJointLocations leftHandData Returns HandJointLocations"
  },
  "api/YVR.Core.YVRHandManager.rightHand.html": {
    "href": "api/YVR.Core.YVRHandManager.rightHand.html",
    "title": "Property rightHand | Core",
    "keywords": "Property rightHand Namespace YVR.Core Assembly YVR.Core.Runtime.dll rightHand Right hand tracking public YVRHand rightHand { get; } Property Value YVRHand"
  },
  "api/YVR.Core.YVRHandManager.rightHandData.html": {
    "href": "api/YVR.Core.YVRHandManager.rightHandData.html",
    "title": "Field rightHandData | Core",
    "keywords": "Field rightHandData Namespace YVR.Core Assembly YVR.Core.Runtime.dll public HandJointLocations rightHandData Returns HandJointLocations"
  },
  "api/YVR.Core.YVRHandUtility.FromFlippedZQuatf.html": {
    "href": "api/YVR.Core.YVRHandUtility.FromFlippedZQuatf.html",
    "title": "Method FromFlippedZQuatf | Core",
    "keywords": "Method FromFlippedZQuatf Namespace YVR.Core Assembly YVR.Core.Runtime.dll FromFlippedZQuatf(Quaternion) Flips the Z-axis of a Quaternion. public static Quaternion FromFlippedZQuatf(this Quaternion q) Parameters q Quaternion The Quaternion to flip. Returns Quaternion The flipped Quaternion."
  },
  "api/YVR.Core.YVRHandUtility.FromFlippedZVector3f.html": {
    "href": "api/YVR.Core.YVRHandUtility.FromFlippedZVector3f.html",
    "title": "Method FromFlippedZVector3f | Core",
    "keywords": "Method FromFlippedZVector3f Namespace YVR.Core Assembly YVR.Core.Runtime.dll FromFlippedZVector3f(Vector3) Converts a Vector3 with flipped Z-axis to a normal Vector3. public static Vector3 FromFlippedZVector3f(this Vector3 v) Parameters v Vector3 The Vector3 with flipped Z-axis. Returns Vector3 A normal Vector3."
  },
  "api/YVR.Core.YVRHandUtility.GetBackJointID.html": {
    "href": "api/YVR.Core.YVRHandUtility.GetBackJointID.html",
    "title": "Method GetBackJointID | Core",
    "keywords": "Method GetBackJointID Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBackJointID(XRHandFingerID) Get the back joint ID of the finger public static HandJoint GetBackJointID(this XRHandFingerID fingerId) Parameters fingerId XRHandFingerID The ID of the finger Returns HandJoint The back joint ID of the finger"
  },
  "api/YVR.Core.YVRHandUtility.GetFrontJointID.html": {
    "href": "api/YVR.Core.YVRHandUtility.GetFrontJointID.html",
    "title": "Method GetFrontJointID | Core",
    "keywords": "Method GetFrontJointID Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetFrontJointID(XRHandFingerID) Get the front joint ID of the finger public static HandJoint GetFrontJointID(this XRHandFingerID fingerId) Parameters fingerId XRHandFingerID The ID of the finger Returns HandJoint The front joint ID of the finger"
  },
  "api/YVR.Core.YVRHandUtility.html": {
    "href": "api/YVR.Core.YVRHandUtility.html",
    "title": "Class YVRHandUtility | Core",
    "keywords": "Class YVRHandUtility Namespace YVR.Core Assembly YVR.Core.Runtime.dll public static class YVRHandUtility Inheritance object YVRHandUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromFlippedZQuatf(Quaternion) Flips the Z-axis of a Quaternion. FromFlippedZVector3f(Vector3) Converts a Vector3 with flipped Z-axis to a normal Vector3. GetBackJointID(XRHandFingerID) Get the back joint ID of the finger GetFrontJointID(XRHandFingerID) Get the front joint ID of the finger"
  },
  "api/YVR.Core.YVRInput.ClearActiveController.html": {
    "href": "api/YVR.Core.YVRInput.ClearActiveController.html",
    "title": "Method ClearActiveController | Core",
    "keywords": "Method ClearActiveController Namespace YVR.Core Assembly YVR.Core.Runtime.dll ClearActiveController() Set the existing active controller flag to None and start recording it again. public static void ClearActiveController()"
  },
  "api/YVR.Core.YVRInput.ClearClickedController.html": {
    "href": "api/YVR.Core.YVRInput.ClearClickedController.html",
    "title": "Method ClearClickedController | Core",
    "keywords": "Method ClearClickedController Namespace YVR.Core Assembly YVR.Core.Runtime.dll ClearClickedController() Set the existing clicked controller flag to None and start recording it again. public static void ClearClickedController()"
  },
  "api/YVR.Core.YVRInput.ClearTouchedController.html": {
    "href": "api/YVR.Core.YVRInput.ClearTouchedController.html",
    "title": "Method ClearTouchedController | Core",
    "keywords": "Method ClearTouchedController Namespace YVR.Core Assembly YVR.Core.Runtime.dll ClearTouchedController() Set the existing touched controller flag to None and start recording it again. public static void ClearTouchedController()"
  },
  "api/YVR.Core.YVRInput.Get.html": {
    "href": "api/YVR.Core.YVRInput.Get.html",
    "title": "Method Get | Core",
    "keywords": "Method Get Namespace YVR.Core Assembly YVR.Core.Runtime.dll Get(RawButton, ControllerType) Whether the button is holds down public static bool Get(YVRInput.RawButton rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawButton Target button controllerMask ControllerType Target controller Returns bool true if user holds down the rawMask button Get(VirtualButton, ControllerType) Whether the button is holds down public static bool Get(YVRInput.VirtualButton virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualButton Target button controllerMask ControllerType Target controller Returns bool true if user holds down the virtualMask button Get(RawTouch, ControllerType) Whether the button is being touched public static bool Get(YVRInput.RawTouch rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawTouch Target button controllerMask ControllerType Target controller Returns bool true if user is touching the rawMask button Get(VirtualTouch, ControllerType) Whether the button is being touched public static bool Get(YVRInput.VirtualTouch virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualTouch Target button controllerMask ControllerType Target controller Returns bool true if user is touching the virtualMask button Get(RawAxis1D, ControllerType) Get the trigger position public static float Get(YVRInput.RawAxis1D rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawAxis1D Target trigger controllerMask ControllerType Target controller Returns float position of the rawMask trigger, values is in -1 ~ 1 Get(VirtualAxis1D, ControllerType) Get the trigger position public static float Get(YVRInput.VirtualAxis1D virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualAxis1D Target trigger controllerMask ControllerType Target controller Returns float position of the rawMask trigger, values is in -1 ~ 1 Get(RawAxis2D, ControllerType) Get the thumbstick position public static Vector2 Get(YVRInput.RawAxis2D rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawAxis2D Target thumbstick controllerMask ControllerType Target controller Returns Vector2 position of rawMask thumbstick, both x/y axis value is in -1 ~ 1 Get(VirtualAxis2D, ControllerType) Get the thumbstick position public static Vector2 Get(YVRInput.VirtualAxis2D virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualAxis2D Target thumbstick controllerMask ControllerType Target controller Returns Vector2 position of virtualMask thumbstick, both x/y axis value is in -1 ~ 1"
  },
  "api/YVR.Core.YVRInput.GetActiveController.html": {
    "href": "api/YVR.Core.YVRInput.GetActiveController.html",
    "title": "Method GetActiveController | Core",
    "keywords": "Method GetActiveController Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetActiveController() Get the active controller in current frame. public static ControllerType GetActiveController() Returns ControllerType The ControllerType of active controller Remarks If any button of one controller is pressed or touched during the frame, then this controller will be marked as active. If either left or right controller are marked as active during the frame, and both controllers are connect, then the Controller will be marked as active"
  },
  "api/YVR.Core.YVRInput.GetClickedController.html": {
    "href": "api/YVR.Core.YVRInput.GetClickedController.html",
    "title": "Method GetClickedController | Core",
    "keywords": "Method GetClickedController Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetClickedController() Get last clicked controller public static ControllerType GetClickedController() Returns ControllerType"
  },
  "api/YVR.Core.YVRInput.GetControllerBatteryPercentRemaining.html": {
    "href": "api/YVR.Core.YVRInput.GetControllerBatteryPercentRemaining.html",
    "title": "Method GetControllerBatteryPercentRemaining | Core",
    "keywords": "Method GetControllerBatteryPercentRemaining Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetControllerBatteryPercentRemaining(ControllerType) Get the remaining battery of the controller in percent public static int GetControllerBatteryPercentRemaining(ControllerType controllerMask) Parameters controllerMask ControllerType Target controller Returns int Remaining battery in percent"
  },
  "api/YVR.Core.YVRInput.GetControllerIsCharging.html": {
    "href": "api/YVR.Core.YVRInput.GetControllerIsCharging.html",
    "title": "Method GetControllerIsCharging | Core",
    "keywords": "Method GetControllerIsCharging Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetControllerIsCharging(ControllerType) public static bool GetControllerIsCharging(ControllerType controllerMask) Parameters controllerMask ControllerType Returns bool"
  },
  "api/YVR.Core.YVRInput.GetDown.html": {
    "href": "api/YVR.Core.YVRInput.GetDown.html",
    "title": "Method GetDown | Core",
    "keywords": "Method GetDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetDown(RawButton, ControllerType) Whether the button is pressed down in this frame public static bool GetDown(YVRInput.RawButton rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawButton Target button controllerMask ControllerType Target controller Returns bool true if the rawMask button is pressed down in this frame GetDown(VirtualButton, ControllerType) Whether the button is pressed down in this frame public static bool GetDown(YVRInput.VirtualButton virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualButton Target button controllerMask ControllerType Target controller Returns bool true if the virtualMask button is pressed down in this frame GetDown(RawTouch, ControllerType) Whether the button is touched down in this frame public static bool GetDown(YVRInput.RawTouch rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawTouch Target button controllerMask ControllerType Target controller Returns bool true if the rawMask button is touched down in this frame GetDown(VirtualTouch, ControllerType) Whether the button is touched down in this frame public static bool GetDown(YVRInput.VirtualTouch virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualTouch Target button controllerMask ControllerType Target controller Returns bool true if the virtualMask button is touched down in this frame"
  },
  "api/YVR.Core.YVRInput.GetPrimaryController.html": {
    "href": "api/YVR.Core.YVRInput.GetPrimaryController.html",
    "title": "Method GetPrimaryController | Core",
    "keywords": "Method GetPrimaryController Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPrimaryController() Get the primary controller set in the global system public static ControllerType GetPrimaryController() Returns ControllerType"
  },
  "api/YVR.Core.YVRInput.GetTouchedController.html": {
    "href": "api/YVR.Core.YVRInput.GetTouchedController.html",
    "title": "Method GetTouchedController | Core",
    "keywords": "Method GetTouchedController Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetTouchedController() Get last touched controller public static ControllerType GetTouchedController() Returns ControllerType"
  },
  "api/YVR.Core.YVRInput.GetUp.html": {
    "href": "api/YVR.Core.YVRInput.GetUp.html",
    "title": "Method GetUp | Core",
    "keywords": "Method GetUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetUp(RawButton, ControllerType) Whether the button is pressed up in this frame public static bool GetUp(YVRInput.RawButton rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawButton Target button controllerMask ControllerType Target controller Returns bool true if the rawMask button is pressed up in this frame GetUp(VirtualButton, ControllerType) Whether the button is pressed up in this frame public static bool GetUp(YVRInput.VirtualButton virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualButton Target button controllerMask ControllerType Target controller Returns bool true if the virtualMask button is pressed up in this frame GetUp(RawTouch, ControllerType) Whether the button is touched up in this frame public static bool GetUp(YVRInput.RawTouch rawMask, ControllerType controllerMask = ControllerType.Active) Parameters rawMask YVRInput.RawTouch Target button controllerMask ControllerType Target controller Returns bool true if the rawMask button is touched up in this frame GetUp(VirtualTouch, ControllerType) Whether the button is touched up in this frame public static bool GetUp(YVRInput.VirtualTouch virtualMask, ControllerType controllerMask = ControllerType.Active) Parameters virtualMask YVRInput.VirtualTouch Target button controllerMask ControllerType Target controller Returns bool true if the virtualMask button is touched up in this frame"
  },
  "api/YVR.Core.YVRInput.IsControllerConnected.html": {
    "href": "api/YVR.Core.YVRInput.IsControllerConnected.html",
    "title": "Method IsControllerConnected | Core",
    "keywords": "Method IsControllerConnected Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsControllerConnected(ControllerType) Is controller connected or not public static bool IsControllerConnected(ControllerType controller) Parameters controller ControllerType Target controller Returns bool true when the controller is connected"
  },
  "api/YVR.Core.YVRInput.RawAxis1D.html": {
    "href": "api/YVR.Core.YVRInput.RawAxis1D.html",
    "title": "Enum YVRInput.RawAxis1D | Core",
    "keywords": "Enum YVRInput.RawAxis1D Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raw 1D Axis mapping for controller public enum YVRInput.RawAxis1D Fields LIndexTrigger = 1 Index Trigger 1D Axis on left controller None = 0 Not a 1D Axis RIndexTrigger = 2 Index Trigger 1D Axis on right controller"
  },
  "api/YVR.Core.YVRInput.RawAxis2D.html": {
    "href": "api/YVR.Core.YVRInput.RawAxis2D.html",
    "title": "Enum YVRInput.RawAxis2D | Core",
    "keywords": "Enum YVRInput.RawAxis2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raw 2D Axis mapping for controllers public enum YVRInput.RawAxis2D Fields LThumbstick = 1 Thumb Stick 2D Axis on left controller None = 0 Not a 2D Axis RThumbstick = 2 Thumb Stick 2D Axis on right controller"
  },
  "api/YVR.Core.YVRInput.RawButton.html": {
    "href": "api/YVR.Core.YVRInput.RawButton.html",
    "title": "Enum YVRInput.RawButton | Core",
    "keywords": "Enum YVRInput.RawButton Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raw button mapping for controller [Flags] public enum YVRInput.RawButton : uint Fields A = 1 A Button on right controller All = 4294967295 All buttons on both controllers B = 2 B Button on right controller LHandTrigger = 256 Index Hand Button on left controller LIndexTrigger = 64 Index Trigger Button on left controller LThumbstick = 1024 Thumb Stick Button on left controller (Pressed or not) LThumbstickDown = 8192 Thumb Stick Down Button on left controller LThumbstickLeft = 16384 Thumb Stick Left Button on left controller LThumbstickRight = 32768 Thumb Stick Right Button on left controller LThumbstickUp = 4096 Thumb Stick Up Button on left controller None = 0 Not a Button RHandTrigger = 512 Index Hand Button on right controller RIndexTrigger = 128 Index Trigger Button on right controller RThumbstick = 2048 Thumb Stick Button on right controller (Pressed or not) RThumbstickDown = 131072 Thumb Stick Down Button on right controller RThumbstickLeft = 262144 Thumb Stick Left Button on right controller RThumbstickRight = 524288 Thumb Stick Right Button on right controller RThumbstickUp = 65536 Thumb Stick Up Button on right controller Reserved = 32 Reserved key flag Start = 16 Start Button on left controller X = 4 X Button on left controller Y = 8 Y Button on left controller"
  },
  "api/YVR.Core.YVRInput.RawTouch.html": {
    "href": "api/YVR.Core.YVRInput.RawTouch.html",
    "title": "Enum YVRInput.RawTouch | Core",
    "keywords": "Enum YVRInput.RawTouch Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raw touch mapping for controllers public enum YVRInput.RawTouch : uint Fields A = 1 A Touch on right controller All = 4294967295 All touches on both controllers B = 2 B Touch on right controller LIndexTrigger = 64 Index Trigger Touch on left controller LThumbstick = 1024 Thumb Stick Touch on left controller None = 0 Not a touch RIndexTrigger = 128 Index Trigger Touch on right controller RThumbstick = 2048 Thumb Stick Touch on right controller X = 4 X Touch on left controller Y = 8 Y Touch on right controller"
  },
  "api/YVR.Core.YVRInput.SetControllerVibration.html": {
    "href": "api/YVR.Core.YVRInput.SetControllerVibration.html",
    "title": "Method SetControllerVibration | Core",
    "keywords": "Method SetControllerVibration Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetControllerVibration(float, float, ControllerType) Make specific controller vibrate at the set frequency and amplitude public static void SetControllerVibration(float frequency, float amplitude, ControllerType controllerMask = ControllerType.Active) Parameters frequency float Vibration frequency amplitude float Vibration amplitude controllerMask ControllerType Target controller SetControllerVibration(float, float, float, ControllerType) Make specific controller vibrate at the set frequency and amplitude public static void SetControllerVibration(float frequency, float amplitude, float duration, ControllerType controllerMask = ControllerType.Active) Parameters frequency float Vibration frequency amplitude float Vibration amplitude duration float Vibration duration controllerMask ControllerType Target controller"
  },
  "api/YVR.Core.YVRInput.SetPrimaryController.html": {
    "href": "api/YVR.Core.YVRInput.SetPrimaryController.html",
    "title": "Method SetPrimaryController | Core",
    "keywords": "Method SetPrimaryController Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPrimaryController(ControllerType) Set the primary controller in global system public static void SetPrimaryController(ControllerType controllerType) Parameters controllerType ControllerType Primary controller"
  },
  "api/YVR.Core.YVRInput.Update.html": {
    "href": "api/YVR.Core.YVRInput.Update.html",
    "title": "Method Update | Core",
    "keywords": "Method Update Namespace YVR.Core Assembly YVR.Core.Runtime.dll Update() [ExcludeFromDocs] public static void Update()"
  },
  "api/YVR.Core.YVRInput.VirtualAxis1D.html": {
    "href": "api/YVR.Core.YVRInput.VirtualAxis1D.html",
    "title": "Enum YVRInput.VirtualAxis1D | Core",
    "keywords": "Enum YVRInput.VirtualAxis1D Namespace YVR.Core Assembly YVR.Core.Runtime.dll Virtual 1D Axis mapping for controller public enum YVRInput.VirtualAxis1D Fields Any = -1 Any 1D Axis IndexTrigger = 1 Index Trigger 1D Axis None = 0 Not a 1D Axis"
  },
  "api/YVR.Core.YVRInput.VirtualAxis2D.html": {
    "href": "api/YVR.Core.YVRInput.VirtualAxis2D.html",
    "title": "Enum YVRInput.VirtualAxis2D | Core",
    "keywords": "Enum YVRInput.VirtualAxis2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll Virtual 2D Axis mapping for controllers public enum YVRInput.VirtualAxis2D Fields None = 0 Not a virtual 2D Axis Thumbstick = 2 Thumb Stick 2D Axis"
  },
  "api/YVR.Core.YVRInput.VirtualButton.html": {
    "href": "api/YVR.Core.YVRInput.VirtualButton.html",
    "title": "Enum YVRInput.VirtualButton | Core",
    "keywords": "Enum YVRInput.VirtualButton Namespace YVR.Core Assembly YVR.Core.Runtime.dll Virtual button mapping for controllers public enum YVRInput.VirtualButton : uint Fields Any = 4294967295 Any Button HandTrigger = 16 Hand Trigger Button IndexTrigger = 8 Index Trigger Button None = 0 Not a button One = 1 One Button Start = 4 Start Button ThumbDown = 128 Thumb Down Button ThumbLeft = 256 Thumb Left Button ThumbRight = 512 Thumb Right Button ThumbStick = 32 Thumb Stick Button ThumbUp = 64 Thumb Up Button Two = 2 Two Button"
  },
  "api/YVR.Core.YVRInput.VirtualTouch.html": {
    "href": "api/YVR.Core.YVRInput.VirtualTouch.html",
    "title": "Enum YVRInput.VirtualTouch | Core",
    "keywords": "Enum YVRInput.VirtualTouch Namespace YVR.Core Assembly YVR.Core.Runtime.dll Virtual touch mapping for controllers public enum YVRInput.VirtualTouch : uint Fields Any = 4294967295 Any Touch IndexTrigger = 8 Index Trigger Touch None = 0 Not a touch One = 1 One Touch Thumbstick = 32 Thumb Stick Touch Two = 2 Two Touch"
  },
  "api/YVR.Core.YVRInput.html": {
    "href": "api/YVR.Core.YVRInput.html",
    "title": "Class YVRInput | Core",
    "keywords": "Class YVRInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll Implements all controllers input state related functions public static class YVRInput Inheritance object YVRInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearActiveController() Set the existing active controller flag to None and start recording it again. ClearClickedController() Set the existing clicked controller flag to None and start recording it again. ClearTouchedController() Set the existing touched controller flag to None and start recording it again. Get(RawAxis1D, ControllerType) Get the trigger position Get(RawAxis2D, ControllerType) Get the thumbstick position Get(RawButton, ControllerType) Whether the button is holds down Get(RawTouch, ControllerType) Whether the button is being touched Get(VirtualAxis1D, ControllerType) Get the trigger position Get(VirtualAxis2D, ControllerType) Get the thumbstick position Get(VirtualButton, ControllerType) Whether the button is holds down Get(VirtualTouch, ControllerType) Whether the button is being touched GetActiveController() Get the active controller in current frame. GetClickedController() Get last clicked controller GetControllerBatteryPercentRemaining(ControllerType) Get the remaining battery of the controller in percent GetControllerIsCharging(ControllerType) GetDown(RawButton, ControllerType) Whether the button is pressed down in this frame GetDown(RawTouch, ControllerType) Whether the button is touched down in this frame GetDown(VirtualButton, ControllerType) Whether the button is pressed down in this frame GetDown(VirtualTouch, ControllerType) Whether the button is touched down in this frame GetPrimaryController() Get the primary controller set in the global system GetTouchedController() Get last touched controller GetUp(RawButton, ControllerType) Whether the button is pressed up in this frame GetUp(RawTouch, ControllerType) Whether the button is touched up in this frame GetUp(VirtualButton, ControllerType) Whether the button is pressed up in this frame GetUp(VirtualTouch, ControllerType) Whether the button is touched up in this frame IsControllerConnected(ControllerType) Is controller connected or not SetControllerVibration(float, float, float, ControllerType) Make specific controller vibrate at the set frequency and amplitude SetControllerVibration(float, float, ControllerType) Make specific controller vibrate at the set frequency and amplitude SetPrimaryController(ControllerType) Set the primary controller in global system Update()"
  },
  "api/YVR.Core.YVRInputDebug.AddVibrateAmplitude.html": {
    "href": "api/YVR.Core.YVRInputDebug.AddVibrateAmplitude.html",
    "title": "Method AddVibrateAmplitude | Core",
    "keywords": "Method AddVibrateAmplitude Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddVibrateAmplitude(float) public void AddVibrateAmplitude(float step) Parameters step float"
  },
  "api/YVR.Core.YVRInputDebug.AddVibrateFrequency.html": {
    "href": "api/YVR.Core.YVRInputDebug.AddVibrateFrequency.html",
    "title": "Method AddVibrateFrequency | Core",
    "keywords": "Method AddVibrateFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddVibrateFrequency(float) public void AddVibrateFrequency(float step) Parameters step float"
  },
  "api/YVR.Core.YVRInputDebug.LeftControllerStartVibrating.html": {
    "href": "api/YVR.Core.YVRInputDebug.LeftControllerStartVibrating.html",
    "title": "Method LeftControllerStartVibrating | Core",
    "keywords": "Method LeftControllerStartVibrating Namespace YVR.Core Assembly YVR.Core.Runtime.dll LeftControllerStartVibrating() public void LeftControllerStartVibrating()"
  },
  "api/YVR.Core.YVRInputDebug.LeftControllerStopVibrating.html": {
    "href": "api/YVR.Core.YVRInputDebug.LeftControllerStopVibrating.html",
    "title": "Method LeftControllerStopVibrating | Core",
    "keywords": "Method LeftControllerStopVibrating Namespace YVR.Core Assembly YVR.Core.Runtime.dll LeftControllerStopVibrating() public void LeftControllerStopVibrating()"
  },
  "api/YVR.Core.YVRInputDebug.MinusVibrateAmplitude.html": {
    "href": "api/YVR.Core.YVRInputDebug.MinusVibrateAmplitude.html",
    "title": "Method MinusVibrateAmplitude | Core",
    "keywords": "Method MinusVibrateAmplitude Namespace YVR.Core Assembly YVR.Core.Runtime.dll MinusVibrateAmplitude(float) public void MinusVibrateAmplitude(float step) Parameters step float"
  },
  "api/YVR.Core.YVRInputDebug.MinusVibrateFrequency.html": {
    "href": "api/YVR.Core.YVRInputDebug.MinusVibrateFrequency.html",
    "title": "Method MinusVibrateFrequency | Core",
    "keywords": "Method MinusVibrateFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll MinusVibrateFrequency(float) public void MinusVibrateFrequency(float step) Parameters step float"
  },
  "api/YVR.Core.YVRInputDebug.RightControllerStartVibrating.html": {
    "href": "api/YVR.Core.YVRInputDebug.RightControllerStartVibrating.html",
    "title": "Method RightControllerStartVibrating | Core",
    "keywords": "Method RightControllerStartVibrating Namespace YVR.Core Assembly YVR.Core.Runtime.dll RightControllerStartVibrating() public void RightControllerStartVibrating()"
  },
  "api/YVR.Core.YVRInputDebug.RightControllerStopVibrating.html": {
    "href": "api/YVR.Core.YVRInputDebug.RightControllerStopVibrating.html",
    "title": "Method RightControllerStopVibrating | Core",
    "keywords": "Method RightControllerStopVibrating Namespace YVR.Core Assembly YVR.Core.Runtime.dll RightControllerStopVibrating() public void RightControllerStopVibrating()"
  },
  "api/YVR.Core.YVRInputDebug.UpdateDebugInfo.html": {
    "href": "api/YVR.Core.YVRInputDebug.UpdateDebugInfo.html",
    "title": "Method UpdateDebugInfo | Core",
    "keywords": "Method UpdateDebugInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateDebugInfo() protected override void UpdateDebugInfo()"
  },
  "api/YVR.Core.YVRInputDebug.debugInfoScrollRect.html": {
    "href": "api/YVR.Core.YVRInputDebug.debugInfoScrollRect.html",
    "title": "Field debugInfoScrollRect | Core",
    "keywords": "Field debugInfoScrollRect Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ScrollRect debugInfoScrollRect Returns ScrollRect"
  },
  "api/YVR.Core.YVRInputDebug.html": {
    "href": "api/YVR.Core.YVRInputDebug.html",
    "title": "Class YVRInputDebug | Core",
    "keywords": "Class YVRInputDebug Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputDebug : YVRDebugHub Inheritance object Object Component Behaviour MonoBehaviour YVRDebugHub YVRInputDebug Inherited Members YVRDebugHub.Start() YVRDebugHub.InitDebugHub() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields debugInfoScrollRect logInfo stateInfo Methods AddVibrateAmplitude(float) AddVibrateFrequency(float) LeftControllerStartVibrating() LeftControllerStopVibrating() MinusVibrateAmplitude(float) MinusVibrateFrequency(float) RightControllerStartVibrating() RightControllerStopVibrating() UpdateDebugInfo()"
  },
  "api/YVR.Core.YVRInputDebug.logInfo.html": {
    "href": "api/YVR.Core.YVRInputDebug.logInfo.html",
    "title": "Field logInfo | Core",
    "keywords": "Field logInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text logInfo Returns Text"
  },
  "api/YVR.Core.YVRInputDebug.stateInfo.html": {
    "href": "api/YVR.Core.YVRInputDebug.stateInfo.html",
    "title": "Field stateInfo | Core",
    "keywords": "Field stateInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text stateInfo Returns Text"
  },
  "api/YVR.Core.YVRInputModule.GetFirstRaycast.html": {
    "href": "api/YVR.Core.YVRInputModule.GetFirstRaycast.html",
    "title": "Method GetFirstRaycast | Core",
    "keywords": "Method GetFirstRaycast Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetFirstRaycast(Vector3, Vector3, Vector2, List<RaycastResult>) Use event system to get first raycast result public RaycastResult GetFirstRaycast(Vector3 origin, Vector3 direction, Vector2 scrollDelta = default, List<RaycastResult> raycastResults = null) Parameters origin Vector3 Ray origin direction Vector3 Ray direction scrollDelta Vector2 ScrollDelta, default to be zero raycastResults List<RaycastResult> List to contain all raycast results, default to be null Returns RaycastResult"
  },
  "api/YVR.Core.YVRInputModule.GetSimulatedButtonState.html": {
    "href": "api/YVR.Core.YVRInputModule.GetSimulatedButtonState.html",
    "title": "Method GetSimulatedButtonState | Core",
    "keywords": "Method GetSimulatedButtonState Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSimulatedButtonState() Get the simulate button state (press / released or not) in this frame protected virtual PointerEventData.FramePressState GetSimulatedButtonState() Returns PointerEventData.FramePressState Simulated button state"
  },
  "api/YVR.Core.YVRInputModule.GetSimulatedMouseState.html": {
    "href": "api/YVR.Core.YVRInputModule.GetSimulatedMouseState.html",
    "title": "Method GetSimulatedMouseState | Core",
    "keywords": "Method GetSimulatedMouseState Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSimulatedMouseState() Get the simulated mouse state which override the default mouse state required by PointerInputModule protected virtual PointerInputModule.MouseState GetSimulatedMouseState() Returns PointerInputModule.MouseState Simulated mouse state through custom ray"
  },
  "api/YVR.Core.YVRInputModule.Instance.html": {
    "href": "api/YVR.Core.YVRInputModule.Instance.html",
    "title": "Property Instance | Core",
    "keywords": "Property Instance Namespace YVR.Core Assembly YVR.Core.Runtime.dll Instance Get Instance of YVRInputModule public static YVRInputModule Instance { get; } Property Value YVRInputModule"
  },
  "api/YVR.Core.YVRInputModule.OnDestroy.html": {
    "href": "api/YVR.Core.YVRInputModule.OnDestroy.html",
    "title": "Method OnDestroy | Core",
    "keywords": "Method OnDestroy Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnDestroy() [ExcludeFromDocs] protected override void OnDestroy()"
  },
  "api/YVR.Core.YVRInputModule.Process.html": {
    "href": "api/YVR.Core.YVRInputModule.Process.html",
    "title": "Method Process | Core",
    "keywords": "Method Process Namespace YVR.Core Assembly YVR.Core.Runtime.dll Process() Override PointerInputModule.Process to handle custom input events public override void Process()"
  },
  "api/YVR.Core.YVRInputModule.ProcessDrag.html": {
    "href": "api/YVR.Core.YVRInputModule.ProcessDrag.html",
    "title": "Method ProcessDrag | Core",
    "keywords": "Method ProcessDrag Namespace YVR.Core Assembly YVR.Core.Runtime.dll ProcessDrag(MouseButtonEventData) Process the simulated mouse drag state protected virtual void ProcessDrag(PointerInputModule.MouseButtonEventData mouseData) Parameters mouseData PointerInputModule.MouseButtonEventData Target simulated mouse data"
  },
  "api/YVR.Core.YVRInputModule.ProcessMousePress.html": {
    "href": "api/YVR.Core.YVRInputModule.ProcessMousePress.html",
    "title": "Method ProcessMousePress | Core",
    "keywords": "Method ProcessMousePress Namespace YVR.Core Assembly YVR.Core.Runtime.dll ProcessMousePress(MouseButtonEventData) Process the simulated mouse button press state protected virtual void ProcessMousePress(PointerInputModule.MouseButtonEventData mouseData) Parameters mouseData PointerInputModule.MouseButtonEventData Target simulated mouse data"
  },
  "api/YVR.Core.YVRInputModule.ProcessMouseState.html": {
    "href": "api/YVR.Core.YVRInputModule.ProcessMouseState.html",
    "title": "Method ProcessMouseState | Core",
    "keywords": "Method ProcessMouseState Namespace YVR.Core Assembly YVR.Core.Runtime.dll ProcessMouseState(MouseState) Process the simulated mouse state protected virtual void ProcessMouseState(PointerInputModule.MouseState mouseState) Parameters mouseState PointerInputModule.MouseState Simulated mouse state"
  },
  "api/YVR.Core.YVRInputModule.ProcessMove.html": {
    "href": "api/YVR.Core.YVRInputModule.ProcessMove.html",
    "title": "Method ProcessMove | Core",
    "keywords": "Method ProcessMove Namespace YVR.Core Assembly YVR.Core.Runtime.dll ProcessMove(PointerEventData) Process the simulated mouse move state protected override void ProcessMove(PointerEventData pointerEvent) Parameters pointerEvent PointerEventData Target simulated mouse data"
  },
  "api/YVR.Core.YVRInputModule.ProcessScroll.html": {
    "href": "api/YVR.Core.YVRInputModule.ProcessScroll.html",
    "title": "Method ProcessScroll | Core",
    "keywords": "Method ProcessScroll Namespace YVR.Core Assembly YVR.Core.Runtime.dll ProcessScroll(MouseButtonEventData) Process the simulated mouse scroll state protected virtual void ProcessScroll(PointerInputModule.MouseButtonEventData mouseData) Parameters mouseData PointerInputModule.MouseButtonEventData Target simulated mouse data"
  },
  "api/YVR.Core.YVRInputModule.SetInputDataProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.SetInputDataProvider.html",
    "title": "Method SetInputDataProvider | Core",
    "keywords": "Method SetInputDataProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetInputDataProvider(DataProviderSource) Set the currently used data provider public void SetInputDataProvider(DataProviderSource source) Parameters source DataProviderSource"
  },
  "api/YVR.Core.YVRInputModule.Start.html": {
    "href": "api/YVR.Core.YVRInputModule.Start.html",
    "title": "Method Start | Core",
    "keywords": "Method Start Namespace YVR.Core Assembly YVR.Core.Runtime.dll Start() [ExcludeFromDocs] protected override void Start()"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.html",
    "title": "Class YVRInputModule.YVRInputDataBaseProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataBaseProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll The base class of the input data provider public abstract class YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider Derived YVRInputModule.YVRInputDataDummyProvider YVRInputModule.YVRInputDataHMDProvider YVRInputModule.YVRInputDataLControllerProvider YVRInputModule.YVRInputDataLHandTrackingProvider YVRInputModule.YVRInputDataRControllerProvider YVRInputModule.YVRInputDataRHandTrackingProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayDirection The direction of the ray. rayOrigin The origin point of the ray. rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up Methods onRaycastHit(GameObject) Result detection of each frame of ray detection"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public abstract bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.onRaycastHit.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.onRaycastHit.html",
    "title": "Method onRaycastHit | Core",
    "keywords": "Method onRaycastHit Namespace YVR.Core Assembly YVR.Core.Runtime.dll onRaycastHit(GameObject) Result detection of each frame of ray detection public virtual void onRaycastHit(GameObject go) Parameters go GameObject the object the raycast hit"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public abstract bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.rayDirection.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.rayDirection.html",
    "title": "Property rayDirection | Core",
    "keywords": "Property rayDirection Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayDirection The direction of the ray. public virtual Vector3 rayDirection { get; } Property Value Vector3"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.rayOrigin.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.rayOrigin.html",
    "title": "Property rayOrigin | Core",
    "keywords": "Property rayOrigin Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayOrigin The origin point of the ray. public virtual Vector3 rayOrigin { get; } Property Value Vector3"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public abstract Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public abstract bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public abstract Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public abstract bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataBaseProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public abstract bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.html",
    "title": "Class YVRInputModule.YVRInputDataDummyProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataDummyProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputModule.YVRInputDataDummyProvider : YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider YVRInputModule.YVRInputDataDummyProvider Inherited Members YVRInputModule.YVRInputDataBaseProvider.rayDirection YVRInputModule.YVRInputDataBaseProvider.rayOrigin YVRInputModule.YVRInputDataBaseProvider.onRaycastHit(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public override bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public override bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public override Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public override bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public override Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public override bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataDummyProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public override bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.html",
    "title": "Class YVRInputModule.YVRInputDataHMDProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataHMDProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputModule.YVRInputDataHMDProvider : YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider YVRInputModule.YVRInputDataHMDProvider Inherited Members YVRInputModule.YVRInputDataBaseProvider.rayDirection YVRInputModule.YVRInputDataBaseProvider.rayOrigin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up Methods onRaycastHit(GameObject) Result detection of each frame of ray detection"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public override bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.onRaycastHit.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.onRaycastHit.html",
    "title": "Method onRaycastHit | Core",
    "keywords": "Method onRaycastHit Namespace YVR.Core Assembly YVR.Core.Runtime.dll onRaycastHit(GameObject) Result detection of each frame of ray detection public override void onRaycastHit(GameObject go) Parameters go GameObject the object the raycast hit"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public override bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public override Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public override bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public override Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public override bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataHMDProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public override bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.html",
    "title": "Class YVRInputModule.YVRInputDataLControllerProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataLControllerProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputModule.YVRInputDataLControllerProvider : YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider YVRInputModule.YVRInputDataLControllerProvider Inherited Members YVRInputModule.YVRInputDataBaseProvider.rayDirection YVRInputModule.YVRInputDataBaseProvider.rayOrigin YVRInputModule.YVRInputDataBaseProvider.onRaycastHit(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public override bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public override bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public override Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public override bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public override Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public override bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLControllerProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public override bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.html",
    "title": "Class YVRInputModule.YVRInputDataLHandTrackingProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataLHandTrackingProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputModule.YVRInputDataLHandTrackingProvider : YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider YVRInputModule.YVRInputDataLHandTrackingProvider Inherited Members YVRInputModule.YVRInputDataBaseProvider.rayDirection YVRInputModule.YVRInputDataBaseProvider.rayOrigin YVRInputModule.YVRInputDataBaseProvider.onRaycastHit(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public override bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public override bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public override Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public override bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public override Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public override bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataLHandTrackingProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public override bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.html",
    "title": "Class YVRInputModule.YVRInputDataRControllerProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataRControllerProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputModule.YVRInputDataRControllerProvider : YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider YVRInputModule.YVRInputDataRControllerProvider Inherited Members YVRInputModule.YVRInputDataBaseProvider.rayDirection YVRInputModule.YVRInputDataBaseProvider.rayOrigin YVRInputModule.YVRInputDataBaseProvider.onRaycastHit(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public override bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public override bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public override Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public override bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public override Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public override bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRControllerProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public override bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.html",
    "title": "Class YVRInputModule.YVRInputDataRHandTrackingProvider | Core",
    "keywords": "Class YVRInputModule.YVRInputDataRHandTrackingProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRInputModule.YVRInputDataRHandTrackingProvider : YVRInputModule.YVRInputDataBaseProvider Inheritance object YVRInputModule.YVRInputDataBaseProvider YVRInputModule.YVRInputDataRHandTrackingProvider Inherited Members YVRInputModule.YVRInputDataBaseProvider.rayDirection YVRInputModule.YVRInputDataBaseProvider.rayOrigin YVRInputModule.YVRInputDataBaseProvider.onRaycastHit(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties longPressed Whether to press for a long time pressed Pressed or not rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. released Released or not scrollData The data of scroll thumbStickDown Whether thumbStick down thumbStickUp Whether thumbStick up"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.longPressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.longPressed.html",
    "title": "Property longPressed | Core",
    "keywords": "Property longPressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll longPressed Whether to press for a long time public override bool longPressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.pressed.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.pressed.html",
    "title": "Property pressed | Core",
    "keywords": "Property pressed Namespace YVR.Core Assembly YVR.Core.Runtime.dll pressed Pressed or not public override bool pressed { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform The origin point of the ray is rayTransform.position. The direction of the ray is rayTransform.forward. public override Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.released.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.released.html",
    "title": "Property released | Core",
    "keywords": "Property released Namespace YVR.Core Assembly YVR.Core.Runtime.dll released Released or not public override bool released { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.scrollData.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.scrollData.html",
    "title": "Property scrollData | Core",
    "keywords": "Property scrollData Namespace YVR.Core Assembly YVR.Core.Runtime.dll scrollData The data of scroll public override Vector2 scrollData { get; } Property Value Vector2"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.thumbStickDown.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.thumbStickDown.html",
    "title": "Property thumbStickDown | Core",
    "keywords": "Property thumbStickDown Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickDown Whether thumbStick down public override bool thumbStickDown { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.thumbStickUp.html": {
    "href": "api/YVR.Core.YVRInputModule.YVRInputDataRHandTrackingProvider.thumbStickUp.html",
    "title": "Property thumbStickUp | Core",
    "keywords": "Property thumbStickUp Namespace YVR.Core Assembly YVR.Core.Runtime.dll thumbStickUp Whether thumbStick up public override bool thumbStickUp { get; } Property Value bool"
  },
  "api/YVR.Core.YVRInputModule.customProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.customProvider.html",
    "title": "Field customProvider | Core",
    "keywords": "Field customProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll Customized input data provider public YVRInputModule.YVRInputDataBaseProvider customProvider Returns YVRInputModule.YVRInputDataBaseProvider Customized input data provider"
  },
  "api/YVR.Core.YVRInputModule.disableModuleOnFocusLost.html": {
    "href": "api/YVR.Core.YVRInputModule.disableModuleOnFocusLost.html",
    "title": "Field disableModuleOnFocusLost | Core",
    "keywords": "Field disableModuleOnFocusLost Namespace YVR.Core Assembly YVR.Core.Runtime.dll Disable YVRInputModule when losing focus [SerializeField] protected bool disableModuleOnFocusLost Returns bool Disable YVRInputModule when losing focus"
  },
  "api/YVR.Core.YVRInputModule.dragAngleThreshold.html": {
    "href": "api/YVR.Core.YVRInputModule.dragAngleThreshold.html",
    "title": "Field dragAngleThreshold | Core",
    "keywords": "Field dragAngleThreshold Namespace YVR.Core Assembly YVR.Core.Runtime.dll Minimum drag threshold in degree public float dragAngleThreshold Returns float Minimum drag threshold in degree"
  },
  "api/YVR.Core.YVRInputModule.enableHMDRayAgent.html": {
    "href": "api/YVR.Core.YVRInputModule.enableHMDRayAgent.html",
    "title": "Field enableHMDRayAgent | Core",
    "keywords": "Field enableHMDRayAgent Namespace YVR.Core Assembly YVR.Core.Runtime.dll Whether use HMD as ray transform when both controller is disconnected public bool enableHMDRayAgent Returns bool Whether use HMD as ray transform when both controller is disconnected"
  },
  "api/YVR.Core.YVRInputModule.eventData.html": {
    "href": "api/YVR.Core.YVRInputModule.eventData.html",
    "title": "Property eventData | Core",
    "keywords": "Property eventData Namespace YVR.Core Assembly YVR.Core.Runtime.dll eventData The event data set from input module to event system public YVRPointerEventData eventData { get; } Property Value YVRPointerEventData"
  },
  "api/YVR.Core.YVRInputModule.html": {
    "href": "api/YVR.Core.YVRInputModule.html",
    "title": "Class YVRInputModule | Core",
    "keywords": "Class YVRInputModule Namespace YVR.Core Assembly YVR.Core.Runtime.dll Override PointerInputModule to allow UI to interact with custom ray public class YVRInputModule : PointerInputModule Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseInputModule PointerInputModule YVRInputModule Inherited Members PointerInputModule.kMouseLeftId PointerInputModule.kMouseRightId PointerInputModule.kMouseMiddleId PointerInputModule.kFakeTouchesId PointerInputModule.m_PointerData PointerInputModule.GetPointerData(int, out PointerEventData, bool) PointerInputModule.RemovePointerData(PointerEventData) PointerInputModule.GetTouchPointerEventData(Touch, out bool, out bool) PointerInputModule.CopyFromTo(PointerEventData, PointerEventData) PointerInputModule.StateForMouseButton(int) PointerInputModule.GetMousePointerEventData() PointerInputModule.GetMousePointerEventData(int) PointerInputModule.GetLastPointerEventData(int) PointerInputModule.ProcessDrag(PointerEventData) PointerInputModule.IsPointerOverGameObject(int) PointerInputModule.ClearSelection() PointerInputModule.ToString() PointerInputModule.DeselectIfSelectionChanged(GameObject, BaseEventData) BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(float, float) BaseInputModule.DetermineMoveDirection(float, float, float) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(float, float, float) BaseInputModule.GetBaseEventData() BaseInputModule.ShouldActivateModule() BaseInputModule.DeactivateModule() BaseInputModule.ActivateModule() BaseInputModule.UpdateModule() BaseInputModule.IsModuleSupported() BaseInputModule.ConvertUIToolkitPointerId(PointerEventData) BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem UIBehaviour.Awake() UIBehaviour.IsActive() UIBehaviour.OnValidate() UIBehaviour.Reset() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields customProvider Customized input data provider disableModuleOnFocusLost Disable YVRInputModule when losing focus dragAngleThreshold Minimum drag threshold in degree enableHMDRayAgent Whether use HMD as ray transform when both controller is disconnected Properties Instance Get Instance of YVRInputModule eventData The event data set from input module to event system inputDataProvider Current using input data provider inputDataProviderSource current using input data provider source rayTransform Transform that decide ray's origin and direction raycastGameObject The ray casting game object of this frame raycastResult The raycast result of this frame Methods GetFirstRaycast(Vector3, Vector3, Vector2, List<RaycastResult>) Use event system to get first raycast result GetSimulatedButtonState() Get the simulate button state (press / released or not) in this frame GetSimulatedMouseState() Get the simulated mouse state which override the default mouse state required by PointerInputModule OnDestroy() Process() Override PointerInputModule.Process to handle custom input events ProcessDrag(MouseButtonEventData) Process the simulated mouse drag state ProcessMousePress(MouseButtonEventData) Process the simulated mouse button press state ProcessMouseState(MouseState) Process the simulated mouse state ProcessMove(PointerEventData) Process the simulated mouse move state ProcessScroll(MouseButtonEventData) Process the simulated mouse scroll state SetInputDataProvider(DataProviderSource) Set the currently used data provider Start() Events onInputDataProviderChanged Callback when module input changed onRaycastHit Callback when raycast hit sth See Also YVRGraphicRaycaster YVRPhysicsRaycaster"
  },
  "api/YVR.Core.YVRInputModule.inputDataProvider.html": {
    "href": "api/YVR.Core.YVRInputModule.inputDataProvider.html",
    "title": "Property inputDataProvider | Core",
    "keywords": "Property inputDataProvider Namespace YVR.Core Assembly YVR.Core.Runtime.dll inputDataProvider Current using input data provider public YVRInputModule.YVRInputDataBaseProvider inputDataProvider { get; } Property Value YVRInputModule.YVRInputDataBaseProvider"
  },
  "api/YVR.Core.YVRInputModule.inputDataProviderSource.html": {
    "href": "api/YVR.Core.YVRInputModule.inputDataProviderSource.html",
    "title": "Property inputDataProviderSource | Core",
    "keywords": "Property inputDataProviderSource Namespace YVR.Core Assembly YVR.Core.Runtime.dll inputDataProviderSource current using input data provider source public DataProviderSource inputDataProviderSource { get; } Property Value DataProviderSource"
  },
  "api/YVR.Core.YVRInputModule.onInputDataProviderChanged.html": {
    "href": "api/YVR.Core.YVRInputModule.onInputDataProviderChanged.html",
    "title": "Event onInputDataProviderChanged | Core",
    "keywords": "Event onInputDataProviderChanged Namespace YVR.Core Assembly YVR.Core.Runtime.dll Callback when module input changed public event Action<YVRInputModule.YVRInputDataBaseProvider> onInputDataProviderChanged Returns Action<YVRInputModule.YVRInputDataBaseProvider> Callback when module input changed"
  },
  "api/YVR.Core.YVRInputModule.onRaycastHit.html": {
    "href": "api/YVR.Core.YVRInputModule.onRaycastHit.html",
    "title": "Event onRaycastHit | Core",
    "keywords": "Event onRaycastHit Namespace YVR.Core Assembly YVR.Core.Runtime.dll Callback when raycast hit sth public event Action<GameObject, Vector3, Vector3> onRaycastHit Returns Action<GameObject, Vector3, Vector3> Callback when raycast hit sth"
  },
  "api/YVR.Core.YVRInputModule.rayTransform.html": {
    "href": "api/YVR.Core.YVRInputModule.rayTransform.html",
    "title": "Property rayTransform | Core",
    "keywords": "Property rayTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll rayTransform Transform that decide ray's origin and direction public Transform rayTransform { get; } Property Value Transform"
  },
  "api/YVR.Core.YVRInputModule.raycastGameObject.html": {
    "href": "api/YVR.Core.YVRInputModule.raycastGameObject.html",
    "title": "Property raycastGameObject | Core",
    "keywords": "Property raycastGameObject Namespace YVR.Core Assembly YVR.Core.Runtime.dll raycastGameObject The ray casting game object of this frame public GameObject raycastGameObject { get; } Property Value GameObject"
  },
  "api/YVR.Core.YVRInputModule.raycastResult.html": {
    "href": "api/YVR.Core.YVRInputModule.raycastResult.html",
    "title": "Property raycastResult | Core",
    "keywords": "Property raycastResult Namespace YVR.Core Assembly YVR.Core.Runtime.dll raycastResult The raycast result of this frame public RaycastResult raycastResult { get; } Property Value RaycastResult"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.AddLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.AddLayer.html",
    "title": "Method AddLayer | Core",
    "keywords": "Method AddLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddLayer(int) public void AddLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.AddLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.AddLayerAsync.html",
    "title": "Method AddLayerAsync | Core",
    "keywords": "Method AddLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddLayerAsync(int, Action) public void AddLayerAsync(int layerId, Action onLayerAdded = null) Parameters layerId int onLayerAdded Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.CreateLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.CreateLayer.html",
    "title": "Method CreateLayer | Core",
    "keywords": "Method CreateLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateLayer(YVRLayerCreateInfo) public int CreateLayer(YVRLayerCreateInfo layerCreateInfo) Parameters layerCreateInfo YVRLayerCreateInfo Returns int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.CreateLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.CreateLayerAsync.html",
    "title": "Method CreateLayerAsync | Core",
    "keywords": "Method CreateLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateLayerAsync(YVRLayerCreateInfo, Action<int>) public void CreateLayerAsync(YVRLayerCreateInfo layerCreateInfo, Action<int> onLayerCreated = null) Parameters layerCreateInfo YVRLayerCreateInfo onLayerCreated Action<int>"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.DestroyLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.DestroyLayer.html",
    "title": "Method DestroyLayer | Core",
    "keywords": "Method DestroyLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyLayer(int, bool) public void DestroyLayer(int layer, bool destroyImmediate) Parameters layer int destroyImmediate bool"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.DestroyLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.DestroyLayerAsync.html",
    "title": "Method DestroyLayerAsync | Core",
    "keywords": "Method DestroyLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyLayerAsync(int, bool, Action) public void DestroyLayerAsync(int layerId, bool destroyImmediate, Action onLayerDestroyed = null) Parameters layerId int destroyImmediate bool onLayerDestroyed Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.Finalize.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.Finalize.html",
    "title": "Method ~YVRLayerAndroidHandler | Core",
    "keywords": "Method ~YVRLayerAndroidHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll ~YVRLayerAndroidHandler() protected ~YVRLayerAndroidHandler()"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.GetAlLayersColorHandle.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.GetAlLayersColorHandle.html",
    "title": "Method GetAlLayersColorHandle | Core",
    "keywords": "Method GetAlLayersColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAlLayersColorHandle() public int[] GetAlLayersColorHandle() Returns int[]"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.GetEyeBufferLayerId.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.GetEyeBufferLayerId.html",
    "title": "Method GetEyeBufferLayerId | Core",
    "keywords": "Method GetEyeBufferLayerId Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeBufferLayerId() public int GetEyeBufferLayerId() Returns int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.GetLayerColorHandle.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.GetLayerColorHandle.html",
    "title": "Method GetLayerColorHandle | Core",
    "keywords": "Method GetLayerColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayerColorHandle(int, int) public int GetLayerColorHandle(int layerId, int index) Parameters layerId int index int Returns int GetLayerColorHandle(int) public int GetLayerColorHandle(int layerId) Parameters layerId int Returns int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.GetLayerSurface.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.GetLayerSurface.html",
    "title": "Method GetLayerSurface | Core",
    "keywords": "Method GetLayerSurface Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayerSurface(int) public IntPtr GetLayerSurface(int layerId) Parameters layerId int Returns IntPtr"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.GetLayersCount.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.GetLayersCount.html",
    "title": "Method GetLayersCount | Core",
    "keywords": "Method GetLayersCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayersCount() public int GetLayersCount() Returns int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.PrepareAddLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.PrepareAddLayer.html",
    "title": "Method PrepareAddLayer | Core",
    "keywords": "Method PrepareAddLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareAddLayer(Action) public void PrepareAddLayer(Action onPrepareAddLayer = null) Parameters onPrepareAddLayer Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.PrepareCreateLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.PrepareCreateLayerAsync.html",
    "title": "Method PrepareCreateLayerAsync | Core",
    "keywords": "Method PrepareCreateLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareCreateLayerAsync(Action) public void PrepareCreateLayerAsync(Action onPrepareCreateLayer = null) Parameters onPrepareCreateLayer Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.PrepareDestroyLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.PrepareDestroyLayerAsync.html",
    "title": "Method PrepareDestroyLayerAsync | Core",
    "keywords": "Method PrepareDestroyLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareDestroyLayerAsync(Action) public void PrepareDestroyLayerAsync(Action onPrepareDestroyLayer = null) Parameters onPrepareDestroyLayer Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.PrepareRemoveLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.PrepareRemoveLayer.html",
    "title": "Method PrepareRemoveLayer | Core",
    "keywords": "Method PrepareRemoveLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareRemoveLayer(Action) public void PrepareRemoveLayer(Action onPrepareRemoveLayer = null) Parameters onPrepareRemoveLayer Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.PrepareSetLayerVisible.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.PrepareSetLayerVisible.html",
    "title": "Method PrepareSetLayerVisible | Core",
    "keywords": "Method PrepareSetLayerVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareSetLayerVisible(bool, Action) public void PrepareSetLayerVisible(bool visible, Action onPrepareSetLayerVisible) Parameters visible bool onPrepareSetLayerVisible Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.RemoveLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.RemoveLayer.html",
    "title": "Method RemoveLayer | Core",
    "keywords": "Method RemoveLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll RemoveLayer(int) public void RemoveLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.RemoveLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.RemoveLayerAsync.html",
    "title": "Method RemoveLayerAsync | Core",
    "keywords": "Method RemoveLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll RemoveLayerAsync(int, Action) public void RemoveLayerAsync(int layerId, Action onLayerRemoved = null) Parameters layerId int onLayerRemoved Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerCylinderParam.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerCylinderParam.html",
    "title": "Method SetLayerCylinderParam | Core",
    "keywords": "Method SetLayerCylinderParam Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerCylinderParam(in int, in float, in float, in float) public void SetLayerCylinderParam(in int layerId, in float radius, in float centralAngle, in float aspectRatio) Parameters layerId int radius float centralAngle float aspectRatio float"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerDepthAsync.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerDepthAsync.html",
    "title": "Method SetLayerDepthAsync | Core",
    "keywords": "Method SetLayerDepthAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerDepthAsync(int, int, Action<bool>) public void SetLayerDepthAsync(int layerId, int depth, Action<bool> onLayerDepthSet = null) Parameters layerId int depth int onLayerDepthSet Action<bool>"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerEquirect2Param.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerEquirect2Param.html",
    "title": "Method SetLayerEquirect2Param | Core",
    "keywords": "Method SetLayerEquirect2Param Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirect2Param(in int, in float, in float, in float, in float) public void SetLayerEquirect2Param(in int layerId, in float radius, in float centralHorizontalAngle, in float upperVerticalAngle, in float lowerVerticalAngle) Parameters layerId int radius float centralHorizontalAngle float upperVerticalAngle float lowerVerticalAngle float"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerEquirectOffset.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerEquirectOffset.html",
    "title": "Method SetLayerEquirectOffset | Core",
    "keywords": "Method SetLayerEquirectOffset Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirectOffset(in int, in Rect) public void SetLayerEquirectOffset(in int layerId, in Rect offset) Parameters layerId int offset Rect"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerEquirectRadius.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerEquirectRadius.html",
    "title": "Method SetLayerEquirectRadius | Core",
    "keywords": "Method SetLayerEquirectRadius Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirectRadius(in int, in float) public void SetLayerEquirectRadius(in int layerId, in float radius) Parameters layerId int radius float"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerImageRect.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerImageRect.html",
    "title": "Method SetLayerImageRect | Core",
    "keywords": "Method SetLayerImageRect Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerImageRect(int, Rect) public void SetLayerImageRect(int layerId, Rect rect) Parameters layerId int rect Rect"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerPose.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerPose.html",
    "title": "Method SetLayerPose | Core",
    "keywords": "Method SetLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerPose(in int, in XRPose) public void SetLayerPose(in int layerId, in XRPose pose) Parameters layerId int pose XRPose"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerPreSubmitCallback.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerPreSubmitCallback.html",
    "title": "Method SetLayerPreSubmitCallback | Core",
    "keywords": "Method SetLayerPreSubmitCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerPreSubmitCallback(Action) public void SetLayerPreSubmitCallback(Action onLayerPreSubmit) Parameters onLayerPreSubmit Action"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerSettings.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerSettings.html",
    "title": "Method SetLayerSettings | Core",
    "keywords": "Method SetLayerSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerSettings(int, bool, bool, bool, bool) public void SetLayerSettings(int layerId, bool enableSuperSample, bool expensiveSuperSample, bool enableSharpen, bool expensiveSharpen) Parameters layerId int enableSuperSample bool expensiveSuperSample bool enableSharpen bool expensiveSharpen bool"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerSize.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerSize.html",
    "title": "Method SetLayerSize | Core",
    "keywords": "Method SetLayerSize Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerSize(in int, XRSize) public void SetLayerSize(in int layerId, XRSize size) Parameters layerId int size XRSize"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetLayerVisible.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetLayerVisible.html",
    "title": "Method SetLayerVisible | Core",
    "keywords": "Method SetLayerVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerVisible(int, bool) public void SetLayerVisible(int layerId, bool visible) Parameters layerId int visible bool"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SetSurfaceDimensions.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SetSurfaceDimensions.html",
    "title": "Method SetSurfaceDimensions | Core",
    "keywords": "Method SetSurfaceDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSurfaceDimensions(int, int, int) public void SetSurfaceDimensions(int layerId, int width, int height) Parameters layerId int width int height int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.SwapBufferLayer.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.SwapBufferLayer.html",
    "title": "Method SwapBufferLayer | Core",
    "keywords": "Method SwapBufferLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll SwapBufferLayer(int) public void SwapBufferLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.YVRLayerAndroidHandler.html": {
    "href": "api/YVR.Core.YVRLayerAndroidHandler.html",
    "title": "Class YVRLayerAndroidHandler | Core",
    "keywords": "Class YVRLayerAndroidHandler Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRLayerAndroidHandler : IYVRLayerHandle Inheritance object YVRLayerAndroidHandler Implements IYVRLayerHandle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddLayer(int) AddLayerAsync(int, Action) CreateLayer(YVRLayerCreateInfo) CreateLayerAsync(YVRLayerCreateInfo, Action<int>) DestroyLayer(int, bool) DestroyLayerAsync(int, bool, Action) ~YVRLayerAndroidHandler() GetAlLayersColorHandle() GetEyeBufferLayerId() GetLayerColorHandle(int) GetLayerColorHandle(int, int) GetLayerSurface(int) GetLayersCount() PrepareAddLayer(Action) PrepareCreateLayerAsync(Action) PrepareDestroyLayerAsync(Action) PrepareRemoveLayer(Action) PrepareSetLayerVisible(bool, Action) RemoveLayer(int) RemoveLayerAsync(int, Action) SetLayerCylinderParam(in int, in float, in float, in float) SetLayerDepthAsync(int, int, Action<bool>) SetLayerEquirect2Param(in int, in float, in float, in float, in float) SetLayerEquirectOffset(in int, in Rect) SetLayerEquirectRadius(in int, in float) SetLayerImageRect(int, Rect) SetLayerPose(in int, in XRPose) SetLayerPreSubmitCallback(Action) SetLayerSettings(int, bool, bool, bool, bool) SetLayerSize(in int, XRSize) SetLayerVisible(int, bool) SetSurfaceDimensions(int, int, int) SwapBufferLayer(int)"
  },
  "api/YVR.Core.YVRLayerCreateInfo.-ctor.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.-ctor.html",
    "title": "Constructor YVRLayerCreateInfo | Core",
    "keywords": "Constructor YVRLayerCreateInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRLayerCreateInfo(int, int, int, int, YVRRenderLayerType, int, YVRRenderLayerEyeMask, bool, bool) public YVRLayerCreateInfo(int depth, int width, int height, int swapChainBufferCount, YVRRenderLayerType renderLayerType, int batchedLayerId = -1, YVRRenderLayerEyeMask renderLayerEyeMask = YVRRenderLayerEyeMask.kEyeMaskBoth, bool isSurfaceSwapChain = false, bool autoShowAfterCreated = true) Parameters depth int width int height int swapChainBufferCount int renderLayerType YVRRenderLayerType batchedLayerId int renderLayerEyeMask YVRRenderLayerEyeMask isSurfaceSwapChain bool autoShowAfterCreated bool YVRLayerCreateInfo(int, int, int, int, int, int, bool, bool, bool, YVRRenderLayerType, YVRRenderLayerEyeMask, int) public YVRLayerCreateInfo(int depth, int width, int height, int swapChainBufferCount, int textureType, int layerFlags, bool separateSwapChain, bool autoShowAfterCreated, bool isSurfaceSwapChain, YVRRenderLayerType renderLayerType, YVRRenderLayerEyeMask renderLayerEyeMask, int batchedLayerId) Parameters depth int width int height int swapChainBufferCount int textureType int layerFlags int separateSwapChain bool autoShowAfterCreated bool isSurfaceSwapChain bool renderLayerType YVRRenderLayerType renderLayerEyeMask YVRRenderLayerEyeMask batchedLayerId int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.autoShowAfterCreated.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.autoShowAfterCreated.html",
    "title": "Field autoShowAfterCreated | Core",
    "keywords": "Field autoShowAfterCreated Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool autoShowAfterCreated Returns bool"
  },
  "api/YVR.Core.YVRLayerCreateInfo.batchedLayerId.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.batchedLayerId.html",
    "title": "Field batchedLayerId | Core",
    "keywords": "Field batchedLayerId Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int batchedLayerId Returns int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.depth.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.depth.html",
    "title": "Field depth | Core",
    "keywords": "Field depth Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int depth Returns int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.height.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.height.html",
    "title": "Field height | Core",
    "keywords": "Field height Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int height Returns int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.html",
    "title": "Struct YVRLayerCreateInfo | Core",
    "keywords": "Struct YVRLayerCreateInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRLayerCreateInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors YVRLayerCreateInfo(int, int, int, int, int, int, bool, bool, bool, YVRRenderLayerType, YVRRenderLayerEyeMask, int) YVRLayerCreateInfo(int, int, int, int, YVRRenderLayerType, int, YVRRenderLayerEyeMask, bool, bool) Fields autoShowAfterCreated batchedLayerId depth height isSurfaceSwapChain layerFlags renderLayerEyeMask renderLayerType separateSwapChain swapChainBufferCount textureType width"
  },
  "api/YVR.Core.YVRLayerCreateInfo.isSurfaceSwapChain.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.isSurfaceSwapChain.html",
    "title": "Field isSurfaceSwapChain | Core",
    "keywords": "Field isSurfaceSwapChain Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool isSurfaceSwapChain Returns bool"
  },
  "api/YVR.Core.YVRLayerCreateInfo.layerFlags.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.layerFlags.html",
    "title": "Field layerFlags | Core",
    "keywords": "Field layerFlags Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int layerFlags Returns int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.renderLayerEyeMask.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.renderLayerEyeMask.html",
    "title": "Field renderLayerEyeMask | Core",
    "keywords": "Field renderLayerEyeMask Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRRenderLayerEyeMask renderLayerEyeMask Returns YVRRenderLayerEyeMask"
  },
  "api/YVR.Core.YVRLayerCreateInfo.renderLayerType.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.renderLayerType.html",
    "title": "Field renderLayerType | Core",
    "keywords": "Field renderLayerType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRRenderLayerType renderLayerType Returns YVRRenderLayerType"
  },
  "api/YVR.Core.YVRLayerCreateInfo.separateSwapChain.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.separateSwapChain.html",
    "title": "Field separateSwapChain | Core",
    "keywords": "Field separateSwapChain Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool separateSwapChain Returns bool"
  },
  "api/YVR.Core.YVRLayerCreateInfo.swapChainBufferCount.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.swapChainBufferCount.html",
    "title": "Field swapChainBufferCount | Core",
    "keywords": "Field swapChainBufferCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int swapChainBufferCount Returns int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.textureType.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.textureType.html",
    "title": "Field textureType | Core",
    "keywords": "Field textureType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int textureType Returns int"
  },
  "api/YVR.Core.YVRLayerCreateInfo.width.html": {
    "href": "api/YVR.Core.YVRLayerCreateInfo.width.html",
    "title": "Field width | Core",
    "keywords": "Field width Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int width Returns int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.AddLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.AddLayer.html",
    "title": "Method AddLayer | Core",
    "keywords": "Method AddLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddLayer(int) public void AddLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.AddLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.AddLayerAsync.html",
    "title": "Method AddLayerAsync | Core",
    "keywords": "Method AddLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll AddLayerAsync(int, Action) public void AddLayerAsync(int layerId, Action onLayerAdded = null) Parameters layerId int onLayerAdded Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.CreateLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.CreateLayer.html",
    "title": "Method CreateLayer | Core",
    "keywords": "Method CreateLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateLayer(YVRLayerCreateInfo) public int CreateLayer(YVRLayerCreateInfo layerCreateInfo) Parameters layerCreateInfo YVRLayerCreateInfo Returns int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.CreateLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.CreateLayerAsync.html",
    "title": "Method CreateLayerAsync | Core",
    "keywords": "Method CreateLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateLayerAsync(YVRLayerCreateInfo, Action<int>) public void CreateLayerAsync(YVRLayerCreateInfo layerCreateInfo, Action<int> onLayerCreated = null) Parameters layerCreateInfo YVRLayerCreateInfo onLayerCreated Action<int>"
  },
  "api/YVR.Core.YVRLayerEditorHandle.DestroyLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.DestroyLayer.html",
    "title": "Method DestroyLayer | Core",
    "keywords": "Method DestroyLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyLayer(int, bool) public void DestroyLayer(int layer, bool destroyImmediate) Parameters layer int destroyImmediate bool"
  },
  "api/YVR.Core.YVRLayerEditorHandle.DestroyLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.DestroyLayerAsync.html",
    "title": "Method DestroyLayerAsync | Core",
    "keywords": "Method DestroyLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyLayerAsync(int, bool, Action) public void DestroyLayerAsync(int layerId, bool destroyImmediate, Action onLayerDestroyed = null) Parameters layerId int destroyImmediate bool onLayerDestroyed Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.GetAlLayersColorHandle.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.GetAlLayersColorHandle.html",
    "title": "Method GetAlLayersColorHandle | Core",
    "keywords": "Method GetAlLayersColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAlLayersColorHandle() public int[] GetAlLayersColorHandle() Returns int[]"
  },
  "api/YVR.Core.YVRLayerEditorHandle.GetEyeBufferLayerId.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.GetEyeBufferLayerId.html",
    "title": "Method GetEyeBufferLayerId | Core",
    "keywords": "Method GetEyeBufferLayerId Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeBufferLayerId() public int GetEyeBufferLayerId() Returns int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.GetLayerColorHandle.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.GetLayerColorHandle.html",
    "title": "Method GetLayerColorHandle | Core",
    "keywords": "Method GetLayerColorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayerColorHandle(int, int) public int GetLayerColorHandle(int layerId, int index) Parameters layerId int index int Returns int GetLayerColorHandle(int) public int GetLayerColorHandle(int layerId) Parameters layerId int Returns int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.GetLayerSurface.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.GetLayerSurface.html",
    "title": "Method GetLayerSurface | Core",
    "keywords": "Method GetLayerSurface Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayerSurface(int) public IntPtr GetLayerSurface(int layerId) Parameters layerId int Returns IntPtr"
  },
  "api/YVR.Core.YVRLayerEditorHandle.GetLayersCount.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.GetLayersCount.html",
    "title": "Method GetLayersCount | Core",
    "keywords": "Method GetLayersCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetLayersCount() public int GetLayersCount() Returns int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.PrepareAddLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.PrepareAddLayer.html",
    "title": "Method PrepareAddLayer | Core",
    "keywords": "Method PrepareAddLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareAddLayer(Action) public void PrepareAddLayer(Action onPrepareAddLayer = null) Parameters onPrepareAddLayer Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.PrepareCreateLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.PrepareCreateLayerAsync.html",
    "title": "Method PrepareCreateLayerAsync | Core",
    "keywords": "Method PrepareCreateLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareCreateLayerAsync(Action) public void PrepareCreateLayerAsync(Action onCreateLayerPrepared = null) Parameters onCreateLayerPrepared Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.PrepareDestroyLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.PrepareDestroyLayerAsync.html",
    "title": "Method PrepareDestroyLayerAsync | Core",
    "keywords": "Method PrepareDestroyLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareDestroyLayerAsync(Action) public void PrepareDestroyLayerAsync(Action onPrepareDestroyLayer = null) Parameters onPrepareDestroyLayer Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.PrepareRemoveLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.PrepareRemoveLayer.html",
    "title": "Method PrepareRemoveLayer | Core",
    "keywords": "Method PrepareRemoveLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareRemoveLayer(Action) public void PrepareRemoveLayer(Action onPrepareRemoveLayer = null) Parameters onPrepareRemoveLayer Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.PrepareSetLayerVisible.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.PrepareSetLayerVisible.html",
    "title": "Method PrepareSetLayerVisible | Core",
    "keywords": "Method PrepareSetLayerVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll PrepareSetLayerVisible(bool, Action) public void PrepareSetLayerVisible(bool visible, Action onPrepareSetLayerVisible = null) Parameters visible bool onPrepareSetLayerVisible Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.RemoveLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.RemoveLayer.html",
    "title": "Method RemoveLayer | Core",
    "keywords": "Method RemoveLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll RemoveLayer(int) public void RemoveLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.RemoveLayerAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.RemoveLayerAsync.html",
    "title": "Method RemoveLayerAsync | Core",
    "keywords": "Method RemoveLayerAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll RemoveLayerAsync(int, Action) public void RemoveLayerAsync(int layerId, Action onLayerAdded = null) Parameters layerId int onLayerAdded Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerCylinderParam.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerCylinderParam.html",
    "title": "Method SetLayerCylinderParam | Core",
    "keywords": "Method SetLayerCylinderParam Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerCylinderParam(in int, in float, in float, in float) public void SetLayerCylinderParam(in int layerId, in float radius, in float centralAngle, in float aspectRatio) Parameters layerId int radius float centralAngle float aspectRatio float"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerDepthAsync.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerDepthAsync.html",
    "title": "Method SetLayerDepthAsync | Core",
    "keywords": "Method SetLayerDepthAsync Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerDepthAsync(int, int, Action<bool>) public void SetLayerDepthAsync(int layerId, int depth, Action<bool> onLayerDepthSet = null) Parameters layerId int depth int onLayerDepthSet Action<bool>"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerEquirect2Param.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerEquirect2Param.html",
    "title": "Method SetLayerEquirect2Param | Core",
    "keywords": "Method SetLayerEquirect2Param Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirect2Param(in int, in float, in float, in float, in float) public void SetLayerEquirect2Param(in int layerId, in float radius, in float centralHorizontalAngle, in float upperVerticalAngle, in float lowerVerticalAngle) Parameters layerId int radius float centralHorizontalAngle float upperVerticalAngle float lowerVerticalAngle float"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerEquirectOffset.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerEquirectOffset.html",
    "title": "Method SetLayerEquirectOffset | Core",
    "keywords": "Method SetLayerEquirectOffset Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirectOffset(in int, in Rect) public void SetLayerEquirectOffset(in int layerId, in Rect rect) Parameters layerId int rect Rect"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerEquirectRadius.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerEquirectRadius.html",
    "title": "Method SetLayerEquirectRadius | Core",
    "keywords": "Method SetLayerEquirectRadius Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerEquirectRadius(in int, in float) public void SetLayerEquirectRadius(in int layerId, in float radius) Parameters layerId int radius float"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerImageRect.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerImageRect.html",
    "title": "Method SetLayerImageRect | Core",
    "keywords": "Method SetLayerImageRect Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerImageRect(int, Rect) public void SetLayerImageRect(int layerId, Rect rect) Parameters layerId int rect Rect"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerPose.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerPose.html",
    "title": "Method SetLayerPose | Core",
    "keywords": "Method SetLayerPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerPose(in int, in XRPose) public void SetLayerPose(in int layerId, in XRPose pose) Parameters layerId int pose XRPose"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerPreSubmitCallback.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerPreSubmitCallback.html",
    "title": "Method SetLayerPreSubmitCallback | Core",
    "keywords": "Method SetLayerPreSubmitCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerPreSubmitCallback(Action) public void SetLayerPreSubmitCallback(Action onLayerPreSubmit) Parameters onLayerPreSubmit Action"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerSettings.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerSettings.html",
    "title": "Method SetLayerSettings | Core",
    "keywords": "Method SetLayerSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerSettings(int, bool, bool, bool, bool) public void SetLayerSettings(int layerId, bool enableSuperSample, bool expensiveSuperSample, bool enableSharpen, bool expensiveSharpen) Parameters layerId int enableSuperSample bool expensiveSuperSample bool enableSharpen bool expensiveSharpen bool"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerSize.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerSize.html",
    "title": "Method SetLayerSize | Core",
    "keywords": "Method SetLayerSize Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerSize(in int, XRSize) public void SetLayerSize(in int layerId, XRSize size) Parameters layerId int size XRSize"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetLayerVisible.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetLayerVisible.html",
    "title": "Method SetLayerVisible | Core",
    "keywords": "Method SetLayerVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetLayerVisible(int, bool) public void SetLayerVisible(int layerId, bool visible) Parameters layerId int visible bool"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SetSurfaceDimensions.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SetSurfaceDimensions.html",
    "title": "Method SetSurfaceDimensions | Core",
    "keywords": "Method SetSurfaceDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSurfaceDimensions(int, int, int) public void SetSurfaceDimensions(int layerId, int width, int height) Parameters layerId int width int height int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.SwapBufferLayer.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.SwapBufferLayer.html",
    "title": "Method SwapBufferLayer | Core",
    "keywords": "Method SwapBufferLayer Namespace YVR.Core Assembly YVR.Core.Runtime.dll SwapBufferLayer(int) public void SwapBufferLayer(int layerId) Parameters layerId int"
  },
  "api/YVR.Core.YVRLayerEditorHandle.html": {
    "href": "api/YVR.Core.YVRLayerEditorHandle.html",
    "title": "Class YVRLayerEditorHandle | Core",
    "keywords": "Class YVRLayerEditorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRLayerEditorHandle : IYVRLayerHandle Inheritance object YVRLayerEditorHandle Implements IYVRLayerHandle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddLayer(int) AddLayerAsync(int, Action) CreateLayer(YVRLayerCreateInfo) CreateLayerAsync(YVRLayerCreateInfo, Action<int>) DestroyLayer(int, bool) DestroyLayerAsync(int, bool, Action) GetAlLayersColorHandle() GetEyeBufferLayerId() GetLayerColorHandle(int) GetLayerColorHandle(int, int) GetLayerSurface(int) GetLayersCount() PrepareAddLayer(Action) PrepareCreateLayerAsync(Action) PrepareDestroyLayerAsync(Action) PrepareRemoveLayer(Action) PrepareSetLayerVisible(bool, Action) RemoveLayer(int) RemoveLayerAsync(int, Action) SetLayerCylinderParam(in int, in float, in float, in float) SetLayerDepthAsync(int, int, Action<bool>) SetLayerEquirect2Param(in int, in float, in float, in float, in float) SetLayerEquirectOffset(in int, in Rect) SetLayerEquirectRadius(in int, in float) SetLayerImageRect(int, Rect) SetLayerPose(in int, in XRPose) SetLayerPreSubmitCallback(Action) SetLayerSettings(int, bool, bool, bool, bool) SetLayerSize(in int, XRSize) SetLayerVisible(int, bool) SetSurfaceDimensions(int, int, int) SwapBufferLayer(int)"
  },
  "api/YVR.Core.YVRManager.EyeBufferSharpenType.html": {
    "href": "api/YVR.Core.YVRManager.EyeBufferSharpenType.html",
    "title": "Property EyeBufferSharpenType | Core",
    "keywords": "Property EyeBufferSharpenType Namespace YVR.Core Assembly YVR.Core.Runtime.dll EyeBufferSharpenType Set or get current eyebuffer sharpenType, see also YVRQualityManager public YVRQualityManager.LayerSettingsType EyeBufferSharpenType { get; set; } Property Value YVRQualityManager.LayerSettingsType"
  },
  "api/YVR.Core.YVRManager.GetAppSWEnable.html": {
    "href": "api/YVR.Core.YVRManager.GetAppSWEnable.html",
    "title": "Method GetAppSWEnable | Core",
    "keywords": "Method GetAppSWEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAppSWEnable() public bool GetAppSWEnable() Returns bool"
  },
  "api/YVR.Core.YVRManager.HandTrackingSupport(Enum).html": {
    "href": "api/YVR.Core.YVRManager.HandTrackingSupport(Enum).html",
    "title": "Enum YVRManager.HandTrackingSupport | Core",
    "keywords": "Enum YVRManager.HandTrackingSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRManager.HandTrackingSupport Fields ControllersAndHands = 1 ControllersOnly = 0 HandsOnly = 2"
  },
  "api/YVR.Core.YVRManager.Init.html": {
    "href": "api/YVR.Core.YVRManager.Init.html",
    "title": "Method Init | Core",
    "keywords": "Method Init Namespace YVR.Core Assembly YVR.Core.Runtime.dll Init() The override function of @YVR.Core.MonoBehaviorSingleton`1.Init protected override void Init()"
  },
  "api/YVR.Core.YVRManager.SetAppSWEnable.html": {
    "href": "api/YVR.Core.YVRManager.SetAppSWEnable.html",
    "title": "Method SetAppSWEnable | Core",
    "keywords": "Method SetAppSWEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSWEnable(bool) public void SetAppSWEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRManager.YVRFeatureSupport.html": {
    "href": "api/YVR.Core.YVRManager.YVRFeatureSupport.html",
    "title": "Enum YVRManager.YVRFeatureSupport | Core",
    "keywords": "Enum YVRManager.YVRFeatureSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRManager.YVRFeatureSupport Fields None = 0 Required = 2 Supported = 1"
  },
  "api/YVR.Core.YVRManager.batteryLevel.html": {
    "href": "api/YVR.Core.YVRManager.batteryLevel.html",
    "title": "Property batteryLevel | Core",
    "keywords": "Property batteryLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll batteryLevel Get current battery level, see also YVRHMDManager public float batteryLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRManager.batteryStatus.html": {
    "href": "api/YVR.Core.YVRManager.batteryStatus.html",
    "title": "Property batteryStatus | Core",
    "keywords": "Property batteryStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll batteryStatus Get current battery status(charge or not), see also YVRHMDManager public int batteryStatus { get; } Property Value int"
  },
  "api/YVR.Core.YVRManager.batteryTemperature.html": {
    "href": "api/YVR.Core.YVRManager.batteryTemperature.html",
    "title": "Property batteryTemperature | Core",
    "keywords": "Property batteryTemperature Namespace YVR.Core Assembly YVR.Core.Runtime.dll batteryTemperature Get current battery temperature, see also YVRHMDManager public float batteryTemperature { get; } Property Value float"
  },
  "api/YVR.Core.YVRManager.boundary.html": {
    "href": "api/YVR.Core.YVRManager.boundary.html",
    "title": "Field boundary | Core",
    "keywords": "Field boundary Namespace YVR.Core Assembly YVR.Core.Runtime.dll The instance of class YVRBoundary public YVRBoundary boundary Returns YVRBoundary The instance of class"
  },
  "api/YVR.Core.YVRManager.cameraRenderer.html": {
    "href": "api/YVR.Core.YVRManager.cameraRenderer.html",
    "title": "Field cameraRenderer | Core",
    "keywords": "Field cameraRenderer Namespace YVR.Core Assembly YVR.Core.Runtime.dll The instance of class YVRCameraRenderer public YVRCameraRenderer cameraRenderer Returns YVRCameraRenderer The instance of class"
  },
  "api/YVR.Core.YVRManager.cameraRig.html": {
    "href": "api/YVR.Core.YVRManager.cameraRig.html",
    "title": "Property cameraRig | Core",
    "keywords": "Property cameraRig Namespace YVR.Core Assembly YVR.Core.Runtime.dll cameraRig The instance of class YVRCameraRig public YVRCameraRig cameraRig { get; } Property Value YVRCameraRig"
  },
  "api/YVR.Core.YVRManager.controllerRig.html": {
    "href": "api/YVR.Core.YVRManager.controllerRig.html",
    "title": "Property controllerRig | Core",
    "keywords": "Property controllerRig Namespace YVR.Core Assembly YVR.Core.Runtime.dll controllerRig The instance of class YVRControllerRig public YVRControllerRig controllerRig { get; } Property Value YVRControllerRig"
  },
  "api/YVR.Core.YVRManager.cpuLevel.html": {
    "href": "api/YVR.Core.YVRManager.cpuLevel.html",
    "title": "Property cpuLevel | Core",
    "keywords": "Property cpuLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll cpuLevel Set or get current cpu level(0-4), see also YVRPerformanceManager public int cpuLevel { get; set; } Property Value int"
  },
  "api/YVR.Core.YVRManager.cpuUtilLevel.html": {
    "href": "api/YVR.Core.YVRManager.cpuUtilLevel.html",
    "title": "Property cpuUtilLevel | Core",
    "keywords": "Property cpuUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll cpuUtilLevel Get current cpu utilizing level（0.0-1.0）, see also YVRHMDManager public float cpuUtilLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRManager.eventsManager.html": {
    "href": "api/YVR.Core.YVRManager.eventsManager.html",
    "title": "Field eventsManager | Core",
    "keywords": "Field eventsManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The instance of class YVREventsManager public YVREventsManager eventsManager Returns YVREventsManager The instance of class"
  },
  "api/YVR.Core.YVRManager.eyeTrackingSupport.html": {
    "href": "api/YVR.Core.YVRManager.eyeTrackingSupport.html",
    "title": "Field eyeTrackingSupport | Core",
    "keywords": "Field eyeTrackingSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRManager.YVRFeatureSupport eyeTrackingSupport Returns YVRManager.YVRFeatureSupport"
  },
  "api/YVR.Core.YVRManager.fixedFoveatedRenderingDynamic.html": {
    "href": "api/YVR.Core.YVRManager.fixedFoveatedRenderingDynamic.html",
    "title": "Property fixedFoveatedRenderingDynamic | Core",
    "keywords": "Property fixedFoveatedRenderingDynamic Namespace YVR.Core Assembly YVR.Core.Runtime.dll fixedFoveatedRenderingDynamic Set or get current fixed foveated rendering dynamic, see also YVRQualityManager public bool fixedFoveatedRenderingDynamic { get; set; } Property Value bool"
  },
  "api/YVR.Core.YVRManager.fixedFoveatedRenderingLevel.html": {
    "href": "api/YVR.Core.YVRManager.fixedFoveatedRenderingLevel.html",
    "title": "Property fixedFoveatedRenderingLevel | Core",
    "keywords": "Property fixedFoveatedRenderingLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll fixedFoveatedRenderingLevel Set or get current fixed foveated rendering level, see also YVRQualityManager public YVRQualityManager.FixedFoveatedRenderingLevel fixedFoveatedRenderingLevel { get; set; } Property Value YVRQualityManager.FixedFoveatedRenderingLevel"
  },
  "api/YVR.Core.YVRManager.fixedFoveationRenderingEnabled.html": {
    "href": "api/YVR.Core.YVRManager.fixedFoveationRenderingEnabled.html",
    "title": "Property fixedFoveationRenderingEnabled | Core",
    "keywords": "Property fixedFoveationRenderingEnabled Namespace YVR.Core Assembly YVR.Core.Runtime.dll fixedFoveationRenderingEnabled Get whether fixed foveation rendering is enabled or not public bool fixedFoveationRenderingEnabled { get; } Property Value bool"
  },
  "api/YVR.Core.YVRManager.gpuLevel.html": {
    "href": "api/YVR.Core.YVRManager.gpuLevel.html",
    "title": "Property gpuLevel | Core",
    "keywords": "Property gpuLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll gpuLevel Set or get current gpu level(0-5), see also YVRPerformanceManager public int gpuLevel { get; set; } Property Value int"
  },
  "api/YVR.Core.YVRManager.gpuUtilLevel.html": {
    "href": "api/YVR.Core.YVRManager.gpuUtilLevel.html",
    "title": "Property gpuUtilLevel | Core",
    "keywords": "Property gpuUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll gpuUtilLevel Get current gpu utilizing level(0.0-1.0), see also YVRHMDManager public float gpuUtilLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRManager.handManager.html": {
    "href": "api/YVR.Core.YVRManager.handManager.html",
    "title": "Property handManager | Core",
    "keywords": "Property handManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll handManager The instance of class YVRHandManager public YVRHandManager handManager { get; set; } Property Value YVRHandManager"
  },
  "api/YVR.Core.YVRManager.handTrackingSupport(Field).html": {
    "href": "api/YVR.Core.YVRManager.handTrackingSupport(Field).html",
    "title": "Field handTrackingSupport | Core",
    "keywords": "Field handTrackingSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRManager.HandTrackingSupport handTrackingSupport Returns YVRManager.HandTrackingSupport"
  },
  "api/YVR.Core.YVRManager.headPoseRelativeOffsetRotation.html": {
    "href": "api/YVR.Core.YVRManager.headPoseRelativeOffsetRotation.html",
    "title": "Property headPoseRelativeOffsetRotation | Core",
    "keywords": "Property headPoseRelativeOffsetRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll headPoseRelativeOffsetRotation The rotation offset of the center eye (in euler angle), only works in editor mode public Vector3 headPoseRelativeOffsetRotation { get; set; } Property Value Vector3"
  },
  "api/YVR.Core.YVRManager.headPoseRelativeOffsetTranslation.html": {
    "href": "api/YVR.Core.YVRManager.headPoseRelativeOffsetTranslation.html",
    "title": "Property headPoseRelativeOffsetTranslation | Core",
    "keywords": "Property headPoseRelativeOffsetTranslation Namespace YVR.Core Assembly YVR.Core.Runtime.dll headPoseRelativeOffsetTranslation The position offset of the center eye, only works in editor mode public Vector3 headPoseRelativeOffsetTranslation { get; set; } Property Value Vector3"
  },
  "api/YVR.Core.YVRManager.hmdManager.html": {
    "href": "api/YVR.Core.YVRManager.hmdManager.html",
    "title": "Field hmdManager | Core",
    "keywords": "Field hmdManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The instance of class YVRHMDManager public YVRHMDManager hmdManager Returns YVRHMDManager The instance of class"
  },
  "api/YVR.Core.YVRManager.html": {
    "href": "api/YVR.Core.YVRManager.html",
    "title": "Class YVRManager | Core",
    "keywords": "Class YVRManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The general manager class of whole sdk which holds other managers and controls the lifecycle of the vr mode public class YVRManager : MonoBehaviorSingleton<YVRManager> Inheritance object Object Component Behaviour MonoBehaviour MonoBehaviorSingleton<YVRManager> YVRManager Inherited Members MonoBehaviorSingleton<YVRManager>.instance MonoBehaviorSingleton<YVRManager>.createdInstance MonoBehaviorSingleton<YVRManager>.Start() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields boundary The instance of class YVRBoundary cameraRenderer The instance of class YVRCameraRenderer eventsManager The instance of class YVREventsManager eyeTrackingSupport handTrackingSupport hmdManager The instance of class YVRHMDManager largeSpaceSupport qualityManager The instance of class YVRQualityManager sceneSupport spatialAnchorSupport trackingManager The instance of class YVRTrackingStateManager Properties EyeBufferSharpenType Set or get current eyebuffer sharpenType, see also YVRQualityManager batteryLevel Get current battery level, see also YVRHMDManager batteryStatus Get current battery status(charge or not), see also YVRHMDManager batteryTemperature Get current battery temperature, see also YVRHMDManager cameraRig The instance of class YVRCameraRig controllerRig The instance of class YVRControllerRig cpuLevel Set or get current cpu level(0-4), see also YVRPerformanceManager cpuUtilLevel Get current cpu utilizing level（0.0-1.0）, see also YVRHMDManager fixedFoveatedRenderingDynamic Set or get current fixed foveated rendering dynamic, see also YVRQualityManager fixedFoveatedRenderingLevel Set or get current fixed foveated rendering level, see also YVRQualityManager fixedFoveationRenderingEnabled Get whether fixed foveation rendering is enabled or not gpuLevel Set or get current gpu level(0-5), see also YVRPerformanceManager gpuUtilLevel Get current gpu utilizing level(0.0-1.0), see also YVRHMDManager handManager The instance of class YVRHandManager headPoseRelativeOffsetRotation The rotation offset of the center eye (in euler angle), only works in editor mode headPoseRelativeOffsetTranslation The position offset of the center eye, only works in editor mode isUserPresent Get whether user is currently wearing the display, see also YVRHMDManager trackingSpace useRecommendedMSAALevel Get whether to use recommend MSAA level, see also YVRQualityManager vSyncCount Set or get current vSync count, see also YVRQualityManager volumeLevel Get current volume level, see also YVRHMDManager Methods GetAppSWEnable() Init() The override function of @YVR.Core.MonoBehaviorSingleton`1.Init SetAppSWEnable(bool)"
  },
  "api/YVR.Core.YVRManager.isUserPresent.html": {
    "href": "api/YVR.Core.YVRManager.isUserPresent.html",
    "title": "Property isUserPresent | Core",
    "keywords": "Property isUserPresent Namespace YVR.Core Assembly YVR.Core.Runtime.dll isUserPresent Get whether user is currently wearing the display, see also YVRHMDManager public bool isUserPresent { get; } Property Value bool"
  },
  "api/YVR.Core.YVRManager.largeSpaceSupport.html": {
    "href": "api/YVR.Core.YVRManager.largeSpaceSupport.html",
    "title": "Field largeSpaceSupport | Core",
    "keywords": "Field largeSpaceSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool largeSpaceSupport Returns bool"
  },
  "api/YVR.Core.YVRManager.qualityManager.html": {
    "href": "api/YVR.Core.YVRManager.qualityManager.html",
    "title": "Field qualityManager | Core",
    "keywords": "Field qualityManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The instance of class YVRQualityManager public YVRQualityManager qualityManager Returns YVRQualityManager The instance of class"
  },
  "api/YVR.Core.YVRManager.sceneSupport.html": {
    "href": "api/YVR.Core.YVRManager.sceneSupport.html",
    "title": "Field sceneSupport | Core",
    "keywords": "Field sceneSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool sceneSupport Returns bool"
  },
  "api/YVR.Core.YVRManager.spatialAnchorSupport.html": {
    "href": "api/YVR.Core.YVRManager.spatialAnchorSupport.html",
    "title": "Field spatialAnchorSupport | Core",
    "keywords": "Field spatialAnchorSupport Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool spatialAnchorSupport Returns bool"
  },
  "api/YVR.Core.YVRManager.trackingManager.html": {
    "href": "api/YVR.Core.YVRManager.trackingManager.html",
    "title": "Field trackingManager | Core",
    "keywords": "Field trackingManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The instance of class YVRTrackingStateManager public YVRTrackingStateManager trackingManager Returns YVRTrackingStateManager The instance of class"
  },
  "api/YVR.Core.YVRManager.trackingSpace.html": {
    "href": "api/YVR.Core.YVRManager.trackingSpace.html",
    "title": "Property trackingSpace | Core",
    "keywords": "Property trackingSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll trackingSpace public YVRTrackingStateManager.TrackingSpace trackingSpace { get; set; } Property Value YVRTrackingStateManager.TrackingSpace"
  },
  "api/YVR.Core.YVRManager.useRecommendedMSAALevel.html": {
    "href": "api/YVR.Core.YVRManager.useRecommendedMSAALevel.html",
    "title": "Property useRecommendedMSAALevel | Core",
    "keywords": "Property useRecommendedMSAALevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll useRecommendedMSAALevel Get whether to use recommend MSAA level, see also YVRQualityManager public bool useRecommendedMSAALevel { get; } Property Value bool"
  },
  "api/YVR.Core.YVRManager.vSyncCount.html": {
    "href": "api/YVR.Core.YVRManager.vSyncCount.html",
    "title": "Property vSyncCount | Core",
    "keywords": "Property vSyncCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll vSyncCount Set or get current vSync count, see also YVRQualityManager public YVRQualityManager.VSyncCount vSyncCount { get; set; } Property Value YVRQualityManager.VSyncCount"
  },
  "api/YVR.Core.YVRManager.volumeLevel.html": {
    "href": "api/YVR.Core.YVRManager.volumeLevel.html",
    "title": "Property volumeLevel | Core",
    "keywords": "Property volumeLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll volumeLevel Get current volume level, see also YVRHMDManager public float volumeLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRMeshBlockChangeState.html": {
    "href": "api/YVR.Core.YVRMeshBlockChangeState.html",
    "title": "Enum YVRMeshBlockChangeState | Core",
    "keywords": "Enum YVRMeshBlockChangeState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRMeshBlockChangeState Fields Added = 0 Removed = 2 Unchanged = 3 Updated = 1"
  },
  "api/YVR.Core.YVRMeshTracking.CreateMeshDetector.html": {
    "href": "api/YVR.Core.YVRMeshTracking.CreateMeshDetector.html",
    "title": "Method CreateMeshDetector | Core",
    "keywords": "Method CreateMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateMeshDetector() public void CreateMeshDetector()"
  },
  "api/YVR.Core.YVRMeshTracking.DestroyMeshDetector.html": {
    "href": "api/YVR.Core.YVRMeshTracking.DestroyMeshDetector.html",
    "title": "Method DestroyMeshDetector | Core",
    "keywords": "Method DestroyMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyMeshDetector() public void DestroyMeshDetector()"
  },
  "api/YVR.Core.YVRMeshTracking.OnInit.html": {
    "href": "api/YVR.Core.YVRMeshTracking.OnInit.html",
    "title": "Method OnInit | Core",
    "keywords": "Method OnInit Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnInit() protected override void OnInit()"
  },
  "api/YVR.Core.YVRMeshTracking.html": {
    "href": "api/YVR.Core.YVRMeshTracking.html",
    "title": "Class YVRMeshTracking | Core",
    "keywords": "Class YVRMeshTracking Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRMeshTracking : Singleton<YVRMeshTracking> Inheritance object Singleton<YVRMeshTracking> YVRMeshTracking Inherited Members Singleton<YVRMeshTracking>.instance Singleton<YVRMeshTracking>.createdInstance Singleton<YVRMeshTracking>.Reset() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields updateMeshBlockAction Methods CreateMeshDetector() DestroyMeshDetector() OnInit()"
  },
  "api/YVR.Core.YVRMeshTracking.updateMeshBlockAction.html": {
    "href": "api/YVR.Core.YVRMeshTracking.updateMeshBlockAction.html",
    "title": "Field updateMeshBlockAction | Core",
    "keywords": "Field updateMeshBlockAction Namespace YVR.Core Assembly YVR.Core.Runtime.dll public static Action<ulong, YVRMeshBlockChangeState> updateMeshBlockAction Returns Action<ulong, YVRMeshBlockChangeState>"
  },
  "api/YVR.Core.YVRNativeLog2YLogLoggerAdapter.html": {
    "href": "api/YVR.Core.YVRNativeLog2YLogLoggerAdapter.html",
    "title": "Class YVRNativeLog2YLogLoggerAdapter | Core",
    "keywords": "Class YVRNativeLog2YLogLoggerAdapter Namespace YVR.Core Assembly YVR.Core.Runtime.dll Make native log output by YLog rather than android logcat public class YVRNativeLog2YLogLoggerAdapter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRNativeLog2YLogLoggerAdapter Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/YVR.Core.YVRPerformanceManager.cpuLevel.html": {
    "href": "api/YVR.Core.YVRPerformanceManager.cpuLevel.html",
    "title": "Property cpuLevel | Core",
    "keywords": "Property cpuLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll cpuLevel Gets or sets the current CPU performance level (0-4). Lower performance levels save more power. public static int cpuLevel { get; set; } Property Value int"
  },
  "api/YVR.Core.YVRPerformanceManager.cpuUtilLevel.html": {
    "href": "api/YVR.Core.YVRPerformanceManager.cpuUtilLevel.html",
    "title": "Property cpuUtilLevel | Core",
    "keywords": "Property cpuUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll cpuUtilLevel Get the cpu utilize level(0.0-1.0) public static float cpuUtilLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRPerformanceManager.gpuLevel.html": {
    "href": "api/YVR.Core.YVRPerformanceManager.gpuLevel.html",
    "title": "Property gpuLevel | Core",
    "keywords": "Property gpuLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll gpuLevel Gets or sets the current GPU performance level (0-5). Lower performance levels save more power. public static int gpuLevel { get; set; } Property Value int"
  },
  "api/YVR.Core.YVRPerformanceManager.gpuUtilLevel.html": {
    "href": "api/YVR.Core.YVRPerformanceManager.gpuUtilLevel.html",
    "title": "Property gpuUtilLevel | Core",
    "keywords": "Property gpuUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll gpuUtilLevel Get the gpu utilize level(0.0-1.0) public static float gpuUtilLevel { get; } Property Value float"
  },
  "api/YVR.Core.YVRPerformanceManager.html": {
    "href": "api/YVR.Core.YVRPerformanceManager.html",
    "title": "Class YVRPerformanceManager | Core",
    "keywords": "Class YVRPerformanceManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll The manager for device performance public static class YVRPerformanceManager Inheritance object YVRPerformanceManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties cpuLevel Gets or sets the current CPU performance level (0-4). Lower performance levels save more power. cpuUtilLevel Get the cpu utilize level(0.0-1.0) gpuLevel Gets or sets the current GPU performance level (0-5). Lower performance levels save more power. gpuUtilLevel Get the gpu utilize level(0.0-1.0)"
  },
  "api/YVR.Core.YVRPhysicsRaycaster.GetRaycastResultScreenPosition.html": {
    "href": "api/YVR.Core.YVRPhysicsRaycaster.GetRaycastResultScreenPosition.html",
    "title": "Method GetRaycastResultScreenPosition | Core",
    "keywords": "Method GetRaycastResultScreenPosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRaycastResultScreenPosition(RaycastResult) Convert hit point position from world space to the screen space public Vector2 GetRaycastResultScreenPosition(RaycastResult raycastResult) Parameters raycastResult RaycastResult Target raycastResult Returns Vector2 Raycast hit point in the screen space of eventCamera"
  },
  "api/YVR.Core.YVRPhysicsRaycaster.Raycast.html": {
    "href": "api/YVR.Core.YVRPhysicsRaycaster.Raycast.html",
    "title": "Method Raycast | Core",
    "keywords": "Method Raycast Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raycast(PointerEventData, List<RaycastResult>) Processing actual raycast, will be triggered by EventSystem.RaycastAll public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData Data comes from YVRInputModule resultAppendList List<RaycastResult> List contains the raycasting result"
  },
  "api/YVR.Core.YVRPhysicsRaycaster.eventCamera.html": {
    "href": "api/YVR.Core.YVRPhysicsRaycaster.eventCamera.html",
    "title": "Property eventCamera | Core",
    "keywords": "Property eventCamera Namespace YVR.Core Assembly YVR.Core.Runtime.dll eventCamera The camera used to convert rayhit's world position to screen position public override Camera eventCamera { get; } Property Value Camera"
  },
  "api/YVR.Core.YVRPhysicsRaycaster.eventMask.html": {
    "href": "api/YVR.Core.YVRPhysicsRaycaster.eventMask.html",
    "title": "Field eventMask | Core",
    "keywords": "Field eventMask Namespace YVR.Core Assembly YVR.Core.Runtime.dll The layer that physics ray should care public LayerMask eventMask Returns LayerMask The layer that physics ray should care"
  },
  "api/YVR.Core.YVRPhysicsRaycaster.html": {
    "href": "api/YVR.Core.YVRPhysicsRaycaster.html",
    "title": "Class YVRPhysicsRaycaster | Core",
    "keywords": "Class YVRPhysicsRaycaster Namespace YVR.Core Assembly YVR.Core.Runtime.dll Raycaster used for raycasting physics targets public class YVRPhysicsRaycaster : BaseRaycaster Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster YVRPhysicsRaycaster Inherited Members BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() BaseRaycaster.priority BaseRaycaster.sortOrderPriority BaseRaycaster.renderOrderPriority BaseRaycaster.rootRaycaster UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnValidate() UIBehaviour.Reset() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields eventMask The layer that physics ray should care Properties eventCamera The camera used to convert rayhit's world position to screen position Methods GetRaycastResultScreenPosition(RaycastResult) Convert hit point position from world space to the screen space Raycast(PointerEventData, List<RaycastResult>) Processing actual raycast, will be triggered by EventSystem.RaycastAll See Also YVRInputModule"
  },
  "api/YVR.Core.YVRPlaneChangeState.html": {
    "href": "api/YVR.Core.YVRPlaneChangeState.html",
    "title": "Enum YVRPlaneChangeState | Core",
    "keywords": "Enum YVRPlaneChangeState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRPlaneChangeState Fields Added = 0 Removed = 2 UnChanged = 3 Update = 1"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.ToString.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.ToString.html",
    "title": "Method ToString | Core",
    "keywords": "Method ToString Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToString() public override string ToString() Returns string"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.changeState.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.changeState.html",
    "title": "Field changeState | Core",
    "keywords": "Field changeState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRPlaneChangeState changeState Returns YVRPlaneChangeState"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.extents.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.extents.html",
    "title": "Field extents | Core",
    "keywords": "Field extents Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector2 extents Returns Vector2"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.html",
    "title": "Struct YVRPlaneDetectorLocation | Core",
    "keywords": "Struct YVRPlaneDetectorLocation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRPlaneDetectorLocation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields changeState extents locationFlags orientation planeId polygonBufferCount pose semanticType Methods ToString()"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.locationFlags.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.locationFlags.html",
    "title": "Field locationFlags | Core",
    "keywords": "Field locationFlags Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpaceLocationFlags locationFlags Returns YVRSpaceLocationFlags"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.orientation.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.orientation.html",
    "title": "Field orientation | Core",
    "keywords": "Field orientation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRPlaneDetectorOrientation orientation Returns YVRPlaneDetectorOrientation"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.planeId.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.planeId.html",
    "title": "Field planeId | Core",
    "keywords": "Field planeId Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong planeId Returns ulong"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.polygonBufferCount.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.polygonBufferCount.html",
    "title": "Field polygonBufferCount | Core",
    "keywords": "Field polygonBufferCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint polygonBufferCount Returns uint"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.pose.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.pose.html",
    "title": "Field pose | Core",
    "keywords": "Field pose Namespace YVR.Core Assembly YVR.Core.Runtime.dll public PoseData pose Returns PoseData"
  },
  "api/YVR.Core.YVRPlaneDetectorLocation.semanticType.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocation.semanticType.html",
    "title": "Field semanticType | Core",
    "keywords": "Field semanticType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRPlaneDetectorSemanticType semanticType Returns YVRPlaneDetectorSemanticType"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.ToString.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.ToString.html",
    "title": "Method ToString | Core",
    "keywords": "Method ToString Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToString() public override string ToString() Returns string"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.html",
    "title": "Struct YVRPlaneDetectorLocationsInternal | Core",
    "keywords": "Struct YVRPlaneDetectorLocationsInternal Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRPlaneDetectorLocationsInternal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields next planeLocationCapacityInput planeLocationCountOutput planeLocations type Methods ToString()"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.next.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.next.html",
    "title": "Field next | Core",
    "keywords": "Field next Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr next Returns IntPtr"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.planeLocationCapacityInput.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.planeLocationCapacityInput.html",
    "title": "Field planeLocationCapacityInput | Core",
    "keywords": "Field planeLocationCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint planeLocationCapacityInput Returns uint"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.planeLocationCountOutput.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.planeLocationCountOutput.html",
    "title": "Field planeLocationCountOutput | Core",
    "keywords": "Field planeLocationCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint planeLocationCountOutput Returns uint"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.planeLocations.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.planeLocations.html",
    "title": "Field planeLocations | Core",
    "keywords": "Field planeLocations Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr planeLocations Returns IntPtr"
  },
  "api/YVR.Core.YVRPlaneDetectorLocationsInternal.type.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorLocationsInternal.type.html",
    "title": "Field type | Core",
    "keywords": "Field type Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int type Returns int"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.ConvertIntPtr2List.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.ConvertIntPtr2List.html",
    "title": "Method ConvertIntPtr2List | Core",
    "keywords": "Method ConvertIntPtr2List Namespace YVR.Core Assembly YVR.Core.Runtime.dll ConvertIntPtr2List<T>(IntPtr, uint) public static List<T> ConvertIntPtr2List<T>(IntPtr ptr, uint count) Parameters ptr IntPtr count uint Returns List<T> Type Parameters T"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.CreatePlaneDetector.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.CreatePlaneDetector.html",
    "title": "Method CreatePlaneDetector | Core",
    "keywords": "Method CreatePlaneDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreatePlaneDetector() Creates plane detection. public void CreatePlaneDetector()"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.EndPlaneDetector.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.EndPlaneDetector.html",
    "title": "Method EndPlaneDetector | Core",
    "keywords": "Method EndPlaneDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll EndPlaneDetector() Ends plane detection. public void EndPlaneDetector()"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.GetPlanePolygonBuffer.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.GetPlanePolygonBuffer.html",
    "title": "Method GetPlanePolygonBuffer | Core",
    "keywords": "Method GetPlanePolygonBuffer Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPlanePolygonBuffer(YVRPlaneDetectorLocation) public List<YVRPlaneDetectorPolygonBuffer> GetPlanePolygonBuffer(YVRPlaneDetectorLocation plane) Parameters plane YVRPlaneDetectorLocation Returns List<YVRPlaneDetectorPolygonBuffer>"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.OnInit.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.OnInit.html",
    "title": "Method OnInit | Core",
    "keywords": "Method OnInit Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnInit() protected override void OnInit()"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.getPlanesAction.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.getPlanesAction.html",
    "title": "Field getPlanesAction | Core",
    "keywords": "Field getPlanesAction Namespace YVR.Core Assembly YVR.Core.Runtime.dll public static Action<List<YVRPlaneDetectorLocation>> getPlanesAction Returns Action<List<YVRPlaneDetectorLocation>>"
  },
  "api/YVR.Core.YVRPlaneDetectorMgr.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorMgr.html",
    "title": "Class YVRPlaneDetectorMgr | Core",
    "keywords": "Class YVRPlaneDetectorMgr Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRPlaneDetectorMgr : Singleton<YVRPlaneDetectorMgr> Inheritance object Singleton<YVRPlaneDetectorMgr> YVRPlaneDetectorMgr Inherited Members Singleton<YVRPlaneDetectorMgr>.instance Singleton<YVRPlaneDetectorMgr>.createdInstance Singleton<YVRPlaneDetectorMgr>.Reset() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields getPlanesAction Methods ConvertIntPtr2List<T>(IntPtr, uint) CreatePlaneDetector() Creates plane detection. EndPlaneDetector() Ends plane detection. GetPlanePolygonBuffer(YVRPlaneDetectorLocation) OnInit()"
  },
  "api/YVR.Core.YVRPlaneDetectorOrientation.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorOrientation.html",
    "title": "Enum YVRPlaneDetectorOrientation | Core",
    "keywords": "Enum YVRPlaneDetectorOrientation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRPlaneDetectorOrientation Fields XR_PLANE_DETECTOR_ORIENTATION_ARBITRARY_EXT = 3 XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_DOWNWARD_EXT = 1 XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_UPWARD_EXT = 0 XR_PLANE_DETECTOR_ORIENTATION_MAX_ENUM_EXT = 2147483647 XR_PLANE_DETECTOR_ORIENTATION_VERTICAL_EXT = 2"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBuffer.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBuffer.html",
    "title": "Struct YVRPlaneDetectorPolygonBuffer | Core",
    "keywords": "Struct YVRPlaneDetectorPolygonBuffer Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRPlaneDetectorPolygonBuffer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields pointVectors"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBuffer.pointVectors.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBuffer.pointVectors.html",
    "title": "Field pointVectors | Core",
    "keywords": "Field pointVectors Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<Vector2> pointVectors Returns List<Vector2>"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.ToString.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.ToString.html",
    "title": "Method ToString | Core",
    "keywords": "Method ToString Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToString() public override string ToString() Returns string"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.html",
    "title": "Struct YVRPlaneDetectorPolygonBufferInternal | Core",
    "keywords": "Struct YVRPlaneDetectorPolygonBufferInternal Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRPlaneDetectorPolygonBufferInternal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields next type vertexCapacityInput vertexCountOutput vertices Methods ToString()"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.next.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.next.html",
    "title": "Field next | Core",
    "keywords": "Field next Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr next Returns IntPtr"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.type.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.type.html",
    "title": "Field type | Core",
    "keywords": "Field type Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int type Returns int"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.vertexCapacityInput.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.vertexCapacityInput.html",
    "title": "Field vertexCapacityInput | Core",
    "keywords": "Field vertexCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint vertexCapacityInput Returns uint"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.vertexCountOutput.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.vertexCountOutput.html",
    "title": "Field vertexCountOutput | Core",
    "keywords": "Field vertexCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint vertexCountOutput Returns uint"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.vertices.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBufferInternal.vertices.html",
    "title": "Field vertices | Core",
    "keywords": "Field vertices Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr vertices Returns IntPtr"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBuffersInternal.bufferCount.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBuffersInternal.bufferCount.html",
    "title": "Field bufferCount | Core",
    "keywords": "Field bufferCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint bufferCount Returns uint"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBuffersInternal.buffers.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBuffersInternal.buffers.html",
    "title": "Field buffers | Core",
    "keywords": "Field buffers Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr buffers Returns IntPtr"
  },
  "api/YVR.Core.YVRPlaneDetectorPolygonBuffersInternal.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorPolygonBuffersInternal.html",
    "title": "Struct YVRPlaneDetectorPolygonBuffersInternal | Core",
    "keywords": "Struct YVRPlaneDetectorPolygonBuffersInternal Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRPlaneDetectorPolygonBuffersInternal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bufferCount buffers"
  },
  "api/YVR.Core.YVRPlaneDetectorSemanticType.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorSemanticType.html",
    "title": "Enum YVRPlaneDetectorSemanticType | Core",
    "keywords": "Enum YVRPlaneDetectorSemanticType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRPlaneDetectorSemanticType Fields XR_PLANE_DETECTOR_SEMANTIC_TYPE_CEILING_EXT = 1 XR_PLANE_DETECTOR_SEMANTIC_TYPE_FLOOR_EXT = 2 XR_PLANE_DETECTOR_SEMANTIC_TYPE_MAX_ENUM_EXT = 2147483647 XR_PLANE_DETECTOR_SEMANTIC_TYPE_PLATFORM_EXT = 4 XR_PLANE_DETECTOR_SEMANTIC_TYPE_UNDEFINED_EXT = 0 XR_PLANE_DETECTOR_SEMANTIC_TYPE_WALL_EXT = 3"
  },
  "api/YVR.Core.YVRPlaneDetectorState.html": {
    "href": "api/YVR.Core.YVRPlaneDetectorState.html",
    "title": "Enum YVRPlaneDetectorState | Core",
    "keywords": "Enum YVRPlaneDetectorState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRPlaneDetectorState Fields XR_PLANE_DETECTION_STATE_DONE_EXT = 2 XR_PLANE_DETECTION_STATE_ERROR_EXT = 3 XR_PLANE_DETECTION_STATE_FATAL_EXT = 4 XR_PLANE_DETECTION_STATE_MAX_ENUM_EXT = 2147483647 XR_PLANE_DETECTION_STATE_NONE_EXT = 0 XR_PLANE_DETECTION_STATE_PENDING_EXT = 1"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.BatteryPercentRemaining.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.BatteryPercentRemaining.html",
    "title": "Field BatteryPercentRemaining | Core",
    "keywords": "Field BatteryPercentRemaining Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float BatteryPercentRemaining Returns float"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.Buttons.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.Buttons.html",
    "title": "Field Buttons | Core",
    "keywords": "Field Buttons Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint Buttons Returns uint"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.Clear.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.Clear.html",
    "title": "Method Clear | Core",
    "keywords": "Method Clear Namespace YVR.Core Assembly YVR.Core.Runtime.dll Clear() public void Clear()"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.IndexTrigger.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.IndexTrigger.html",
    "title": "Field IndexTrigger | Core",
    "keywords": "Field IndexTrigger Namespace YVR.Core Assembly YVR.Core.Runtime.dll public float IndexTrigger Returns float"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.Thumbstick.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.Thumbstick.html",
    "title": "Field Thumbstick | Core",
    "keywords": "Field Thumbstick Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector2 Thumbstick Returns Vector2"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.Touches.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.Touches.html",
    "title": "Field Touches | Core",
    "keywords": "Field Touches Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint Touches Returns uint"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.html",
    "title": "Struct YVRPlugin.ControllerState | Core",
    "keywords": "Struct YVRPlugin.ControllerState Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRPlugin.ControllerState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields BatteryPercentRemaining Buttons IndexTrigger Thumbstick Touches isCharging Methods Clear()"
  },
  "api/YVR.Core.YVRPlugin.ControllerState.isCharging.html": {
    "href": "api/YVR.Core.YVRPlugin.ControllerState.isCharging.html",
    "title": "Field isCharging | Core",
    "keywords": "Field isCharging Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool isCharging Returns bool"
  },
  "api/YVR.Core.YVRPlugin.CreateEyeTracker.html": {
    "href": "api/YVR.Core.YVRPlugin.CreateEyeTracker.html",
    "title": "Method CreateEyeTracker | Core",
    "keywords": "Method CreateEyeTracker Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateEyeTracker() public virtual void CreateEyeTracker()"
  },
  "api/YVR.Core.YVRPlugin.CreateMeshDetector.html": {
    "href": "api/YVR.Core.YVRPlugin.CreateMeshDetector.html",
    "title": "Method CreateMeshDetector | Core",
    "keywords": "Method CreateMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateMeshDetector() public virtual void CreateMeshDetector()"
  },
  "api/YVR.Core.YVRPlugin.CreatePlaneDetection.html": {
    "href": "api/YVR.Core.YVRPlugin.CreatePlaneDetection.html",
    "title": "Method CreatePlaneDetection | Core",
    "keywords": "Method CreatePlaneDetection Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreatePlaneDetection() public virtual void CreatePlaneDetection()"
  },
  "api/YVR.Core.YVRPlugin.CreateSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPlugin.CreateSpatialAnchor.html",
    "title": "Method CreateSpatialAnchor | Core",
    "keywords": "Method CreateSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateSpatialAnchor(Vector3, Quaternion, ref ulong) public virtual void CreateSpatialAnchor(Vector3 position, Quaternion rotation, ref ulong requestId) Parameters position Vector3 rotation Quaternion requestId ulong"
  },
  "api/YVR.Core.YVRPlugin.CreateSpatialAnchorUserHandle.html": {
    "href": "api/YVR.Core.YVRPlugin.CreateSpatialAnchorUserHandle.html",
    "title": "Method CreateSpatialAnchorUserHandle | Core",
    "keywords": "Method CreateSpatialAnchorUserHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateSpatialAnchorUserHandle(ulong, ref ulong) public virtual void CreateSpatialAnchorUserHandle(ulong userId, ref ulong spaceUser) Parameters userId ulong spaceUser ulong"
  },
  "api/YVR.Core.YVRPlugin.DestroyEyeTracker.html": {
    "href": "api/YVR.Core.YVRPlugin.DestroyEyeTracker.html",
    "title": "Method DestroyEyeTracker | Core",
    "keywords": "Method DestroyEyeTracker Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyEyeTracker() public virtual void DestroyEyeTracker()"
  },
  "api/YVR.Core.YVRPlugin.DestroyMeshDetector.html": {
    "href": "api/YVR.Core.YVRPlugin.DestroyMeshDetector.html",
    "title": "Method DestroyMeshDetector | Core",
    "keywords": "Method DestroyMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyMeshDetector() public virtual void DestroyMeshDetector()"
  },
  "api/YVR.Core.YVRPlugin.DestroySpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPlugin.DestroySpatialAnchor.html",
    "title": "Method DestroySpatialAnchor | Core",
    "keywords": "Method DestroySpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) public virtual void DestroySpatialAnchor(ulong space, YVRSpatialAnchorStorageLocation location, ref ulong requestId) Parameters space ulong location YVRSpatialAnchorStorageLocation requestId ulong"
  },
  "api/YVR.Core.YVRPlugin.EndPlaneDetection.html": {
    "href": "api/YVR.Core.YVRPlugin.EndPlaneDetection.html",
    "title": "Method EndPlaneDetection | Core",
    "keywords": "Method EndPlaneDetection Namespace YVR.Core Assembly YVR.Core.Runtime.dll EndPlaneDetection() public virtual void EndPlaneDetection()"
  },
  "api/YVR.Core.YVRPlugin.GetAppSWEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.GetAppSWEnable.html",
    "title": "Method GetAppSWEnable | Core",
    "keywords": "Method GetAppSWEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAppSWEnable() public virtual bool GetAppSWEnable() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetAppSWSwitch.html": {
    "href": "api/YVR.Core.YVRPlugin.GetAppSWSwitch.html",
    "title": "Method GetAppSWSwitch | Core",
    "keywords": "Method GetAppSWSwitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAppSWSwitch() public virtual bool GetAppSWSwitch() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetBatteryLevel.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBatteryLevel.html",
    "title": "Method GetBatteryLevel | Core",
    "keywords": "Method GetBatteryLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBatteryLevel() public virtual float GetBatteryLevel() Returns float"
  },
  "api/YVR.Core.YVRPlugin.GetBatteryStatus.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBatteryStatus.html",
    "title": "Method GetBatteryStatus | Core",
    "keywords": "Method GetBatteryStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBatteryStatus() public virtual int GetBatteryStatus() Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetBatteryTemperature.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBatteryTemperature.html",
    "title": "Method GetBatteryTemperature | Core",
    "keywords": "Method GetBatteryTemperature Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBatteryTemperature() public virtual float GetBatteryTemperature() Returns float"
  },
  "api/YVR.Core.YVRPlugin.GetBlockInteractionData.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBlockInteractionData.html",
    "title": "Method GetBlockInteractionData | Core",
    "keywords": "Method GetBlockInteractionData Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBlockInteractionData() public virtual bool GetBlockInteractionData() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetBoundaryConfigured.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBoundaryConfigured.html",
    "title": "Method GetBoundaryConfigured | Core",
    "keywords": "Method GetBoundaryConfigured Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryConfigured() public virtual bool GetBoundaryConfigured() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetBoundaryDimensions.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBoundaryDimensions.html",
    "title": "Method GetBoundaryDimensions | Core",
    "keywords": "Method GetBoundaryDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryDimensions() public virtual Vector3 GetBoundaryDimensions() Returns Vector3"
  },
  "api/YVR.Core.YVRPlugin.GetBoundaryGeometry.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBoundaryGeometry.html",
    "title": "Method GetBoundaryGeometry | Core",
    "keywords": "Method GetBoundaryGeometry Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryGeometry() public virtual Vector3[] GetBoundaryGeometry() Returns Vector3[]"
  },
  "api/YVR.Core.YVRPlugin.GetBoundaryVisible.html": {
    "href": "api/YVR.Core.YVRPlugin.GetBoundaryVisible.html",
    "title": "Method GetBoundaryVisible | Core",
    "keywords": "Method GetBoundaryVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryVisible() public virtual bool GetBoundaryVisible() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetCPULevel.html": {
    "href": "api/YVR.Core.YVRPlugin.GetCPULevel.html",
    "title": "Method GetCPULevel | Core",
    "keywords": "Method GetCPULevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCPULevel() public virtual int GetCPULevel() Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetCPUUtilLevel.html": {
    "href": "api/YVR.Core.YVRPlugin.GetCPUUtilLevel.html",
    "title": "Method GetCPUUtilLevel | Core",
    "keywords": "Method GetCPUUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCPUUtilLevel() public virtual float GetCPUUtilLevel() Returns float"
  },
  "api/YVR.Core.YVRPlugin.GetCurrentInputDevice.html": {
    "href": "api/YVR.Core.YVRPlugin.GetCurrentInputDevice.html",
    "title": "Method GetCurrentInputDevice | Core",
    "keywords": "Method GetCurrentInputDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCurrentInputDevice(ref ActiveInputDevice) public virtual void GetCurrentInputDevice(ref ActiveInputDevice inputDevice) Parameters inputDevice ActiveInputDevice"
  },
  "api/YVR.Core.YVRPlugin.GetDisplayFrequenciesAvailable.html": {
    "href": "api/YVR.Core.YVRPlugin.GetDisplayFrequenciesAvailable.html",
    "title": "Method GetDisplayFrequenciesAvailable | Core",
    "keywords": "Method GetDisplayFrequenciesAvailable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetDisplayFrequenciesAvailable() public virtual float[] GetDisplayFrequenciesAvailable() Returns float[]"
  },
  "api/YVR.Core.YVRPlugin.GetDisplayFrequency.html": {
    "href": "api/YVR.Core.YVRPlugin.GetDisplayFrequency.html",
    "title": "Method GetDisplayFrequency | Core",
    "keywords": "Method GetDisplayFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetDisplayFrequency() public virtual float GetDisplayFrequency() Returns float"
  },
  "api/YVR.Core.YVRPlugin.GetEyeFov.html": {
    "href": "api/YVR.Core.YVRPlugin.GetEyeFov.html",
    "title": "Method GetEyeFov | Core",
    "keywords": "Method GetEyeFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeFov(int, ref EyeFov) public virtual void GetEyeFov(int eyeSide, ref YVRCameraRenderer.EyeFov eyeFov) Parameters eyeSide int eyeFov YVRCameraRenderer.EyeFov"
  },
  "api/YVR.Core.YVRPlugin.GetEyeGazePose.html": {
    "href": "api/YVR.Core.YVRPlugin.GetEyeGazePose.html",
    "title": "Method GetEyeGazePose | Core",
    "keywords": "Method GetEyeGazePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeGazePose(ref EyeGazePose) public virtual void GetEyeGazePose(ref EyeTrackingData.EyeGazePose eyeGazePose) Parameters eyeGazePose EyeTrackingData.EyeGazePose"
  },
  "api/YVR.Core.YVRPlugin.GetEyeGazes.html": {
    "href": "api/YVR.Core.YVRPlugin.GetEyeGazes.html",
    "title": "Method GetEyeGazes | Core",
    "keywords": "Method GetEyeGazes Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeGazes(ref EyeGazesState) public virtual void GetEyeGazes(ref EyeTrackingData.EyeGazesState eyeGazesState) Parameters eyeGazesState EyeTrackingData.EyeGazesState"
  },
  "api/YVR.Core.YVRPlugin.GetEyeResolution.html": {
    "href": "api/YVR.Core.YVRPlugin.GetEyeResolution.html",
    "title": "Method GetEyeResolution | Core",
    "keywords": "Method GetEyeResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeResolution(ref Vector2) public virtual void GetEyeResolution(ref Vector2 resolution) Parameters resolution Vector2"
  },
  "api/YVR.Core.YVRPlugin.GetEyeTrackingEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.GetEyeTrackingEnable.html",
    "title": "Method GetEyeTrackingEnable | Core",
    "keywords": "Method GetEyeTrackingEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeTrackingEnable() public virtual bool GetEyeTrackingEnable() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetEyeTrackingSupportes.html": {
    "href": "api/YVR.Core.YVRPlugin.GetEyeTrackingSupportes.html",
    "title": "Method GetEyeTrackingSupportes | Core",
    "keywords": "Method GetEyeTrackingSupportes Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeTrackingSupportes() public virtual bool GetEyeTrackingSupportes() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetGPULevel.html": {
    "href": "api/YVR.Core.YVRPlugin.GetGPULevel.html",
    "title": "Method GetGPULevel | Core",
    "keywords": "Method GetGPULevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetGPULevel() public virtual int GetGPULevel() Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetGPUUtilLevel.html": {
    "href": "api/YVR.Core.YVRPlugin.GetGPUUtilLevel.html",
    "title": "Method GetGPUUtilLevel | Core",
    "keywords": "Method GetGPUUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetGPUUtilLevel() public virtual float GetGPUUtilLevel() Returns float"
  },
  "api/YVR.Core.YVRPlugin.GetHandAutoActivateTime.html": {
    "href": "api/YVR.Core.YVRPlugin.GetHandAutoActivateTime.html",
    "title": "Method GetHandAutoActivateTime | Core",
    "keywords": "Method GetHandAutoActivateTime Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandAutoActivateTime() public virtual int GetHandAutoActivateTime() Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetHandEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.GetHandEnable.html",
    "title": "Method GetHandEnable | Core",
    "keywords": "Method GetHandEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandEnable() public virtual bool GetHandEnable() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetHandJointLocations.html": {
    "href": "api/YVR.Core.YVRPlugin.GetHandJointLocations.html",
    "title": "Method GetHandJointLocations | Core",
    "keywords": "Method GetHandJointLocations Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandJointLocations(HandType, ref HandJointLocations) public virtual void GetHandJointLocations(HandType handType, ref HandJointLocations jointLocations) Parameters handType HandType jointLocations HandJointLocations"
  },
  "api/YVR.Core.YVRPlugin.GetPassthroughImageDiffRotation.html": {
    "href": "api/YVR.Core.YVRPlugin.GetPassthroughImageDiffRotation.html",
    "title": "Method GetPassthroughImageDiffRotation | Core",
    "keywords": "Method GetPassthroughImageDiffRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPassthroughImageDiffRotation(int) public virtual Quaternion GetPassthroughImageDiffRotation(int eyeIndex) Parameters eyeIndex int Returns Quaternion"
  },
  "api/YVR.Core.YVRPlugin.GetPassthroughSwapchainImageIndex.html": {
    "href": "api/YVR.Core.YVRPlugin.GetPassthroughSwapchainImageIndex.html",
    "title": "Method GetPassthroughSwapchainImageIndex | Core",
    "keywords": "Method GetPassthroughSwapchainImageIndex Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPassthroughSwapchainImageIndex() public virtual int GetPassthroughSwapchainImageIndex() Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetPassthroughSwapchainImageValid.html": {
    "href": "api/YVR.Core.YVRPlugin.GetPassthroughSwapchainImageValid.html",
    "title": "Method GetPassthroughSwapchainImageValid | Core",
    "keywords": "Method GetPassthroughSwapchainImageValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPassthroughSwapchainImageValid() public virtual bool GetPassthroughSwapchainImageValid() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetPolygonBuffer.html": {
    "href": "api/YVR.Core.YVRPlugin.GetPolygonBuffer.html",
    "title": "Method GetPolygonBuffer | Core",
    "keywords": "Method GetPolygonBuffer Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPolygonBuffer(ulong, uint) public virtual IntPtr GetPolygonBuffer(ulong planeId, uint count) Parameters planeId ulong count uint Returns IntPtr"
  },
  "api/YVR.Core.YVRPlugin.GetPrimaryController.html": {
    "href": "api/YVR.Core.YVRPlugin.GetPrimaryController.html",
    "title": "Method GetPrimaryController | Core",
    "keywords": "Method GetPrimaryController Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPrimaryController(ref uint) public virtual void GetPrimaryController(ref uint controllerMask) Parameters controllerMask uint"
  },
  "api/YVR.Core.YVRPlugin.GetRecommendedResolution.html": {
    "href": "api/YVR.Core.YVRPlugin.GetRecommendedResolution.html",
    "title": "Method GetRecommendedResolution | Core",
    "keywords": "Method GetRecommendedResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRecommendedResolution(ref YVRExtent2DInt) public virtual bool GetRecommendedResolution(ref YVRExtent2DInt outRecommendedResolution) Parameters outRecommendedResolution YVRExtent2DInt Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceBoundary2D.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceBoundary2D.html",
    "title": "Method GetSpaceBoundary2D | Core",
    "keywords": "Method GetSpaceBoundary2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceBoundary2D(ulong, ref YVRBoundary2D) public virtual int GetSpaceBoundary2D(ulong anchorHandle, ref YVRBoundary2D boundary2D) Parameters anchorHandle ulong boundary2D YVRBoundary2D Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceBoundingBox2D.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceBoundingBox2D.html",
    "title": "Method GetSpaceBoundingBox2D | Core",
    "keywords": "Method GetSpaceBoundingBox2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceBoundingBox2D(ulong, ref YVRRect2D) public virtual int GetSpaceBoundingBox2D(ulong anchorHandle, ref YVRRect2D boundingBox2D) Parameters anchorHandle ulong boundingBox2D YVRRect2D Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceBoundingBox3D.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceBoundingBox3D.html",
    "title": "Method GetSpaceBoundingBox3D | Core",
    "keywords": "Method GetSpaceBoundingBox3D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceBoundingBox3D(ulong, ref YVRRect3D) public virtual int GetSpaceBoundingBox3D(ulong anchorHandle, ref YVRRect3D boundingBox3D) Parameters anchorHandle ulong boundingBox3D YVRRect3D Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceContainer.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceContainer.html",
    "title": "Method GetSpaceContainer | Core",
    "keywords": "Method GetSpaceContainer Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceContainer(ulong, ref YVRSceneAnchorContainer) public virtual int GetSpaceContainer(ulong anchorHandle, ref YVRSceneAnchorContainer sceneAnchorContainer) Parameters anchorHandle ulong sceneAnchorContainer YVRSceneAnchorContainer Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceRoomLayout.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceRoomLayout.html",
    "title": "Method GetSpaceRoomLayout | Core",
    "keywords": "Method GetSpaceRoomLayout Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceRoomLayout(ulong, ref YVRRoomLayout) public virtual int GetSpaceRoomLayout(ulong anchorHandle, ref YVRRoomLayout roomLayout) Parameters anchorHandle ulong roomLayout YVRRoomLayout Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceSemanticLabels.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceSemanticLabels.html",
    "title": "Method GetSpaceSemanticLabels | Core",
    "keywords": "Method GetSpaceSemanticLabels Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) public virtual int GetSpaceSemanticLabels(ulong anchorHandle, ref YVRAnchorSemanticLabel anchorSemanticLabel) Parameters anchorHandle ulong anchorSemanticLabel YVRAnchorSemanticLabel Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpaceTriangleMesh.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpaceTriangleMesh.html",
    "title": "Method GetSpaceTriangleMesh | Core",
    "keywords": "Method GetSpaceTriangleMesh Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) public virtual int GetSpaceTriangleMesh(ulong anchorHandle, ref YVRAnchorTriangleMeshInternal anchorTriangleMesh) Parameters anchorHandle ulong anchorTriangleMesh YVRAnchorTriangleMeshInternal Returns int"
  },
  "api/YVR.Core.YVRPlugin.GetSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpatialAnchorComponentStatus.html",
    "title": "Method GetSpatialAnchorComponentStatus | Core",
    "keywords": "Method GetSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) public virtual void GetSpatialAnchorComponentStatus(ulong space, YVRSpatialAnchorComponentType componentType, ref YVRSpatialAnchorComponentStatus status) Parameters space ulong componentType YVRSpatialAnchorComponentType status YVRSpatialAnchorComponentStatus"
  },
  "api/YVR.Core.YVRPlugin.GetSpatialAnchorEnumerateSupported.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpatialAnchorEnumerateSupported.html",
    "title": "Method GetSpatialAnchorEnumerateSupported | Core",
    "keywords": "Method GetSpatialAnchorEnumerateSupported Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorEnumerateSupported(ulong, ref YVRSpatialAnchorSupportedComponent) public virtual void GetSpatialAnchorEnumerateSupported(ulong space, ref YVRSpatialAnchorSupportedComponent components) Parameters space ulong components YVRSpatialAnchorSupportedComponent"
  },
  "api/YVR.Core.YVRPlugin.GetSpatialAnchorPose.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpatialAnchorPose.html",
    "title": "Method GetSpatialAnchorPose | Core",
    "keywords": "Method GetSpatialAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) public virtual bool GetSpatialAnchorPose(ulong space, ref Vector3 position, ref Quaternion rotation, ref YVRAnchorLocationFlags locationFlags) Parameters space ulong position Vector3 rotation Quaternion locationFlags YVRAnchorLocationFlags Returns bool"
  },
  "api/YVR.Core.YVRPlugin.GetSpatialAnchorUUID.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpatialAnchorUUID.html",
    "title": "Method GetSpatialAnchorUUID | Core",
    "keywords": "Method GetSpatialAnchorUUID Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorUUID(ulong, ref YVRSpatialAnchorUUID) public virtual void GetSpatialAnchorUUID(ulong anchorHandle, ref YVRSpatialAnchorUUID uuid) Parameters anchorHandle ulong uuid YVRSpatialAnchorUUID"
  },
  "api/YVR.Core.YVRPlugin.GetSpatialAnchorUserId.html": {
    "href": "api/YVR.Core.YVRPlugin.GetSpatialAnchorUserId.html",
    "title": "Method GetSpatialAnchorUserId | Core",
    "keywords": "Method GetSpatialAnchorUserId Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorUserId(ulong, ref ulong) public virtual void GetSpatialAnchorUserId(ulong spaceUser, ref ulong userId) Parameters spaceUser ulong userId ulong"
  },
  "api/YVR.Core.YVRPlugin.GetStereoRenderingMode.html": {
    "href": "api/YVR.Core.YVRPlugin.GetStereoRenderingMode.html",
    "title": "Method GetStereoRenderingMode | Core",
    "keywords": "Method GetStereoRenderingMode Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetStereoRenderingMode() public virtual StereoRenderingMode GetStereoRenderingMode() Returns StereoRenderingMode"
  },
  "api/YVR.Core.YVRPlugin.GetVolumeLevel.html": {
    "href": "api/YVR.Core.YVRPlugin.GetVolumeLevel.html",
    "title": "Method GetVolumeLevel | Core",
    "keywords": "Method GetVolumeLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetVolumeLevel() public virtual float GetVolumeLevel() Returns float"
  },
  "api/YVR.Core.YVRPlugin.Instance.html": {
    "href": "api/YVR.Core.YVRPlugin.Instance.html",
    "title": "Property Instance | Core",
    "keywords": "Property Instance Namespace YVR.Core Assembly YVR.Core.Runtime.dll Instance public static YVRPlugin Instance { get; } Property Value YVRPlugin"
  },
  "api/YVR.Core.YVRPlugin.IsFocusing.html": {
    "href": "api/YVR.Core.YVRPlugin.IsFocusing.html",
    "title": "Method IsFocusing | Core",
    "keywords": "Method IsFocusing Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsFocusing() public virtual bool IsFocusing() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.IsUserPresent.html": {
    "href": "api/YVR.Core.YVRPlugin.IsUserPresent.html",
    "title": "Method IsUserPresent | Core",
    "keywords": "Method IsUserPresent Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsUserPresent() public virtual bool IsUserPresent() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.IsVisible.html": {
    "href": "api/YVR.Core.YVRPlugin.IsVisible.html",
    "title": "Method IsVisible | Core",
    "keywords": "Method IsVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsVisible() public virtual bool IsVisible() Returns bool"
  },
  "api/YVR.Core.YVRPlugin.QuerySpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPlugin.QuerySpatialAnchor.html",
    "title": "Method QuerySpatialAnchor | Core",
    "keywords": "Method QuerySpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, ref ulong) public virtual void QuerySpatialAnchor(YVRSpatialAnchorQueryInfo queryInfo, ref ulong requestId) Parameters queryInfo YVRSpatialAnchorQueryInfo requestId ulong"
  },
  "api/YVR.Core.YVRPlugin.RecenterTracking.html": {
    "href": "api/YVR.Core.YVRPlugin.RecenterTracking.html",
    "title": "Method RecenterTracking | Core",
    "keywords": "Method RecenterTracking Namespace YVR.Core Assembly YVR.Core.Runtime.dll RecenterTracking() public virtual void RecenterTracking()"
  },
  "api/YVR.Core.YVRPlugin.RequestSceneCapture.html": {
    "href": "api/YVR.Core.YVRPlugin.RequestSceneCapture.html",
    "title": "Method RequestSceneCapture | Core",
    "keywords": "Method RequestSceneCapture Namespace YVR.Core Assembly YVR.Core.Runtime.dll RequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) public virtual int RequestSceneCapture(ref YVRSceneCaptureRequest requestString, ref ulong requestId) Parameters requestString YVRSceneCaptureRequest requestId ulong Returns int"
  },
  "api/YVR.Core.YVRPlugin.SaveSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPlugin.SaveSpatialAnchor.html",
    "title": "Method SaveSpatialAnchor | Core",
    "keywords": "Method SaveSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) public virtual void SaveSpatialAnchor(YVRSpatialAnchorSaveInfo saveInfo, ref ulong requestId) Parameters saveInfo YVRSpatialAnchorSaveInfo requestId ulong"
  },
  "api/YVR.Core.YVRPlugin.SaveSpatialAnchorList.html": {
    "href": "api/YVR.Core.YVRPlugin.SaveSpatialAnchorList.html",
    "title": "Method SaveSpatialAnchorList | Core",
    "keywords": "Method SaveSpatialAnchorList Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo, ref ulong) public virtual void SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo listSaveInfo, ref ulong requestId) Parameters listSaveInfo YVRSpatialAnchorListSaveInfo requestId ulong"
  },
  "api/YVR.Core.YVRPlugin.SetAPPControllerEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAPPControllerEnable.html",
    "title": "Method SetAPPControllerEnable | Core",
    "keywords": "Method SetAPPControllerEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAPPControllerEnable(bool) public virtual void SetAPPControllerEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPlugin.SetAPPHandEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAPPHandEnable.html",
    "title": "Method SetAPPHandEnable | Core",
    "keywords": "Method SetAPPHandEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAPPHandEnable(bool) public virtual void SetAPPHandEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPlugin.SetAdapterResolutionPolicy.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAdapterResolutionPolicy.html",
    "title": "Method SetAdapterResolutionPolicy | Core",
    "keywords": "Method SetAdapterResolutionPolicy Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAdapterResolutionPolicy(AdapterResolutionPolicy) public virtual void SetAdapterResolutionPolicy(YVRQualityManager.AdapterResolutionPolicy adapterResolutionPolicy) Parameters adapterResolutionPolicy YVRQualityManager.AdapterResolutionPolicy"
  },
  "api/YVR.Core.YVRPlugin.SetAppSWEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAppSWEnable.html",
    "title": "Method SetAppSWEnable | Core",
    "keywords": "Method SetAppSWEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSWEnable(bool) public virtual void SetAppSWEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPlugin.SetAppSWSwitch.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAppSWSwitch.html",
    "title": "Method SetAppSWSwitch | Core",
    "keywords": "Method SetAppSWSwitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSWSwitch(bool) public virtual void SetAppSWSwitch(bool isOn) Parameters isOn bool"
  },
  "api/YVR.Core.YVRPlugin.SetAppSpacePosition.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAppSpacePosition.html",
    "title": "Method SetAppSpacePosition | Core",
    "keywords": "Method SetAppSpacePosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSpacePosition(float, float, float) public virtual void SetAppSpacePosition(float x, float y, float z) Parameters x float y float z float"
  },
  "api/YVR.Core.YVRPlugin.SetAppSpaceRotation.html": {
    "href": "api/YVR.Core.YVRPlugin.SetAppSpaceRotation.html",
    "title": "Method SetAppSpaceRotation | Core",
    "keywords": "Method SetAppSpaceRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSpaceRotation(float, float, float, float) public virtual void SetAppSpaceRotation(float x, float y, float z, float w) Parameters x float y float z float w float"
  },
  "api/YVR.Core.YVRPlugin.SetBlockInteractionData.html": {
    "href": "api/YVR.Core.YVRPlugin.SetBlockInteractionData.html",
    "title": "Method SetBlockInteractionData | Core",
    "keywords": "Method SetBlockInteractionData Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetBlockInteractionData(bool) public virtual void SetBlockInteractionData(bool isBlock) Parameters isBlock bool"
  },
  "api/YVR.Core.YVRPlugin.SetBoundaryDetectionEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.SetBoundaryDetectionEnable.html",
    "title": "Method SetBoundaryDetectionEnable | Core",
    "keywords": "Method SetBoundaryDetectionEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetBoundaryDetectionEnable(bool) public virtual void SetBoundaryDetectionEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPlugin.SetBoundaryVisible.html": {
    "href": "api/YVR.Core.YVRPlugin.SetBoundaryVisible.html",
    "title": "Method SetBoundaryVisible | Core",
    "keywords": "Method SetBoundaryVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetBoundaryVisible(bool) public virtual void SetBoundaryVisible(bool visible) Parameters visible bool"
  },
  "api/YVR.Core.YVRPlugin.SetControllerVibration.html": {
    "href": "api/YVR.Core.YVRPlugin.SetControllerVibration.html",
    "title": "Method SetControllerVibration | Core",
    "keywords": "Method SetControllerVibration Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetControllerVibration(uint, float, float) public virtual void SetControllerVibration(uint controllerMask, float frequency, float amplitude) Parameters controllerMask uint frequency float amplitude float SetControllerVibration(uint, float, float, float) public virtual void SetControllerVibration(uint controllerMask, float frequency, float amplitude, float duration) Parameters controllerMask uint frequency float amplitude float duration float"
  },
  "api/YVR.Core.YVRPlugin.SetCreateSpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetCreateSpatialAnchorCallback.html",
    "title": "Method SetCreateSpatialAnchorCallback | Core",
    "keywords": "Method SetCreateSpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) public virtual void SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool> callback) Parameters callback Action<YVRSpatialAnchorResult, bool>"
  },
  "api/YVR.Core.YVRPlugin.SetDisplayFrequency.html": {
    "href": "api/YVR.Core.YVRPlugin.SetDisplayFrequency.html",
    "title": "Method SetDisplayFrequency | Core",
    "keywords": "Method SetDisplayFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetDisplayFrequency(float) public virtual void SetDisplayFrequency(float value) Parameters value float"
  },
  "api/YVR.Core.YVRPlugin.SetEraseSpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetEraseSpatialAnchorCallback.html",
    "title": "Method SetEraseSpatialAnchorCallback | Core",
    "keywords": "Method SetEraseSpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) public virtual void SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool> callback) Parameters callback Action<YVRSpatialAnchorResult, bool>"
  },
  "api/YVR.Core.YVRPlugin.SetEventCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetEventCallback.html",
    "title": "Method SetEventCallback | Core",
    "keywords": "Method SetEventCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetEventCallback(Action<int>) public virtual void SetEventCallback(Action<int> eventCallback) Parameters eventCallback Action<int>"
  },
  "api/YVR.Core.YVRPlugin.SetEyeBufferLayerSettings.html": {
    "href": "api/YVR.Core.YVRPlugin.SetEyeBufferLayerSettings.html",
    "title": "Method SetEyeBufferLayerSettings | Core",
    "keywords": "Method SetEyeBufferLayerSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetEyeBufferLayerSettings(bool, bool, bool, bool) public virtual void SetEyeBufferLayerSettings(bool enableSuperSample, bool expensiveSuperSample, bool enableSharpen, bool expensiveSharpen) Parameters enableSuperSample bool expensiveSuperSample bool enableSharpen bool expensiveSharpen bool"
  },
  "api/YVR.Core.YVRPlugin.SetFoveation.html": {
    "href": "api/YVR.Core.YVRPlugin.SetFoveation.html",
    "title": "Method SetFoveation | Core",
    "keywords": "Method SetFoveation Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetFoveation(int, int) public virtual void SetFoveation(int ffrLevel, int ffrDynamic) Parameters ffrLevel int ffrDynamic int"
  },
  "api/YVR.Core.YVRPlugin.SetMeshBlockUpdateCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetMeshBlockUpdateCallback.html",
    "title": "Method SetMeshBlockUpdateCallback | Core",
    "keywords": "Method SetMeshBlockUpdateCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) public virtual void SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState> meshBlockChangeState) Parameters meshBlockChangeState Action<ulong, YVRMeshBlockChangeState>"
  },
  "api/YVR.Core.YVRPlugin.SetPassthrough.html": {
    "href": "api/YVR.Core.YVRPlugin.SetPassthrough.html",
    "title": "Method SetPassthrough | Core",
    "keywords": "Method SetPassthrough Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPassthrough(bool) public virtual void SetPassthrough(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPlugin.SetPassthroughProviderEnable.html": {
    "href": "api/YVR.Core.YVRPlugin.SetPassthroughProviderEnable.html",
    "title": "Method SetPassthroughProviderEnable | Core",
    "keywords": "Method SetPassthroughProviderEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPassthroughProviderEnable(bool) public virtual void SetPassthroughProviderEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPlugin.SetPerformanceLevel.html": {
    "href": "api/YVR.Core.YVRPlugin.SetPerformanceLevel.html",
    "title": "Method SetPerformanceLevel | Core",
    "keywords": "Method SetPerformanceLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPerformanceLevel(int, int) public virtual void SetPerformanceLevel(int cpuLevel, int gpuLevel) Parameters cpuLevel int gpuLevel int"
  },
  "api/YVR.Core.YVRPlugin.SetPlaneDetectionsCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetPlaneDetectionsCallback.html",
    "title": "Method SetPlaneDetectionsCallback | Core",
    "keywords": "Method SetPlaneDetectionsCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) public virtual void SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal> action) Parameters action Action<YVRPlaneDetectorLocationsInternal>"
  },
  "api/YVR.Core.YVRPlugin.SetPrimaryController.html": {
    "href": "api/YVR.Core.YVRPlugin.SetPrimaryController.html",
    "title": "Method SetPrimaryController | Core",
    "keywords": "Method SetPrimaryController Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPrimaryController(uint) public virtual void SetPrimaryController(uint controllerMask) Parameters controllerMask uint"
  },
  "api/YVR.Core.YVRPlugin.SetQuerySpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetQuerySpatialAnchorCallback.html",
    "title": "Method SetQuerySpatialAnchorCallback | Core",
    "keywords": "Method SetQuerySpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) public virtual void SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong> callback) Parameters callback Action<YVRQuerySpatialAnchorResult, ulong>"
  },
  "api/YVR.Core.YVRPlugin.SetSceneCaptureCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetSceneCaptureCallback.html",
    "title": "Method SetSceneCaptureCallback | Core",
    "keywords": "Method SetSceneCaptureCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSceneCaptureCallback(Action<ulong, bool>) public virtual void SetSceneCaptureCallback(Action<ulong, bool> callback) Parameters callback Action<ulong, bool>"
  },
  "api/YVR.Core.YVRPlugin.SetSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRPlugin.SetSpatialAnchorComponentStatus.html",
    "title": "Method SetSpatialAnchorComponentStatus | Core",
    "keywords": "Method SetSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) public virtual bool SetSpatialAnchorComponentStatus(ulong space, YVRSpatialAnchorComponentStatusSetInfo statusSetInfo, ref ulong requestId) Parameters space ulong statusSetInfo YVRSpatialAnchorComponentStatusSetInfo requestId ulong Returns bool"
  },
  "api/YVR.Core.YVRPlugin.SetSpatialAnchorSaveCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetSpatialAnchorSaveCompleteCallback.html",
    "title": "Method SetSpatialAnchorSaveCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorSaveCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) public virtual void SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool> callback) Parameters callback Action<YVRSpatialAnchorSaveCompleteInfo, bool>"
  },
  "api/YVR.Core.YVRPlugin.SetSpatialAnchorSaveListCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetSpatialAnchorSaveListCompleteCallback.html",
    "title": "Method SetSpatialAnchorSaveListCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorSaveListCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong>) public virtual void SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong> callback) Parameters callback Action<bool, ulong>"
  },
  "api/YVR.Core.YVRPlugin.SetSpatialAnchorShareCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetSpatialAnchorShareCompleteCallback.html",
    "title": "Method SetSpatialAnchorShareCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorShareCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorShareCompleteCallback(Action<bool, ulong>) public virtual void SetSpatialAnchorShareCompleteCallback(Action<bool, ulong> callback) Parameters callback Action<bool, ulong>"
  },
  "api/YVR.Core.YVRPlugin.SetSpatialAnchorStatusCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPlugin.SetSpatialAnchorStatusCompleteCallback.html",
    "title": "Method SetSpatialAnchorStatusCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorStatusCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) public virtual void SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool> callback) Parameters callback Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>"
  },
  "api/YVR.Core.YVRPlugin.SetTrackingSpace.html": {
    "href": "api/YVR.Core.YVRPlugin.SetTrackingSpace.html",
    "title": "Method SetTrackingSpace | Core",
    "keywords": "Method SetTrackingSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetTrackingSpace(TrackingSpace) public virtual void SetTrackingSpace(YVRTrackingStateManager.TrackingSpace trackingSpace) Parameters trackingSpace YVRTrackingStateManager.TrackingSpace"
  },
  "api/YVR.Core.YVRPlugin.SetVSyncCount.html": {
    "href": "api/YVR.Core.YVRPlugin.SetVSyncCount.html",
    "title": "Method SetVSyncCount | Core",
    "keywords": "Method SetVSyncCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetVSyncCount(VSyncCount) public virtual void SetVSyncCount(YVRQualityManager.VSyncCount vSyncCount) Parameters vSyncCount YVRQualityManager.VSyncCount"
  },
  "api/YVR.Core.YVRPlugin.ShareSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPlugin.ShareSpatialAnchor.html",
    "title": "Method ShareSpatialAnchor | Core",
    "keywords": "Method ShareSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll ShareSpatialAnchor(YVRSpatialAnchorShareInfo, ref ulong) public virtual void ShareSpatialAnchor(YVRSpatialAnchorShareInfo shareInfo, ref ulong requestId) Parameters shareInfo YVRSpatialAnchorShareInfo requestId ulong"
  },
  "api/YVR.Core.YVRPlugin.TestBoundaryNode.html": {
    "href": "api/YVR.Core.YVRPlugin.TestBoundaryNode.html",
    "title": "Method TestBoundaryNode | Core",
    "keywords": "Method TestBoundaryNode Namespace YVR.Core Assembly YVR.Core.Runtime.dll TestBoundaryNode(BoundaryNode, ref BoundaryTestResult) public virtual void TestBoundaryNode(YVRBoundary.BoundaryNode node, ref YVRBoundary.BoundaryTestResult testResult) Parameters node YVRBoundary.BoundaryNode testResult YVRBoundary.BoundaryTestResult"
  },
  "api/YVR.Core.YVRPlugin.TestBoundaryPoint.html": {
    "href": "api/YVR.Core.YVRPlugin.TestBoundaryPoint.html",
    "title": "Method TestBoundaryPoint | Core",
    "keywords": "Method TestBoundaryPoint Namespace YVR.Core Assembly YVR.Core.Runtime.dll TestBoundaryPoint(Vector3, ref BoundaryTestResult) public virtual void TestBoundaryPoint(Vector3 targetPoint, ref YVRBoundary.BoundaryTestResult testResult) Parameters targetPoint Vector3 testResult YVRBoundary.BoundaryTestResult"
  },
  "api/YVR.Core.YVRPlugin.html": {
    "href": "api/YVR.Core.YVRPlugin.html",
    "title": "Class YVRPlugin | Core",
    "keywords": "Class YVRPlugin Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public abstract class YVRPlugin Inheritance object YVRPlugin Derived YVRPluginAndroid YVRPluginWin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance Methods CreateEyeTracker() CreateMeshDetector() CreatePlaneDetection() CreateSpatialAnchor(Vector3, Quaternion, ref ulong) CreateSpatialAnchorUserHandle(ulong, ref ulong) DestroyEyeTracker() DestroyMeshDetector() DestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) EndPlaneDetection() GetAppSWEnable() GetAppSWSwitch() GetBatteryLevel() GetBatteryStatus() GetBatteryTemperature() GetBlockInteractionData() GetBoundaryConfigured() GetBoundaryDimensions() GetBoundaryGeometry() GetBoundaryVisible() GetCPULevel() GetCPUUtilLevel() GetCurrentInputDevice(ref ActiveInputDevice) GetDisplayFrequenciesAvailable() GetDisplayFrequency() GetEyeFov(int, ref EyeFov) GetEyeGazePose(ref EyeGazePose) GetEyeGazes(ref EyeGazesState) GetEyeResolution(ref Vector2) GetEyeTrackingEnable() GetEyeTrackingSupportes() GetGPULevel() GetGPUUtilLevel() GetHandAutoActivateTime() GetHandEnable() GetHandJointLocations(HandType, ref HandJointLocations) GetPassthroughImageDiffRotation(int) GetPassthroughSwapchainImageIndex() GetPassthroughSwapchainImageValid() GetPolygonBuffer(ulong, uint) GetPrimaryController(ref uint) GetRecommendedResolution(ref YVRExtent2DInt) GetSpaceBoundary2D(ulong, ref YVRBoundary2D) GetSpaceBoundingBox2D(ulong, ref YVRRect2D) GetSpaceBoundingBox3D(ulong, ref YVRRect3D) GetSpaceContainer(ulong, ref YVRSceneAnchorContainer) GetSpaceRoomLayout(ulong, ref YVRRoomLayout) GetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) GetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) GetSpatialAnchorEnumerateSupported(ulong, ref YVRSpatialAnchorSupportedComponent) GetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) GetSpatialAnchorUUID(ulong, ref YVRSpatialAnchorUUID) GetSpatialAnchorUserId(ulong, ref ulong) GetStereoRenderingMode() GetVolumeLevel() IsFocusing() IsUserPresent() IsVisible() QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, ref ulong) RecenterTracking() RequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo, ref ulong) SetAPPControllerEnable(bool) SetAPPHandEnable(bool) SetAdapterResolutionPolicy(AdapterResolutionPolicy) SetAppSWEnable(bool) SetAppSWSwitch(bool) SetAppSpacePosition(float, float, float) SetAppSpaceRotation(float, float, float, float) SetBlockInteractionData(bool) SetBoundaryDetectionEnable(bool) SetBoundaryVisible(bool) SetControllerVibration(uint, float, float) SetControllerVibration(uint, float, float, float) SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) SetDisplayFrequency(float) SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) SetEventCallback(Action<int>) SetEyeBufferLayerSettings(bool, bool, bool, bool) SetFoveation(int, int) SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) SetPassthrough(bool) SetPassthroughProviderEnable(bool) SetPerformanceLevel(int, int) SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) SetPrimaryController(uint) SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) SetSceneCaptureCallback(Action<ulong, bool>) SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong>) SetSpatialAnchorShareCompleteCallback(Action<bool, ulong>) SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) SetTrackingSpace(TrackingSpace) SetVSyncCount(VSyncCount) ShareSpatialAnchor(YVRSpatialAnchorShareInfo, ref ulong) TestBoundaryNode(BoundaryNode, ref BoundaryTestResult) TestBoundaryPoint(Vector3, ref BoundaryTestResult)"
  },
  "api/YVR.Core.YVRPluginAndroid.Create.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.Create.html",
    "title": "Method Create | Core",
    "keywords": "Method Create Namespace YVR.Core Assembly YVR.Core.Runtime.dll Create() public static YVRPluginAndroid Create() Returns YVRPluginAndroid"
  },
  "api/YVR.Core.YVRPluginAndroid.CreateEyeTracker.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.CreateEyeTracker.html",
    "title": "Method CreateEyeTracker | Core",
    "keywords": "Method CreateEyeTracker Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateEyeTracker() public override void CreateEyeTracker()"
  },
  "api/YVR.Core.YVRPluginAndroid.CreateMeshDetector.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.CreateMeshDetector.html",
    "title": "Method CreateMeshDetector | Core",
    "keywords": "Method CreateMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateMeshDetector() public override void CreateMeshDetector()"
  },
  "api/YVR.Core.YVRPluginAndroid.CreatePlaneDetection.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.CreatePlaneDetection.html",
    "title": "Method CreatePlaneDetection | Core",
    "keywords": "Method CreatePlaneDetection Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreatePlaneDetection() public override void CreatePlaneDetection()"
  },
  "api/YVR.Core.YVRPluginAndroid.CreateSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.CreateSpatialAnchor.html",
    "title": "Method CreateSpatialAnchor | Core",
    "keywords": "Method CreateSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateSpatialAnchor(Vector3, Quaternion, ref ulong) public override void CreateSpatialAnchor(Vector3 position, Quaternion rotation, ref ulong requestId) Parameters position Vector3 rotation Quaternion requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.CreateSpatialAnchorUserHandle.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.CreateSpatialAnchorUserHandle.html",
    "title": "Method CreateSpatialAnchorUserHandle | Core",
    "keywords": "Method CreateSpatialAnchorUserHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateSpatialAnchorUserHandle(ulong, ref ulong) public override void CreateSpatialAnchorUserHandle(ulong userId, ref ulong spaceUser) Parameters userId ulong spaceUser ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.DestroyEyeTracker.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.DestroyEyeTracker.html",
    "title": "Method DestroyEyeTracker | Core",
    "keywords": "Method DestroyEyeTracker Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyEyeTracker() public override void DestroyEyeTracker()"
  },
  "api/YVR.Core.YVRPluginAndroid.DestroyMeshDetector.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.DestroyMeshDetector.html",
    "title": "Method DestroyMeshDetector | Core",
    "keywords": "Method DestroyMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroyMeshDetector() public override void DestroyMeshDetector()"
  },
  "api/YVR.Core.YVRPluginAndroid.DestroySpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.DestroySpatialAnchor.html",
    "title": "Method DestroySpatialAnchor | Core",
    "keywords": "Method DestroySpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll DestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) public override void DestroySpatialAnchor(ulong space, YVRSpatialAnchorStorageLocation location, ref ulong requestId) Parameters space ulong location YVRSpatialAnchorStorageLocation requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.EndPlaneDetection.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.EndPlaneDetection.html",
    "title": "Method EndPlaneDetection | Core",
    "keywords": "Method EndPlaneDetection Namespace YVR.Core Assembly YVR.Core.Runtime.dll EndPlaneDetection() public override void EndPlaneDetection()"
  },
  "api/YVR.Core.YVRPluginAndroid.GetAppSWEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetAppSWEnable.html",
    "title": "Method GetAppSWEnable | Core",
    "keywords": "Method GetAppSWEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAppSWEnable() public override bool GetAppSWEnable() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetAppSWSwitch.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetAppSWSwitch.html",
    "title": "Method GetAppSWSwitch | Core",
    "keywords": "Method GetAppSWSwitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAppSWSwitch() public override bool GetAppSWSwitch() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBatteryLevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBatteryLevel.html",
    "title": "Method GetBatteryLevel | Core",
    "keywords": "Method GetBatteryLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBatteryLevel() public override float GetBatteryLevel() Returns float"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBatteryStatus.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBatteryStatus.html",
    "title": "Method GetBatteryStatus | Core",
    "keywords": "Method GetBatteryStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBatteryStatus() public override int GetBatteryStatus() Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBatteryTemperature.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBatteryTemperature.html",
    "title": "Method GetBatteryTemperature | Core",
    "keywords": "Method GetBatteryTemperature Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBatteryTemperature() public override float GetBatteryTemperature() Returns float"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBlockInteractionData.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBlockInteractionData.html",
    "title": "Method GetBlockInteractionData | Core",
    "keywords": "Method GetBlockInteractionData Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBlockInteractionData() public override bool GetBlockInteractionData() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBoundaryConfigured.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBoundaryConfigured.html",
    "title": "Method GetBoundaryConfigured | Core",
    "keywords": "Method GetBoundaryConfigured Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryConfigured() public override bool GetBoundaryConfigured() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBoundaryDimensions.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBoundaryDimensions.html",
    "title": "Method GetBoundaryDimensions | Core",
    "keywords": "Method GetBoundaryDimensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryDimensions() public override Vector3 GetBoundaryDimensions() Returns Vector3"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBoundaryGeometry.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBoundaryGeometry.html",
    "title": "Method GetBoundaryGeometry | Core",
    "keywords": "Method GetBoundaryGeometry Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryGeometry() public override Vector3[] GetBoundaryGeometry() Returns Vector3[]"
  },
  "api/YVR.Core.YVRPluginAndroid.GetBoundaryVisible.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetBoundaryVisible.html",
    "title": "Method GetBoundaryVisible | Core",
    "keywords": "Method GetBoundaryVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetBoundaryVisible() public override bool GetBoundaryVisible() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetCPULevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetCPULevel.html",
    "title": "Method GetCPULevel | Core",
    "keywords": "Method GetCPULevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCPULevel() public override int GetCPULevel() Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetCPUUtilLevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetCPUUtilLevel.html",
    "title": "Method GetCPUUtilLevel | Core",
    "keywords": "Method GetCPUUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCPUUtilLevel() public override float GetCPUUtilLevel() Returns float"
  },
  "api/YVR.Core.YVRPluginAndroid.GetCurrentInputDevice.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetCurrentInputDevice.html",
    "title": "Method GetCurrentInputDevice | Core",
    "keywords": "Method GetCurrentInputDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCurrentInputDevice(ref ActiveInputDevice) public override void GetCurrentInputDevice(ref ActiveInputDevice inputDevice) Parameters inputDevice ActiveInputDevice"
  },
  "api/YVR.Core.YVRPluginAndroid.GetDisplayFrequenciesAvailable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetDisplayFrequenciesAvailable.html",
    "title": "Method GetDisplayFrequenciesAvailable | Core",
    "keywords": "Method GetDisplayFrequenciesAvailable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetDisplayFrequenciesAvailable() public override float[] GetDisplayFrequenciesAvailable() Returns float[]"
  },
  "api/YVR.Core.YVRPluginAndroid.GetDisplayFrequency.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetDisplayFrequency.html",
    "title": "Method GetDisplayFrequency | Core",
    "keywords": "Method GetDisplayFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetDisplayFrequency() public override float GetDisplayFrequency() Returns float"
  },
  "api/YVR.Core.YVRPluginAndroid.GetEyeFov.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetEyeFov.html",
    "title": "Method GetEyeFov | Core",
    "keywords": "Method GetEyeFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeFov(int, ref EyeFov) public override void GetEyeFov(int eyeSide, ref YVRCameraRenderer.EyeFov eyeFov) Parameters eyeSide int eyeFov YVRCameraRenderer.EyeFov"
  },
  "api/YVR.Core.YVRPluginAndroid.GetEyeGazePose.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetEyeGazePose.html",
    "title": "Method GetEyeGazePose | Core",
    "keywords": "Method GetEyeGazePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeGazePose(ref EyeGazePose) public override void GetEyeGazePose(ref EyeTrackingData.EyeGazePose eyeGazePose) Parameters eyeGazePose EyeTrackingData.EyeGazePose"
  },
  "api/YVR.Core.YVRPluginAndroid.GetEyeGazes.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetEyeGazes.html",
    "title": "Method GetEyeGazes | Core",
    "keywords": "Method GetEyeGazes Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeGazes(ref EyeGazesState) public override void GetEyeGazes(ref EyeTrackingData.EyeGazesState eyeGazesState) Parameters eyeGazesState EyeTrackingData.EyeGazesState"
  },
  "api/YVR.Core.YVRPluginAndroid.GetEyeResolution.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetEyeResolution.html",
    "title": "Method GetEyeResolution | Core",
    "keywords": "Method GetEyeResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeResolution(ref Vector2) public override void GetEyeResolution(ref Vector2 resolution) Parameters resolution Vector2"
  },
  "api/YVR.Core.YVRPluginAndroid.GetEyeTrackingEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetEyeTrackingEnable.html",
    "title": "Method GetEyeTrackingEnable | Core",
    "keywords": "Method GetEyeTrackingEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeTrackingEnable() public override bool GetEyeTrackingEnable() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetEyeTrackingSupportes.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetEyeTrackingSupportes.html",
    "title": "Method GetEyeTrackingSupportes | Core",
    "keywords": "Method GetEyeTrackingSupportes Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeTrackingSupportes() public override bool GetEyeTrackingSupportes() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetGPULevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetGPULevel.html",
    "title": "Method GetGPULevel | Core",
    "keywords": "Method GetGPULevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetGPULevel() public override int GetGPULevel() Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetGPUUtilLevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetGPUUtilLevel.html",
    "title": "Method GetGPUUtilLevel | Core",
    "keywords": "Method GetGPUUtilLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetGPUUtilLevel() public override float GetGPUUtilLevel() Returns float"
  },
  "api/YVR.Core.YVRPluginAndroid.GetHandAutoActivateTime.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetHandAutoActivateTime.html",
    "title": "Method GetHandAutoActivateTime | Core",
    "keywords": "Method GetHandAutoActivateTime Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandAutoActivateTime() public override int GetHandAutoActivateTime() Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetHandEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetHandEnable.html",
    "title": "Method GetHandEnable | Core",
    "keywords": "Method GetHandEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandEnable() public override bool GetHandEnable() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetHandJointLocations.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetHandJointLocations.html",
    "title": "Method GetHandJointLocations | Core",
    "keywords": "Method GetHandJointLocations Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandJointLocations(HandType, ref HandJointLocations) public override void GetHandJointLocations(HandType handType, ref HandJointLocations jointLocations) Parameters handType HandType jointLocations HandJointLocations"
  },
  "api/YVR.Core.YVRPluginAndroid.GetPassthroughImageDiffRotation.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetPassthroughImageDiffRotation.html",
    "title": "Method GetPassthroughImageDiffRotation | Core",
    "keywords": "Method GetPassthroughImageDiffRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPassthroughImageDiffRotation(int) public override Quaternion GetPassthroughImageDiffRotation(int eyeIndex) Parameters eyeIndex int Returns Quaternion"
  },
  "api/YVR.Core.YVRPluginAndroid.GetPassthroughSwapchainImageIndex.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetPassthroughSwapchainImageIndex.html",
    "title": "Method GetPassthroughSwapchainImageIndex | Core",
    "keywords": "Method GetPassthroughSwapchainImageIndex Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPassthroughSwapchainImageIndex() public override int GetPassthroughSwapchainImageIndex() Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetPassthroughSwapchainImageValid.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetPassthroughSwapchainImageValid.html",
    "title": "Method GetPassthroughSwapchainImageValid | Core",
    "keywords": "Method GetPassthroughSwapchainImageValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPassthroughSwapchainImageValid() public override bool GetPassthroughSwapchainImageValid() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetPolygonBuffer.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetPolygonBuffer.html",
    "title": "Method GetPolygonBuffer | Core",
    "keywords": "Method GetPolygonBuffer Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPolygonBuffer(ulong, uint) public override IntPtr GetPolygonBuffer(ulong planeId, uint count) Parameters planeId ulong count uint Returns IntPtr"
  },
  "api/YVR.Core.YVRPluginAndroid.GetPrimaryController.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetPrimaryController.html",
    "title": "Method GetPrimaryController | Core",
    "keywords": "Method GetPrimaryController Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetPrimaryController(ref uint) public override void GetPrimaryController(ref uint controllerMask) Parameters controllerMask uint"
  },
  "api/YVR.Core.YVRPluginAndroid.GetRecommendedResolution.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetRecommendedResolution.html",
    "title": "Method GetRecommendedResolution | Core",
    "keywords": "Method GetRecommendedResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetRecommendedResolution(ref YVRExtent2DInt) public override bool GetRecommendedResolution(ref YVRExtent2DInt outRecommendedResolution) Parameters outRecommendedResolution YVRExtent2DInt Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceBoundary2D.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceBoundary2D.html",
    "title": "Method GetSpaceBoundary2D | Core",
    "keywords": "Method GetSpaceBoundary2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceBoundary2D(ulong, ref YVRBoundary2D) public override int GetSpaceBoundary2D(ulong anchorHandle, ref YVRBoundary2D boundary2D) Parameters anchorHandle ulong boundary2D YVRBoundary2D Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceBoundingBox2D.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceBoundingBox2D.html",
    "title": "Method GetSpaceBoundingBox2D | Core",
    "keywords": "Method GetSpaceBoundingBox2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceBoundingBox2D(ulong, ref YVRRect2D) public override int GetSpaceBoundingBox2D(ulong anchorHandle, ref YVRRect2D boundingBox2D) Parameters anchorHandle ulong boundingBox2D YVRRect2D Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceBoundingBox3D.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceBoundingBox3D.html",
    "title": "Method GetSpaceBoundingBox3D | Core",
    "keywords": "Method GetSpaceBoundingBox3D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceBoundingBox3D(ulong, ref YVRRect3D) public override int GetSpaceBoundingBox3D(ulong anchorHandle, ref YVRRect3D boundingBox3D) Parameters anchorHandle ulong boundingBox3D YVRRect3D Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceContainer.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceContainer.html",
    "title": "Method GetSpaceContainer | Core",
    "keywords": "Method GetSpaceContainer Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceContainer(ulong, ref YVRSceneAnchorContainer) public override int GetSpaceContainer(ulong anchorHandle, ref YVRSceneAnchorContainer sceneAnchorContainer) Parameters anchorHandle ulong sceneAnchorContainer YVRSceneAnchorContainer Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceRoomLayout.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceRoomLayout.html",
    "title": "Method GetSpaceRoomLayout | Core",
    "keywords": "Method GetSpaceRoomLayout Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceRoomLayout(ulong, ref YVRRoomLayout) public override int GetSpaceRoomLayout(ulong anchorHandle, ref YVRRoomLayout roomLayout) Parameters anchorHandle ulong roomLayout YVRRoomLayout Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceSemanticLabels.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceSemanticLabels.html",
    "title": "Method GetSpaceSemanticLabels | Core",
    "keywords": "Method GetSpaceSemanticLabels Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) public override int GetSpaceSemanticLabels(ulong anchorHandle, ref YVRAnchorSemanticLabel anchorSemanticLabel) Parameters anchorHandle ulong anchorSemanticLabel YVRAnchorSemanticLabel Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpaceTriangleMesh.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpaceTriangleMesh.html",
    "title": "Method GetSpaceTriangleMesh | Core",
    "keywords": "Method GetSpaceTriangleMesh Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) public override int GetSpaceTriangleMesh(ulong anchorHandle, ref YVRAnchorTriangleMeshInternal anchorTriangleMesh) Parameters anchorHandle ulong anchorTriangleMesh YVRAnchorTriangleMeshInternal Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorComponentStatus.html",
    "title": "Method GetSpatialAnchorComponentStatus | Core",
    "keywords": "Method GetSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) public override void GetSpatialAnchorComponentStatus(ulong space, YVRSpatialAnchorComponentType componentType, ref YVRSpatialAnchorComponentStatus status) Parameters space ulong componentType YVRSpatialAnchorComponentType status YVRSpatialAnchorComponentStatus"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorEnumerateSupported.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorEnumerateSupported.html",
    "title": "Method GetSpatialAnchorEnumerateSupported | Core",
    "keywords": "Method GetSpatialAnchorEnumerateSupported Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorEnumerateSupported(ulong, ref YVRSpatialAnchorSupportedComponent) public override void GetSpatialAnchorEnumerateSupported(ulong space, ref YVRSpatialAnchorSupportedComponent components) Parameters space ulong components YVRSpatialAnchorSupportedComponent"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorPose.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorPose.html",
    "title": "Method GetSpatialAnchorPose | Core",
    "keywords": "Method GetSpatialAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) public override bool GetSpatialAnchorPose(ulong spatialId, ref Vector3 position, ref Quaternion rotation, ref YVRAnchorLocationFlags locationFlags) Parameters spatialId ulong position Vector3 rotation Quaternion locationFlags YVRAnchorLocationFlags Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorUUID.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorUUID.html",
    "title": "Method GetSpatialAnchorUUID | Core",
    "keywords": "Method GetSpatialAnchorUUID Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorUUID(ulong, ref YVRSpatialAnchorUUID) public override void GetSpatialAnchorUUID(ulong anchorHandle, ref YVRSpatialAnchorUUID uuid) Parameters anchorHandle ulong uuid YVRSpatialAnchorUUID"
  },
  "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorUserId.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetSpatialAnchorUserId.html",
    "title": "Method GetSpatialAnchorUserId | Core",
    "keywords": "Method GetSpatialAnchorUserId Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorUserId(ulong, ref ulong) public override void GetSpatialAnchorUserId(ulong spaceUser, ref ulong userId) Parameters spaceUser ulong userId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.GetStereoRenderingMode.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetStereoRenderingMode.html",
    "title": "Method GetStereoRenderingMode | Core",
    "keywords": "Method GetStereoRenderingMode Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetStereoRenderingMode() public override StereoRenderingMode GetStereoRenderingMode() Returns StereoRenderingMode"
  },
  "api/YVR.Core.YVRPluginAndroid.GetVolumeLevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.GetVolumeLevel.html",
    "title": "Method GetVolumeLevel | Core",
    "keywords": "Method GetVolumeLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetVolumeLevel() public override float GetVolumeLevel() Returns float"
  },
  "api/YVR.Core.YVRPluginAndroid.IsFocusing.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.IsFocusing.html",
    "title": "Method IsFocusing | Core",
    "keywords": "Method IsFocusing Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsFocusing() public override bool IsFocusing() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.IsUserPresent.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.IsUserPresent.html",
    "title": "Method IsUserPresent | Core",
    "keywords": "Method IsUserPresent Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsUserPresent() public override bool IsUserPresent() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.IsVisible.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.IsVisible.html",
    "title": "Method IsVisible | Core",
    "keywords": "Method IsVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsVisible() public override bool IsVisible() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.QuerySpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.QuerySpatialAnchor.html",
    "title": "Method QuerySpatialAnchor | Core",
    "keywords": "Method QuerySpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, ref ulong) public override void QuerySpatialAnchor(YVRSpatialAnchorQueryInfo queryInfo, ref ulong requestId) Parameters queryInfo YVRSpatialAnchorQueryInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.RecenterTracking.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.RecenterTracking.html",
    "title": "Method RecenterTracking | Core",
    "keywords": "Method RecenterTracking Namespace YVR.Core Assembly YVR.Core.Runtime.dll RecenterTracking() public override void RecenterTracking()"
  },
  "api/YVR.Core.YVRPluginAndroid.RequestSceneCapture.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.RequestSceneCapture.html",
    "title": "Method RequestSceneCapture | Core",
    "keywords": "Method RequestSceneCapture Namespace YVR.Core Assembly YVR.Core.Runtime.dll RequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) public override int RequestSceneCapture(ref YVRSceneCaptureRequest requestString, ref ulong requestId) Parameters requestString YVRSceneCaptureRequest requestId ulong Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.SaveSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SaveSpatialAnchor.html",
    "title": "Method SaveSpatialAnchor | Core",
    "keywords": "Method SaveSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) public override void SaveSpatialAnchor(YVRSpatialAnchorSaveInfo saveInfo, ref ulong requestId) Parameters saveInfo YVRSpatialAnchorSaveInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.SaveSpatialAnchorList.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SaveSpatialAnchorList.html",
    "title": "Method SaveSpatialAnchorList | Core",
    "keywords": "Method SaveSpatialAnchorList Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo, ref ulong) public override void SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo listSaveInfo, ref ulong requestId) Parameters listSaveInfo YVRSpatialAnchorListSaveInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAPPControllerEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAPPControllerEnable.html",
    "title": "Method SetAPPControllerEnable | Core",
    "keywords": "Method SetAPPControllerEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAPPControllerEnable(bool) public override void SetAPPControllerEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAPPHandEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAPPHandEnable.html",
    "title": "Method SetAPPHandEnable | Core",
    "keywords": "Method SetAPPHandEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAPPHandEnable(bool) public override void SetAPPHandEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAdapterResolutionPolicy.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAdapterResolutionPolicy.html",
    "title": "Method SetAdapterResolutionPolicy | Core",
    "keywords": "Method SetAdapterResolutionPolicy Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAdapterResolutionPolicy(AdapterResolutionPolicy) public override void SetAdapterResolutionPolicy(YVRQualityManager.AdapterResolutionPolicy adapterResolutionPolicy) Parameters adapterResolutionPolicy YVRQualityManager.AdapterResolutionPolicy"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAppSWEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAppSWEnable.html",
    "title": "Method SetAppSWEnable | Core",
    "keywords": "Method SetAppSWEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSWEnable(bool) public override void SetAppSWEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAppSWSwitch.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAppSWSwitch.html",
    "title": "Method SetAppSWSwitch | Core",
    "keywords": "Method SetAppSWSwitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSWSwitch(bool) public override void SetAppSWSwitch(bool isOn) Parameters isOn bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAppSpacePosition.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAppSpacePosition.html",
    "title": "Method SetAppSpacePosition | Core",
    "keywords": "Method SetAppSpacePosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSpacePosition(float, float, float) public override void SetAppSpacePosition(float x, float y, float z) Parameters x float y float z float"
  },
  "api/YVR.Core.YVRPluginAndroid.SetAppSpaceRotation.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetAppSpaceRotation.html",
    "title": "Method SetAppSpaceRotation | Core",
    "keywords": "Method SetAppSpaceRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetAppSpaceRotation(float, float, float, float) public override void SetAppSpaceRotation(float x, float y, float z, float w) Parameters x float y float z float w float"
  },
  "api/YVR.Core.YVRPluginAndroid.SetBlockInteractionData.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetBlockInteractionData.html",
    "title": "Method SetBlockInteractionData | Core",
    "keywords": "Method SetBlockInteractionData Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetBlockInteractionData(bool) public override void SetBlockInteractionData(bool isBlock) Parameters isBlock bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetBoundaryDetectionEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetBoundaryDetectionEnable.html",
    "title": "Method SetBoundaryDetectionEnable | Core",
    "keywords": "Method SetBoundaryDetectionEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetBoundaryDetectionEnable(bool) public override void SetBoundaryDetectionEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetBoundaryVisible.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetBoundaryVisible.html",
    "title": "Method SetBoundaryVisible | Core",
    "keywords": "Method SetBoundaryVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetBoundaryVisible(bool) public override void SetBoundaryVisible(bool visible) Parameters visible bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetControllerVibration.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetControllerVibration.html",
    "title": "Method SetControllerVibration | Core",
    "keywords": "Method SetControllerVibration Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetControllerVibration(uint, float, float) public override void SetControllerVibration(uint controllerMask, float frequency, float amplitude) Parameters controllerMask uint frequency float amplitude float SetControllerVibration(uint, float, float, float) public override void SetControllerVibration(uint controllerMask, float frequency, float amplitude, float duration) Parameters controllerMask uint frequency float amplitude float duration float"
  },
  "api/YVR.Core.YVRPluginAndroid.SetCreateSpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetCreateSpatialAnchorCallback.html",
    "title": "Method SetCreateSpatialAnchorCallback | Core",
    "keywords": "Method SetCreateSpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) public override void SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool> callback) Parameters callback Action<YVRSpatialAnchorResult, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetDisplayFrequency.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetDisplayFrequency.html",
    "title": "Method SetDisplayFrequency | Core",
    "keywords": "Method SetDisplayFrequency Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetDisplayFrequency(float) public override void SetDisplayFrequency(float displayFrequency) Parameters displayFrequency float"
  },
  "api/YVR.Core.YVRPluginAndroid.SetEraseSpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetEraseSpatialAnchorCallback.html",
    "title": "Method SetEraseSpatialAnchorCallback | Core",
    "keywords": "Method SetEraseSpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) public override void SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool> callback) Parameters callback Action<YVRSpatialAnchorResult, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetEventCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetEventCallback.html",
    "title": "Method SetEventCallback | Core",
    "keywords": "Method SetEventCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetEventCallback(Action<int>) public override void SetEventCallback(Action<int> eventCallback) Parameters eventCallback Action<int>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetEyeBufferLayerSettings.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetEyeBufferLayerSettings.html",
    "title": "Method SetEyeBufferLayerSettings | Core",
    "keywords": "Method SetEyeBufferLayerSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetEyeBufferLayerSettings(bool, bool, bool, bool) public override void SetEyeBufferLayerSettings(bool enableSuperSample, bool expensiveSuperSample, bool enableSharpen, bool expensiveSharpen) Parameters enableSuperSample bool expensiveSuperSample bool enableSharpen bool expensiveSharpen bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetFoveation.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetFoveation.html",
    "title": "Method SetFoveation | Core",
    "keywords": "Method SetFoveation Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetFoveation(int, int) public override void SetFoveation(int ffrLevel, int ffrDynamic) Parameters ffrLevel int ffrDynamic int"
  },
  "api/YVR.Core.YVRPluginAndroid.SetMeshBlockUpdateCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetMeshBlockUpdateCallback.html",
    "title": "Method SetMeshBlockUpdateCallback | Core",
    "keywords": "Method SetMeshBlockUpdateCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) public override void SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState> meshBlockChangeState) Parameters meshBlockChangeState Action<ulong, YVRMeshBlockChangeState>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetPassthrough.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetPassthrough.html",
    "title": "Method SetPassthrough | Core",
    "keywords": "Method SetPassthrough Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPassthrough(bool) public override void SetPassthrough(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetPassthroughProviderEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetPassthroughProviderEnable.html",
    "title": "Method SetPassthroughProviderEnable | Core",
    "keywords": "Method SetPassthroughProviderEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPassthroughProviderEnable(bool) public override void SetPassthroughProviderEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetPerformanceLevel.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetPerformanceLevel.html",
    "title": "Method SetPerformanceLevel | Core",
    "keywords": "Method SetPerformanceLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPerformanceLevel(int, int) public override void SetPerformanceLevel(int cpuLevel, int gpuLevel) Parameters cpuLevel int gpuLevel int"
  },
  "api/YVR.Core.YVRPluginAndroid.SetPlaneDetectionsCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetPlaneDetectionsCallback.html",
    "title": "Method SetPlaneDetectionsCallback | Core",
    "keywords": "Method SetPlaneDetectionsCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) public override void SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal> action) Parameters action Action<YVRPlaneDetectorLocationsInternal>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetPrimaryController.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetPrimaryController.html",
    "title": "Method SetPrimaryController | Core",
    "keywords": "Method SetPrimaryController Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetPrimaryController(uint) public override void SetPrimaryController(uint controllerMask) Parameters controllerMask uint"
  },
  "api/YVR.Core.YVRPluginAndroid.SetQuerySpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetQuerySpatialAnchorCallback.html",
    "title": "Method SetQuerySpatialAnchorCallback | Core",
    "keywords": "Method SetQuerySpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) public override void SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong> callback) Parameters callback Action<YVRQuerySpatialAnchorResult, ulong>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetSceneCaptureCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetSceneCaptureCallback.html",
    "title": "Method SetSceneCaptureCallback | Core",
    "keywords": "Method SetSceneCaptureCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSceneCaptureCallback(Action<ulong, bool>) public override void SetSceneCaptureCallback(Action<ulong, bool> callback) Parameters callback Action<ulong, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorComponentStatus.html",
    "title": "Method SetSpatialAnchorComponentStatus | Core",
    "keywords": "Method SetSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) public override bool SetSpatialAnchorComponentStatus(ulong space, YVRSpatialAnchorComponentStatusSetInfo statusSetInfo, ref ulong requestId) Parameters space ulong statusSetInfo YVRSpatialAnchorComponentStatusSetInfo requestId ulong Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorSaveCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorSaveCompleteCallback.html",
    "title": "Method SetSpatialAnchorSaveCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorSaveCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) public override void SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool> callback) Parameters callback Action<YVRSpatialAnchorSaveCompleteInfo, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorSaveListCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorSaveListCompleteCallback.html",
    "title": "Method SetSpatialAnchorSaveListCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorSaveListCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong>) public override void SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong> callback) Parameters callback Action<bool, ulong>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorShareCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorShareCompleteCallback.html",
    "title": "Method SetSpatialAnchorShareCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorShareCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorShareCompleteCallback(Action<bool, ulong>) public override void SetSpatialAnchorShareCompleteCallback(Action<bool, ulong> callback) Parameters callback Action<bool, ulong>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorStatusCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetSpatialAnchorStatusCompleteCallback.html",
    "title": "Method SetSpatialAnchorStatusCompleteCallback | Core",
    "keywords": "Method SetSpatialAnchorStatusCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) public override void SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool> callback) Parameters callback Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.SetTrackingSpace.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetTrackingSpace.html",
    "title": "Method SetTrackingSpace | Core",
    "keywords": "Method SetTrackingSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetTrackingSpace(TrackingSpace) public override void SetTrackingSpace(YVRTrackingStateManager.TrackingSpace trackingSpace) Parameters trackingSpace YVRTrackingStateManager.TrackingSpace"
  },
  "api/YVR.Core.YVRPluginAndroid.SetVSyncCount.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.SetVSyncCount.html",
    "title": "Method SetVSyncCount | Core",
    "keywords": "Method SetVSyncCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetVSyncCount(VSyncCount) public override void SetVSyncCount(YVRQualityManager.VSyncCount vSyncCount) Parameters vSyncCount YVRQualityManager.VSyncCount"
  },
  "api/YVR.Core.YVRPluginAndroid.ShareSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.ShareSpatialAnchor.html",
    "title": "Method ShareSpatialAnchor | Core",
    "keywords": "Method ShareSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll ShareSpatialAnchor(YVRSpatialAnchorShareInfo, ref ulong) public override void ShareSpatialAnchor(YVRSpatialAnchorShareInfo shareInfo, ref ulong requestId) Parameters shareInfo YVRSpatialAnchorShareInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.TestBoundaryNode.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.TestBoundaryNode.html",
    "title": "Method TestBoundaryNode | Core",
    "keywords": "Method TestBoundaryNode Namespace YVR.Core Assembly YVR.Core.Runtime.dll TestBoundaryNode(BoundaryNode, ref BoundaryTestResult) public override void TestBoundaryNode(YVRBoundary.BoundaryNode targetNode, ref YVRBoundary.BoundaryTestResult testResult) Parameters targetNode YVRBoundary.BoundaryNode testResult YVRBoundary.BoundaryTestResult"
  },
  "api/YVR.Core.YVRPluginAndroid.TestBoundaryPoint.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.TestBoundaryPoint.html",
    "title": "Method TestBoundaryPoint | Core",
    "keywords": "Method TestBoundaryPoint Namespace YVR.Core Assembly YVR.Core.Runtime.dll TestBoundaryPoint(Vector3, ref BoundaryTestResult) public override void TestBoundaryPoint(Vector3 targetPoint, ref YVRBoundary.BoundaryTestResult testResult) Parameters targetPoint Vector3 testResult YVRBoundary.BoundaryTestResult"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRCreateEyeTracker.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRCreateEyeTracker.html",
    "title": "Method YVRCreateEyeTracker | Core",
    "keywords": "Method YVRCreateEyeTracker Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRCreateEyeTracker() public static extern void YVRCreateEyeTracker()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRCreateMeshDetector.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRCreateMeshDetector.html",
    "title": "Method YVRCreateMeshDetector | Core",
    "keywords": "Method YVRCreateMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRCreateMeshDetector() public static extern void YVRCreateMeshDetector()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRCreatePlaneDetection.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRCreatePlaneDetection.html",
    "title": "Method YVRCreatePlaneDetection | Core",
    "keywords": "Method YVRCreatePlaneDetection Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRCreatePlaneDetection() public static extern void YVRCreatePlaneDetection()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRCreateSpaceUser.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRCreateSpaceUser.html",
    "title": "Method YVRCreateSpaceUser | Core",
    "keywords": "Method YVRCreateSpaceUser Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRCreateSpaceUser(ulong, ref ulong) public static extern void YVRCreateSpaceUser(ulong userId, ref ulong spaceUser) Parameters userId ulong spaceUser ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRCreateSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRCreateSpatialAnchor.html",
    "title": "Method YVRCreateSpatialAnchor | Core",
    "keywords": "Method YVRCreateSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRCreateSpatialAnchor(Vector3, Quaternion, ref ulong) public static extern void YVRCreateSpatialAnchor(Vector3 position, Quaternion rotation, ref ulong requestId) Parameters position Vector3 rotation Quaternion requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRDeletePlanePtr.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRDeletePlanePtr.html",
    "title": "Method YVRDeletePlanePtr | Core",
    "keywords": "Method YVRDeletePlanePtr Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRDeletePlanePtr() public static extern void YVRDeletePlanePtr()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRDestroyEyeTracker.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRDestroyEyeTracker.html",
    "title": "Method YVRDestroyEyeTracker | Core",
    "keywords": "Method YVRDestroyEyeTracker Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRDestroyEyeTracker() public static extern void YVRDestroyEyeTracker()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRDestroyMeshDetector.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRDestroyMeshDetector.html",
    "title": "Method YVRDestroyMeshDetector | Core",
    "keywords": "Method YVRDestroyMeshDetector Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRDestroyMeshDetector() public static extern void YVRDestroyMeshDetector()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRDestroySpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRDestroySpatialAnchor.html",
    "title": "Method YVRDestroySpatialAnchor | Core",
    "keywords": "Method YVRDestroySpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRDestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) public static extern void YVRDestroySpatialAnchor(ulong space, YVRSpatialAnchorStorageLocation location, ref ulong requestId) Parameters space ulong location YVRSpatialAnchorStorageLocation requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVREndPlaneDetection.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVREndPlaneDetection.html",
    "title": "Method YVREndPlaneDetection | Core",
    "keywords": "Method YVREndPlaneDetection Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVREndPlaneDetection() public static extern void YVREndPlaneDetection()"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetActualStereoRenderingMode.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetActualStereoRenderingMode.html",
    "title": "Method YVRGetActualStereoRenderingMode | Core",
    "keywords": "Method YVRGetActualStereoRenderingMode Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetActualStereoRenderingMode() public static extern StereoRenderingMode YVRGetActualStereoRenderingMode() Returns StereoRenderingMode"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetAppSWSwitch.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetAppSWSwitch.html",
    "title": "Method YVRGetAppSWSwitch | Core",
    "keywords": "Method YVRGetAppSWSwitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetAppSWSwitch() public static extern bool YVRGetAppSWSwitch() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetEnumerateSpaceSupported.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetEnumerateSpaceSupported.html",
    "title": "Method YVRGetEnumerateSpaceSupported | Core",
    "keywords": "Method YVRGetEnumerateSpaceSupported Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetEnumerateSpaceSupported(ulong, ref YVRSpatialAnchorSupportedComponent) public static extern void YVRGetEnumerateSpaceSupported(ulong space, ref YVRSpatialAnchorSupportedComponent component) Parameters space ulong component YVRSpatialAnchorSupportedComponent"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetEyeGazePose.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetEyeGazePose.html",
    "title": "Method YVRGetEyeGazePose | Core",
    "keywords": "Method YVRGetEyeGazePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetEyeGazePose(ref EyeGazePose) public static extern void YVRGetEyeGazePose(ref EyeTrackingData.EyeGazePose eyeGazePose) Parameters eyeGazePose EyeTrackingData.EyeGazePose"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetEyeGazes.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetEyeGazes.html",
    "title": "Method YVRGetEyeGazes | Core",
    "keywords": "Method YVRGetEyeGazes Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetEyeGazes(ref EyeGazesState) public static extern void YVRGetEyeGazes(ref EyeTrackingData.EyeGazesState eyeGazesState) Parameters eyeGazesState EyeTrackingData.EyeGazesState"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetEyeTrackingEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetEyeTrackingEnable.html",
    "title": "Method YVRGetEyeTrackingEnable | Core",
    "keywords": "Method YVRGetEyeTrackingEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetEyeTrackingEnable() public static extern bool YVRGetEyeTrackingEnable() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetEyeTrackingSupports.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetEyeTrackingSupports.html",
    "title": "Method YVRGetEyeTrackingSupports | Core",
    "keywords": "Method YVRGetEyeTrackingSupports Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetEyeTrackingSupports() public static extern bool YVRGetEyeTrackingSupports() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetPassthroughImageDiffRotation.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetPassthroughImageDiffRotation.html",
    "title": "Method YVRGetPassthroughImageDiffRotation | Core",
    "keywords": "Method YVRGetPassthroughImageDiffRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetPassthroughImageDiffRotation(int) public static extern Quaternion YVRGetPassthroughImageDiffRotation(int eyeIndex) Parameters eyeIndex int Returns Quaternion"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetPassthroughSwapchainImageIndex.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetPassthroughSwapchainImageIndex.html",
    "title": "Method YVRGetPassthroughSwapchainImageIndex | Core",
    "keywords": "Method YVRGetPassthroughSwapchainImageIndex Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetPassthroughSwapchainImageIndex() public static extern int YVRGetPassthroughSwapchainImageIndex() Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetPassthroughSwapchainImageValid.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetPassthroughSwapchainImageValid.html",
    "title": "Method YVRGetPassthroughSwapchainImageValid | Core",
    "keywords": "Method YVRGetPassthroughSwapchainImageValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetPassthroughSwapchainImageValid() public static extern bool YVRGetPassthroughSwapchainImageValid() Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetPolygonBuffer.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetPolygonBuffer.html",
    "title": "Method YVRGetPolygonBuffer | Core",
    "keywords": "Method YVRGetPolygonBuffer Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetPolygonBuffer(ulong, uint) public static extern IntPtr YVRGetPolygonBuffer(ulong planeId, uint count) Parameters planeId ulong count uint Returns IntPtr"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetRecommendedResolution.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetRecommendedResolution.html",
    "title": "Method YVRGetRecommendedResolution | Core",
    "keywords": "Method YVRGetRecommendedResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetRecommendedResolution(ref YVRExtent2DInt) public static extern bool YVRGetRecommendedResolution(ref YVRExtent2DInt outRecommendedResolution) Parameters outRecommendedResolution YVRExtent2DInt Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceBoundary2D.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceBoundary2D.html",
    "title": "Method YVRGetSpaceBoundary2D | Core",
    "keywords": "Method YVRGetSpaceBoundary2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceBoundary2D(ulong, ref YVRBoundary2D) public static extern int YVRGetSpaceBoundary2D(ulong anchorHandle, ref YVRBoundary2D boundary2D) Parameters anchorHandle ulong boundary2D YVRBoundary2D Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceBoundingBox2D.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceBoundingBox2D.html",
    "title": "Method YVRGetSpaceBoundingBox2D | Core",
    "keywords": "Method YVRGetSpaceBoundingBox2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceBoundingBox2D(ulong, ref YVRRect2D) public static extern int YVRGetSpaceBoundingBox2D(ulong anchorHandle, ref YVRRect2D boundingBox2D) Parameters anchorHandle ulong boundingBox2D YVRRect2D Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceBoundingBox3D.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceBoundingBox3D.html",
    "title": "Method YVRGetSpaceBoundingBox3D | Core",
    "keywords": "Method YVRGetSpaceBoundingBox3D Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceBoundingBox3D(ulong, ref YVRRect3D) public static extern int YVRGetSpaceBoundingBox3D(ulong anchorHandle, ref YVRRect3D boundingBox3D) Parameters anchorHandle ulong boundingBox3D YVRRect3D Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceComponentStatus.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceComponentStatus.html",
    "title": "Method YVRGetSpaceComponentStatus | Core",
    "keywords": "Method YVRGetSpaceComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) public static extern void YVRGetSpaceComponentStatus(ulong space, YVRSpatialAnchorComponentType component, ref YVRSpatialAnchorComponentStatus status) Parameters space ulong component YVRSpatialAnchorComponentType status YVRSpatialAnchorComponentStatus"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceContainer.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceContainer.html",
    "title": "Method YVRGetSpaceContainer | Core",
    "keywords": "Method YVRGetSpaceContainer Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceContainer(ulong, ref YVRSceneAnchorContainer) public static extern int YVRGetSpaceContainer(ulong anchorHandle, ref YVRSceneAnchorContainer sceneAnchorContainer) Parameters anchorHandle ulong sceneAnchorContainer YVRSceneAnchorContainer Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceHandleUuid.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceHandleUuid.html",
    "title": "Method YVRGetSpaceHandleUuid | Core",
    "keywords": "Method YVRGetSpaceHandleUuid Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceHandleUuid(ulong, ref YVRSpatialAnchorUUID) public static extern void YVRGetSpaceHandleUuid(ulong anchorHandle, ref YVRSpatialAnchorUUID uuid) Parameters anchorHandle ulong uuid YVRSpatialAnchorUUID"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceRoomLayout.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceRoomLayout.html",
    "title": "Method YVRGetSpaceRoomLayout | Core",
    "keywords": "Method YVRGetSpaceRoomLayout Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceRoomLayout(ulong, ref YVRRoomLayout) public static extern int YVRGetSpaceRoomLayout(ulong anchorHandle, ref YVRRoomLayout roomLayout) Parameters anchorHandle ulong roomLayout YVRRoomLayout Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceSemanticLabels.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceSemanticLabels.html",
    "title": "Method YVRGetSpaceSemanticLabels | Core",
    "keywords": "Method YVRGetSpaceSemanticLabels Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) public static extern int YVRGetSpaceSemanticLabels(ulong anchorHandle, ref YVRAnchorSemanticLabel anchorSemanticLabel) Parameters anchorHandle ulong anchorSemanticLabel YVRAnchorSemanticLabel Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceTriangleMesh.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceTriangleMesh.html",
    "title": "Method YVRGetSpaceTriangleMesh | Core",
    "keywords": "Method YVRGetSpaceTriangleMesh Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) public static extern int YVRGetSpaceTriangleMesh(ulong anchorHandle, ref YVRAnchorTriangleMeshInternal anchorTriangleMesh) Parameters anchorHandle ulong anchorTriangleMesh YVRAnchorTriangleMeshInternal Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceUserId.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpaceUserId.html",
    "title": "Method YVRGetSpaceUserId | Core",
    "keywords": "Method YVRGetSpaceUserId Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpaceUserId(ulong, ref ulong) public static extern void YVRGetSpaceUserId(ulong spaceUser, ref ulong userId) Parameters spaceUser ulong userId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRGetSpatialAnchorPose.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRGetSpatialAnchorPose.html",
    "title": "Method YVRGetSpatialAnchorPose | Core",
    "keywords": "Method YVRGetSpatialAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRGetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) public static extern bool YVRGetSpatialAnchorPose(ulong spatialId, ref Vector3 position, ref Quaternion rotation, ref YVRAnchorLocationFlags locationFlags) Parameters spatialId ulong position Vector3 rotation Quaternion locationFlags YVRAnchorLocationFlags Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRQuerySpaces.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRQuerySpaces.html",
    "title": "Method YVRQuerySpaces | Core",
    "keywords": "Method YVRQuerySpaces Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRQuerySpaces(YVRSpatialAnchorQueryInfo, ref ulong) public static extern void YVRQuerySpaces(YVRSpatialAnchorQueryInfo queryInfo, ref ulong requestId) Parameters queryInfo YVRSpatialAnchorQueryInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRRequestSceneCapture.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRRequestSceneCapture.html",
    "title": "Method YVRRequestSceneCapture | Core",
    "keywords": "Method YVRRequestSceneCapture Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRRequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) public static extern int YVRRequestSceneCapture(ref YVRSceneCaptureRequest requestString, ref ulong requestId) Parameters requestString YVRSceneCaptureRequest requestId ulong Returns int"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSaveSpaceList.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSaveSpaceList.html",
    "title": "Method YVRSaveSpaceList | Core",
    "keywords": "Method YVRSaveSpaceList Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSaveSpaceList(YVRSpatialAnchorListSaveInfo, ref ulong) public static extern void YVRSaveSpaceList(YVRSpatialAnchorListSaveInfo listSaveInfo, ref ulong requestId) Parameters listSaveInfo YVRSpatialAnchorListSaveInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSaveSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSaveSpatialAnchor.html",
    "title": "Method YVRSaveSpatialAnchor | Core",
    "keywords": "Method YVRSaveSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) public static extern void YVRSaveSpatialAnchor(YVRSpatialAnchorSaveInfo saveInfo, ref ulong requestId) Parameters saveInfo YVRSpatialAnchorSaveInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetAdapterResolutionPolicy.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetAdapterResolutionPolicy.html",
    "title": "Method YVRSetAdapterResolutionPolicy | Core",
    "keywords": "Method YVRSetAdapterResolutionPolicy Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetAdapterResolutionPolicy(AdapterResolutionPolicy) public static extern void YVRSetAdapterResolutionPolicy(YVRQualityManager.AdapterResolutionPolicy adapterResolutionPolicy) Parameters adapterResolutionPolicy YVRQualityManager.AdapterResolutionPolicy"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetAppSWSwitch.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetAppSWSwitch.html",
    "title": "Method YVRSetAppSWSwitch | Core",
    "keywords": "Method YVRSetAppSWSwitch Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetAppSWSwitch(bool) public static extern void YVRSetAppSWSwitch(bool isOn) Parameters isOn bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetAppSpacePosition.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetAppSpacePosition.html",
    "title": "Method YVRSetAppSpacePosition | Core",
    "keywords": "Method YVRSetAppSpacePosition Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetAppSpacePosition(float, float, float) public static extern void YVRSetAppSpacePosition(float x, float y, float z) Parameters x float y float z float"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetAppSpaceRotation.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetAppSpaceRotation.html",
    "title": "Method YVRSetAppSpaceRotation | Core",
    "keywords": "Method YVRSetAppSpaceRotation Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetAppSpaceRotation(float, float, float, float) public static extern void YVRSetAppSpaceRotation(float x, float y, float z, float w) Parameters x float y float z float w float"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetCreateSpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetCreateSpatialAnchorCallback.html",
    "title": "Method YVRSetCreateSpatialAnchorCallback | Core",
    "keywords": "Method YVRSetCreateSpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) public static extern void YVRSetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool> callback) Parameters callback Action<YVRSpatialAnchorResult, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetEraseSpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetEraseSpatialAnchorCallback.html",
    "title": "Method YVRSetEraseSpatialAnchorCallback | Core",
    "keywords": "Method YVRSetEraseSpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) public static extern void YVRSetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool> callback) Parameters callback Action<YVRSpatialAnchorResult, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetMeshBlockUpdateCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetMeshBlockUpdateCallback.html",
    "title": "Method YVRSetMeshBlockUpdateCallback | Core",
    "keywords": "Method YVRSetMeshBlockUpdateCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) public static extern void YVRSetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState> meshBlockChangeState) Parameters meshBlockChangeState Action<ulong, YVRMeshBlockChangeState>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetPassthroughProviderEnable.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetPassthroughProviderEnable.html",
    "title": "Method YVRSetPassthroughProviderEnable | Core",
    "keywords": "Method YVRSetPassthroughProviderEnable Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetPassthroughProviderEnable(bool) public static extern void YVRSetPassthroughProviderEnable(bool enable) Parameters enable bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetPassthroughVisible.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetPassthroughVisible.html",
    "title": "Method YVRSetPassthroughVisible | Core",
    "keywords": "Method YVRSetPassthroughVisible Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetPassthroughVisible(bool) public static extern void YVRSetPassthroughVisible(bool visible) Parameters visible bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetPlaneDetectionsCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetPlaneDetectionsCallback.html",
    "title": "Method YVRSetPlaneDetectionsCallback | Core",
    "keywords": "Method YVRSetPlaneDetectionsCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) public static extern void YVRSetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal> action) Parameters action Action<YVRPlaneDetectorLocationsInternal>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetQuerySpatialAnchorCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetQuerySpatialAnchorCallback.html",
    "title": "Method YVRSetQuerySpatialAnchorCallback | Core",
    "keywords": "Method YVRSetQuerySpatialAnchorCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) public static extern void YVRSetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong> callback) Parameters callback Action<YVRQuerySpatialAnchorResult, ulong>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetRequestSceneCaptureCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetRequestSceneCaptureCallback.html",
    "title": "Method YVRSetRequestSceneCaptureCallback | Core",
    "keywords": "Method YVRSetRequestSceneCaptureCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetRequestSceneCaptureCallback(Action<ulong, bool>) public static extern void YVRSetRequestSceneCaptureCallback(Action<ulong, bool> callback) Parameters callback Action<ulong, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceComponentStatus.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceComponentStatus.html",
    "title": "Method YVRSetSpaceComponentStatus | Core",
    "keywords": "Method YVRSetSpaceComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetSpaceComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) public static extern bool YVRSetSpaceComponentStatus(ulong space, YVRSpatialAnchorComponentStatusSetInfo statusSetInfo, ref ulong requestId) Parameters space ulong statusSetInfo YVRSpatialAnchorComponentStatusSetInfo requestId ulong Returns bool"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceListSaveCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceListSaveCompleteCallback.html",
    "title": "Method YVRSetSpaceListSaveCompleteCallback | Core",
    "keywords": "Method YVRSetSpaceListSaveCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetSpaceListSaveCompleteCallback(Action<bool, ulong>) public static extern void YVRSetSpaceListSaveCompleteCallback(Action<bool, ulong> callback) Parameters callback Action<bool, ulong>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceSaveCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceSaveCompleteCallback.html",
    "title": "Method YVRSetSpaceSaveCompleteCallback | Core",
    "keywords": "Method YVRSetSpaceSaveCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetSpaceSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) public static extern void YVRSetSpaceSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool> callback) Parameters callback Action<YVRSpatialAnchorSaveCompleteInfo, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceSetStatusCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceSetStatusCompleteCallback.html",
    "title": "Method YVRSetSpaceSetStatusCompleteCallback | Core",
    "keywords": "Method YVRSetSpaceSetStatusCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetSpaceSetStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) public static extern void YVRSetSpaceSetStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool> callback) Parameters callback Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceShareCompleteCallback.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRSetSpaceShareCompleteCallback.html",
    "title": "Method YVRSetSpaceShareCompleteCallback | Core",
    "keywords": "Method YVRSetSpaceShareCompleteCallback Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRSetSpaceShareCompleteCallback(Action<bool, ulong>) public static extern void YVRSetSpaceShareCompleteCallback(Action<bool, ulong> callback) Parameters callback Action<bool, ulong>"
  },
  "api/YVR.Core.YVRPluginAndroid.YVRShareSpace.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.YVRShareSpace.html",
    "title": "Method YVRShareSpace | Core",
    "keywords": "Method YVRShareSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRShareSpace(YVRSpatialAnchorShareInfo, ref ulong) public static extern void YVRShareSpace(YVRSpatialAnchorShareInfo shareInfo, ref ulong requestId) Parameters shareInfo YVRSpatialAnchorShareInfo requestId ulong"
  },
  "api/YVR.Core.YVRPluginAndroid.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.html",
    "title": "Class YVRPluginAndroid | Core",
    "keywords": "Class YVRPluginAndroid Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRPluginAndroid : YVRPlugin Inheritance object YVRPlugin YVRPluginAndroid Inherited Members YVRPlugin.Instance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create() CreateEyeTracker() CreateMeshDetector() CreatePlaneDetection() CreateSpatialAnchor(Vector3, Quaternion, ref ulong) CreateSpatialAnchorUserHandle(ulong, ref ulong) DestroyEyeTracker() DestroyMeshDetector() DestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) EndPlaneDetection() GetAppSWEnable() GetAppSWSwitch() GetBatteryLevel() GetBatteryStatus() GetBatteryTemperature() GetBlockInteractionData() GetBoundaryConfigured() GetBoundaryDimensions() GetBoundaryGeometry() GetBoundaryVisible() GetCPULevel() GetCPUUtilLevel() GetCurrentInputDevice(ref ActiveInputDevice) GetDisplayFrequenciesAvailable() GetDisplayFrequency() GetEyeFov(int, ref EyeFov) GetEyeGazePose(ref EyeGazePose) GetEyeGazes(ref EyeGazesState) GetEyeResolution(ref Vector2) GetEyeTrackingEnable() GetEyeTrackingSupportes() GetGPULevel() GetGPUUtilLevel() GetHandAutoActivateTime() GetHandEnable() GetHandJointLocations(HandType, ref HandJointLocations) GetPassthroughImageDiffRotation(int) GetPassthroughSwapchainImageIndex() GetPassthroughSwapchainImageValid() GetPolygonBuffer(ulong, uint) GetPrimaryController(ref uint) GetRecommendedResolution(ref YVRExtent2DInt) GetSpaceBoundary2D(ulong, ref YVRBoundary2D) GetSpaceBoundingBox2D(ulong, ref YVRRect2D) GetSpaceBoundingBox3D(ulong, ref YVRRect3D) GetSpaceContainer(ulong, ref YVRSceneAnchorContainer) GetSpaceRoomLayout(ulong, ref YVRRoomLayout) GetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) GetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) GetSpatialAnchorEnumerateSupported(ulong, ref YVRSpatialAnchorSupportedComponent) GetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) GetSpatialAnchorUUID(ulong, ref YVRSpatialAnchorUUID) GetSpatialAnchorUserId(ulong, ref ulong) GetStereoRenderingMode() GetVolumeLevel() IsFocusing() IsUserPresent() IsVisible() QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, ref ulong) RecenterTracking() RequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo, ref ulong) SetAPPControllerEnable(bool) SetAPPHandEnable(bool) SetAdapterResolutionPolicy(AdapterResolutionPolicy) SetAppSWEnable(bool) SetAppSWSwitch(bool) SetAppSpacePosition(float, float, float) SetAppSpaceRotation(float, float, float, float) SetBlockInteractionData(bool) SetBoundaryDetectionEnable(bool) SetBoundaryVisible(bool) SetControllerVibration(uint, float, float) SetControllerVibration(uint, float, float, float) SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) SetDisplayFrequency(float) SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) SetEventCallback(Action<int>) SetEyeBufferLayerSettings(bool, bool, bool, bool) SetFoveation(int, int) SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) SetPassthrough(bool) SetPassthroughProviderEnable(bool) SetPerformanceLevel(int, int) SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) SetPrimaryController(uint) SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) SetSceneCaptureCallback(Action<ulong, bool>) SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong>) SetSpatialAnchorShareCompleteCallback(Action<bool, ulong>) SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) SetTrackingSpace(TrackingSpace) SetVSyncCount(VSyncCount) ShareSpatialAnchor(YVRSpatialAnchorShareInfo, ref ulong) TestBoundaryNode(BoundaryNode, ref BoundaryTestResult) TestBoundaryPoint(Vector3, ref BoundaryTestResult) YVRCreateEyeTracker() YVRCreateMeshDetector() YVRCreatePlaneDetection() YVRCreateSpaceUser(ulong, ref ulong) YVRCreateSpatialAnchor(Vector3, Quaternion, ref ulong) YVRDeletePlanePtr() YVRDestroyEyeTracker() YVRDestroyMeshDetector() YVRDestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) YVREndPlaneDetection() YVRGetActualStereoRenderingMode() YVRGetAppSWSwitch() YVRGetEnumerateSpaceSupported(ulong, ref YVRSpatialAnchorSupportedComponent) YVRGetEyeGazePose(ref EyeGazePose) YVRGetEyeGazes(ref EyeGazesState) YVRGetEyeTrackingEnable() YVRGetEyeTrackingSupports() YVRGetPassthroughImageDiffRotation(int) YVRGetPassthroughSwapchainImageIndex() YVRGetPassthroughSwapchainImageValid() YVRGetPolygonBuffer(ulong, uint) YVRGetRecommendedResolution(ref YVRExtent2DInt) YVRGetSpaceBoundary2D(ulong, ref YVRBoundary2D) YVRGetSpaceBoundingBox2D(ulong, ref YVRRect2D) YVRGetSpaceBoundingBox3D(ulong, ref YVRRect3D) YVRGetSpaceComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) YVRGetSpaceContainer(ulong, ref YVRSceneAnchorContainer) YVRGetSpaceHandleUuid(ulong, ref YVRSpatialAnchorUUID) YVRGetSpaceRoomLayout(ulong, ref YVRRoomLayout) YVRGetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) YVRGetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) YVRGetSpaceUserId(ulong, ref ulong) YVRGetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) YVRQuerySpaces(YVRSpatialAnchorQueryInfo, ref ulong) YVRRequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) YVRSaveSpaceList(YVRSpatialAnchorListSaveInfo, ref ulong) YVRSaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) YVRSetAdapterResolutionPolicy(AdapterResolutionPolicy) YVRSetAppSWSwitch(bool) YVRSetAppSpacePosition(float, float, float) YVRSetAppSpaceRotation(float, float, float, float) YVRSetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) YVRSetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) YVRSetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) YVRSetPassthroughProviderEnable(bool) YVRSetPassthroughVisible(bool) YVRSetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) YVRSetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) YVRSetRequestSceneCaptureCallback(Action<ulong, bool>) YVRSetSpaceComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) YVRSetSpaceListSaveCompleteCallback(Action<bool, ulong>) YVRSetSpaceSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) YVRSetSpaceSetStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) YVRSetSpaceShareCompleteCallback(Action<bool, ulong>) YVRShareSpace(YVRSpatialAnchorShareInfo, ref ulong) yvrSetEyeBufferSettings(bool, bool, bool, bool)"
  },
  "api/YVR.Core.YVRPluginAndroid.yvrSetEyeBufferSettings.html": {
    "href": "api/YVR.Core.YVRPluginAndroid.yvrSetEyeBufferSettings.html",
    "title": "Method yvrSetEyeBufferSettings | Core",
    "keywords": "Method yvrSetEyeBufferSettings Namespace YVR.Core Assembly YVR.Core.Runtime.dll yvrSetEyeBufferSettings(bool, bool, bool, bool) public static extern void yvrSetEyeBufferSettings(bool enableSuperSample, bool expensiveSuperSample, bool enableSharpen, bool expensiveSharpen) Parameters enableSuperSample bool expensiveSuperSample bool enableSharpen bool expensiveSharpen bool"
  },
  "api/YVR.Core.YVRPluginWin.Create.html": {
    "href": "api/YVR.Core.YVRPluginWin.Create.html",
    "title": "Method Create | Core",
    "keywords": "Method Create Namespace YVR.Core Assembly YVR.Core.Runtime.dll Create() public static YVRPluginWin Create() Returns YVRPluginWin"
  },
  "api/YVR.Core.YVRPluginWin.GetCurrentInputDevice.html": {
    "href": "api/YVR.Core.YVRPluginWin.GetCurrentInputDevice.html",
    "title": "Method GetCurrentInputDevice | Core",
    "keywords": "Method GetCurrentInputDevice Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetCurrentInputDevice(ref ActiveInputDevice) public override void GetCurrentInputDevice(ref ActiveInputDevice inputDevice) Parameters inputDevice ActiveInputDevice"
  },
  "api/YVR.Core.YVRPluginWin.GetEyeFov.html": {
    "href": "api/YVR.Core.YVRPluginWin.GetEyeFov.html",
    "title": "Method GetEyeFov | Core",
    "keywords": "Method GetEyeFov Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeFov(int, ref EyeFov) public override void GetEyeFov(int eyeSide, ref YVRCameraRenderer.EyeFov eyeFov) Parameters eyeSide int eyeFov YVRCameraRenderer.EyeFov"
  },
  "api/YVR.Core.YVRPluginWin.GetEyeResolution.html": {
    "href": "api/YVR.Core.YVRPluginWin.GetEyeResolution.html",
    "title": "Method GetEyeResolution | Core",
    "keywords": "Method GetEyeResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetEyeResolution(ref Vector2) public override void GetEyeResolution(ref Vector2 resolution) Parameters resolution Vector2"
  },
  "api/YVR.Core.YVRPluginWin.GetHandJointLocations.html": {
    "href": "api/YVR.Core.YVRPluginWin.GetHandJointLocations.html",
    "title": "Method GetHandJointLocations | Core",
    "keywords": "Method GetHandJointLocations Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetHandJointLocations(HandType, ref HandJointLocations) public override void GetHandJointLocations(HandType handType, ref HandJointLocations jointLocations) Parameters handType HandType jointLocations HandJointLocations"
  },
  "api/YVR.Core.YVRPluginWin.SetVSyncCount.html": {
    "href": "api/YVR.Core.YVRPluginWin.SetVSyncCount.html",
    "title": "Method SetVSyncCount | Core",
    "keywords": "Method SetVSyncCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetVSyncCount(VSyncCount) public override void SetVSyncCount(YVRQualityManager.VSyncCount vSyncCount) Parameters vSyncCount YVRQualityManager.VSyncCount"
  },
  "api/YVR.Core.YVRPluginWin.html": {
    "href": "api/YVR.Core.YVRPluginWin.html",
    "title": "Class YVRPluginWin | Core",
    "keywords": "Class YVRPluginWin Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRPluginWin : YVRPlugin Inheritance object YVRPlugin YVRPluginWin Inherited Members YVRPlugin.Instance YVRPlugin.SetTrackingSpace(YVRTrackingStateManager.TrackingSpace) YVRPlugin.RecenterTracking() YVRPlugin.SetControllerVibration(uint, float, float) YVRPlugin.SetControllerVibration(uint, float, float, float) YVRPlugin.GetBatteryLevel() YVRPlugin.GetBatteryTemperature() YVRPlugin.GetBatteryStatus() YVRPlugin.GetVolumeLevel() YVRPlugin.GetGPUUtilLevel() YVRPlugin.GetCPUUtilLevel() YVRPlugin.GetCPULevel() YVRPlugin.GetGPULevel() YVRPlugin.SetPerformanceLevel(int, int) YVRPlugin.IsUserPresent() YVRPlugin.SetPassthrough(bool) YVRPlugin.SetPassthroughProviderEnable(bool) YVRPlugin.IsFocusing() YVRPlugin.IsVisible() YVRPlugin.SetEventCallback(Action<int>) YVRPlugin.GetDisplayFrequency() YVRPlugin.GetStereoRenderingMode() YVRPlugin.SetDisplayFrequency(float) YVRPlugin.GetDisplayFrequenciesAvailable() YVRPlugin.GetBoundaryConfigured() YVRPlugin.TestBoundaryNode(YVRBoundary.BoundaryNode, ref YVRBoundary.BoundaryTestResult) YVRPlugin.TestBoundaryPoint(Vector3, ref YVRBoundary.BoundaryTestResult) YVRPlugin.GetBoundaryDimensions() YVRPlugin.GetBoundaryVisible() YVRPlugin.SetBoundaryVisible(bool) YVRPlugin.SetBoundaryDetectionEnable(bool) YVRPlugin.GetBoundaryGeometry() YVRPlugin.SetFoveation(int, int) YVRPlugin.SetAppSWEnable(bool) YVRPlugin.GetAppSWEnable() YVRPlugin.SetAppSWSwitch(bool) YVRPlugin.GetAppSWSwitch() YVRPlugin.SetEyeBufferLayerSettings(bool, bool, bool, bool) YVRPlugin.GetPrimaryController(ref uint) YVRPlugin.SetPrimaryController(uint) YVRPlugin.GetHandEnable() YVRPlugin.GetHandAutoActivateTime() YVRPlugin.SetAPPHandEnable(bool) YVRPlugin.SetAPPControllerEnable(bool) YVRPlugin.SetAppSpacePosition(float, float, float) YVRPlugin.SetAppSpaceRotation(float, float, float, float) YVRPlugin.CreateSpatialAnchor(Vector3, Quaternion, ref ulong) YVRPlugin.SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, ref ulong) YVRPlugin.QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, ref ulong) YVRPlugin.DestroySpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, ref ulong) YVRPlugin.GetSpatialAnchorPose(ulong, ref Vector3, ref Quaternion, ref YVRAnchorLocationFlags) YVRPlugin.SetCreateSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) YVRPlugin.SetQuerySpatialAnchorCallback(Action<YVRQuerySpatialAnchorResult, ulong>) YVRPlugin.SetEraseSpatialAnchorCallback(Action<YVRSpatialAnchorResult, bool>) YVRPlugin.GetSpatialAnchorEnumerateSupported(ulong, ref YVRSpatialAnchorSupportedComponent) YVRPlugin.SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, ref ulong) YVRPlugin.GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, ref YVRSpatialAnchorComponentStatus) YVRPlugin.CreateSpatialAnchorUserHandle(ulong, ref ulong) YVRPlugin.ShareSpatialAnchor(YVRSpatialAnchorShareInfo, ref ulong) YVRPlugin.GetSpatialAnchorUserId(ulong, ref ulong) YVRPlugin.SetSpatialAnchorShareCompleteCallback(Action<bool, ulong>) YVRPlugin.SetSpatialAnchorSaveCompleteCallback(Action<YVRSpatialAnchorSaveCompleteInfo, bool>) YVRPlugin.SetSpatialAnchorSaveListCompleteCallback(Action<bool, ulong>) YVRPlugin.SetSpatialAnchorStatusCompleteCallback(Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) YVRPlugin.SaveSpatialAnchorList(YVRSpatialAnchorListSaveInfo, ref ulong) YVRPlugin.GetSpatialAnchorUUID(ulong, ref YVRSpatialAnchorUUID) YVRPlugin.CreatePlaneDetection() YVRPlugin.SetPlaneDetectionsCallback(Action<YVRPlaneDetectorLocationsInternal>) YVRPlugin.GetPolygonBuffer(ulong, uint) YVRPlugin.EndPlaneDetection() YVRPlugin.GetEyeTrackingSupportes() YVRPlugin.CreateEyeTracker() YVRPlugin.DestroyEyeTracker() YVRPlugin.GetEyeTrackingEnable() YVRPlugin.GetEyeGazes(ref EyeTrackingData.EyeGazesState) YVRPlugin.GetEyeGazePose(ref EyeTrackingData.EyeGazePose) YVRPlugin.GetSpaceBoundingBox2D(ulong, ref YVRRect2D) YVRPlugin.GetSpaceBoundingBox3D(ulong, ref YVRRect3D) YVRPlugin.GetSpaceBoundary2D(ulong, ref YVRBoundary2D) YVRPlugin.GetSpaceSemanticLabels(ulong, ref YVRAnchorSemanticLabel) YVRPlugin.GetSpaceRoomLayout(ulong, ref YVRRoomLayout) YVRPlugin.GetSpaceContainer(ulong, ref YVRSceneAnchorContainer) YVRPlugin.RequestSceneCapture(ref YVRSceneCaptureRequest, ref ulong) YVRPlugin.SetSceneCaptureCallback(Action<ulong, bool>) YVRPlugin.GetSpaceTriangleMesh(ulong, ref YVRAnchorTriangleMeshInternal) YVRPlugin.GetRecommendedResolution(ref YVRExtent2DInt) YVRPlugin.SetAdapterResolutionPolicy(YVRQualityManager.AdapterResolutionPolicy) YVRPlugin.CreateMeshDetector() YVRPlugin.DestroyMeshDetector() YVRPlugin.SetMeshBlockUpdateCallback(Action<ulong, YVRMeshBlockChangeState>) YVRPlugin.GetPassthroughSwapchainImageIndex() YVRPlugin.GetPassthroughSwapchainImageValid() YVRPlugin.GetPassthroughImageDiffRotation(int) YVRPlugin.SetBlockInteractionData(bool) YVRPlugin.GetBlockInteractionData() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create() GetCurrentInputDevice(ref ActiveInputDevice) GetEyeFov(int, ref EyeFov) GetEyeResolution(ref Vector2) GetHandJointLocations(HandType, ref HandJointLocations) SetVSyncCount(VSyncCount)"
  },
  "api/YVR.Core.YVRPointerEventData.-ctor.html": {
    "href": "api/YVR.Core.YVRPointerEventData.-ctor.html",
    "title": "Constructor YVRPointerEventData | Core",
    "keywords": "Constructor YVRPointerEventData Namespace YVR.Core Assembly YVR.Core.Runtime.dll YVRPointerEventData(EventSystem) Default Constructor public YVRPointerEventData(EventSystem eventSystem) Parameters eventSystem EventSystem eventSystem in PointerEventData"
  },
  "api/YVR.Core.YVRPointerEventData.html": {
    "href": "api/YVR.Core.YVRPointerEventData.html",
    "title": "Class YVRPointerEventData | Core",
    "keywords": "Class YVRPointerEventData Namespace YVR.Core Assembly YVR.Core.Runtime.dll Almost the same with UnityEngin.EventSystems.PointerEventData, expects that a new Ray fields indicates the ray used for interacting public class YVRPointerEventData : PointerEventData Inheritance object AbstractEventData BaseEventData PointerEventData YVRPointerEventData Inherited Members PointerEventData.hovered PointerEventData.IsPointerMoving() PointerEventData.IsScrolling() PointerEventData.ToString() PointerEventData.pointerEnter PointerEventData.lastPress PointerEventData.rawPointerPress PointerEventData.pointerDrag PointerEventData.pointerClick PointerEventData.pointerCurrentRaycast PointerEventData.pointerPressRaycast PointerEventData.eligibleForClick PointerEventData.displayIndex PointerEventData.pointerId PointerEventData.position PointerEventData.delta PointerEventData.pressPosition PointerEventData.worldPosition PointerEventData.worldNormal PointerEventData.clickTime PointerEventData.clickCount PointerEventData.scrollDelta PointerEventData.useDragThreshold PointerEventData.dragging PointerEventData.button PointerEventData.pressure PointerEventData.tangentialPressure PointerEventData.altitudeAngle PointerEventData.azimuthAngle PointerEventData.twist PointerEventData.tilt PointerEventData.penStatus PointerEventData.radius PointerEventData.radiusVariance PointerEventData.fullyExited PointerEventData.reentered PointerEventData.enterEventCamera PointerEventData.pressEventCamera PointerEventData.pointerPress BaseEventData.currentInputModule BaseEventData.selectedObject AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors YVRPointerEventData(EventSystem) Default Constructor Fields worldSpaceRay Indicating the ray used for interaction"
  },
  "api/YVR.Core.YVRPointerEventData.worldSpaceRay.html": {
    "href": "api/YVR.Core.YVRPointerEventData.worldSpaceRay.html",
    "title": "Field worldSpaceRay | Core",
    "keywords": "Field worldSpaceRay Namespace YVR.Core Assembly YVR.Core.Runtime.dll Indicating the ray used for interaction public Ray worldSpaceRay Returns Ray Indicating the ray used for interaction"
  },
  "api/YVR.Core.YVRQualityManager.AdapterResolutionPolicy.html": {
    "href": "api/YVR.Core.YVRQualityManager.AdapterResolutionPolicy.html",
    "title": "Enum YVRQualityManager.AdapterResolutionPolicy | Core",
    "keywords": "Enum YVRQualityManager.AdapterResolutionPolicy Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRQualityManager.AdapterResolutionPolicy Fields BALANCED = 1 BATTERY_SAVING = 2 HIGH_QUALITY = 0"
  },
  "api/YVR.Core.YVRQualityManager.FixedFoveatedRenderingDynamic(Enum).html": {
    "href": "api/YVR.Core.YVRQualityManager.FixedFoveatedRenderingDynamic(Enum).html",
    "title": "Enum YVRQualityManager.FixedFoveatedRenderingDynamic | Core",
    "keywords": "Enum YVRQualityManager.FixedFoveatedRenderingDynamic Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRQualityManager.FixedFoveatedRenderingDynamic Fields Disabled = 0 Disable dynamic level Enabled = 1 Enable dynamic level"
  },
  "api/YVR.Core.YVRQualityManager.FixedFoveatedRenderingLevel(Enum).html": {
    "href": "api/YVR.Core.YVRQualityManager.FixedFoveatedRenderingLevel(Enum).html",
    "title": "Enum YVRQualityManager.FixedFoveatedRenderingLevel | Core",
    "keywords": "Enum YVRQualityManager.FixedFoveatedRenderingLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll The level of fixed foveated rendering public enum YVRQualityManager.FixedFoveatedRenderingLevel Fields High = 3 The High level of fixed foveated rendering Low = 1 The lowest level of fixed foveated rendering Medium = 2 The Medium level of fixed foveated rendering Off = 0 Disable fixed foveated rendering."
  },
  "api/YVR.Core.YVRQualityManager.Initialize.html": {
    "href": "api/YVR.Core.YVRQualityManager.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize() Using the data from unity Inspector panel to initialize vSync count and ffr level public void Initialize()"
  },
  "api/YVR.Core.YVRQualityManager.LayerSettingsType.html": {
    "href": "api/YVR.Core.YVRQualityManager.LayerSettingsType.html",
    "title": "Enum YVRQualityManager.LayerSettingsType | Core",
    "keywords": "Enum YVRQualityManager.LayerSettingsType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRQualityManager.LayerSettingsType Fields None = 0 no super sampling or sharpen Normal = 1 normal super sampling or sharpen Quality = 2 expensive cost super sampling or sharpen"
  },
  "api/YVR.Core.YVRQualityManager.Update.html": {
    "href": "api/YVR.Core.YVRQualityManager.Update.html",
    "title": "Method Update | Core",
    "keywords": "Method Update Namespace YVR.Core Assembly YVR.Core.Runtime.dll Update() public void Update()"
  },
  "api/YVR.Core.YVRQualityManager.VSyncCount(Enum).html": {
    "href": "api/YVR.Core.YVRQualityManager.VSyncCount(Enum).html",
    "title": "Enum YVRQualityManager.VSyncCount | Core",
    "keywords": "Enum YVRQualityManager.VSyncCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll VSync count every frame. public enum YVRQualityManager.VSyncCount Fields k1 = 1 VSync every frame k2 = 2 VSync every two frame,FPS reduced to half."
  },
  "api/YVR.Core.YVRQualityManager.enableDynamicResolution.html": {
    "href": "api/YVR.Core.YVRQualityManager.enableDynamicResolution.html",
    "title": "Property enableDynamicResolution | Core",
    "keywords": "Property enableDynamicResolution Namespace YVR.Core Assembly YVR.Core.Runtime.dll enableDynamicResolution public bool enableDynamicResolution { get; set; } Property Value bool"
  },
  "api/YVR.Core.YVRQualityManager.fixedFoveatedRenderingDynamic(Property).html": {
    "href": "api/YVR.Core.YVRQualityManager.fixedFoveatedRenderingDynamic(Property).html",
    "title": "Property fixedFoveatedRenderingDynamic | Core",
    "keywords": "Property fixedFoveatedRenderingDynamic Namespace YVR.Core Assembly YVR.Core.Runtime.dll fixedFoveatedRenderingDynamic Set or get current fixed foveated rendering dynamic public bool fixedFoveatedRenderingDynamic { get; set; } Property Value bool"
  },
  "api/YVR.Core.YVRQualityManager.fixedFoveatedRenderingLevel(Property).html": {
    "href": "api/YVR.Core.YVRQualityManager.fixedFoveatedRenderingLevel(Property).html",
    "title": "Property fixedFoveatedRenderingLevel | Core",
    "keywords": "Property fixedFoveatedRenderingLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll fixedFoveatedRenderingLevel Set or get current fixed foveated rendering level public YVRQualityManager.FixedFoveatedRenderingLevel fixedFoveatedRenderingLevel { get; set; } Property Value YVRQualityManager.FixedFoveatedRenderingLevel"
  },
  "api/YVR.Core.YVRQualityManager.html": {
    "href": "api/YVR.Core.YVRQualityManager.html",
    "title": "Class YVRQualityManager | Core",
    "keywords": "Class YVRQualityManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll Manager for rendering quality [Serializable] public class YVRQualityManager Inheritance object YVRQualityManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields useRecommendedMSAALevel Whether to use recommend MSAA level, if true, the value of @YVR.Core.YVRQualityManager.antiAliasing will be ignored Properties enableDynamicResolution fixedFoveatedRenderingDynamic Set or get current fixed foveated rendering dynamic fixedFoveatedRenderingLevel Set or get current fixed foveated rendering level maxDynamicResolutionScale minDynamicResolutionScale powerSetting recommendAntiAlisingLevel Gets the recommended MSAA level for optimal quality/performance the current device. sharpenType Set or get current eyebuffer sharpenType vSyncCount Set or get current vSync count Methods Initialize() Using the data from unity Inspector panel to initialize vSync count and ffr level Update() Events onFFRChanged The event which will be triggered when ffr level changed onSharpenTypeChanged The event which will be triggered when sharpen type changed onVSyncCountChanged The event which will be triggered when vSync count changed"
  },
  "api/YVR.Core.YVRQualityManager.maxDynamicResolutionScale.html": {
    "href": "api/YVR.Core.YVRQualityManager.maxDynamicResolutionScale.html",
    "title": "Property maxDynamicResolutionScale | Core",
    "keywords": "Property maxDynamicResolutionScale Namespace YVR.Core Assembly YVR.Core.Runtime.dll maxDynamicResolutionScale public float maxDynamicResolutionScale { get; set; } Property Value float"
  },
  "api/YVR.Core.YVRQualityManager.minDynamicResolutionScale.html": {
    "href": "api/YVR.Core.YVRQualityManager.minDynamicResolutionScale.html",
    "title": "Property minDynamicResolutionScale | Core",
    "keywords": "Property minDynamicResolutionScale Namespace YVR.Core Assembly YVR.Core.Runtime.dll minDynamicResolutionScale public float minDynamicResolutionScale { get; set; } Property Value float"
  },
  "api/YVR.Core.YVRQualityManager.onFFRChanged.html": {
    "href": "api/YVR.Core.YVRQualityManager.onFFRChanged.html",
    "title": "Event onFFRChanged | Core",
    "keywords": "Event onFFRChanged Namespace YVR.Core Assembly YVR.Core.Runtime.dll The event which will be triggered when ffr level changed public event Action<YVRQualityManager.FixedFoveatedRenderingLevel, YVRQualityManager.FixedFoveatedRenderingDynamic> onFFRChanged Returns Action<YVRQualityManager.FixedFoveatedRenderingLevel, YVRQualityManager.FixedFoveatedRenderingDynamic> The event which will be triggered when ffr level changed"
  },
  "api/YVR.Core.YVRQualityManager.onSharpenTypeChanged.html": {
    "href": "api/YVR.Core.YVRQualityManager.onSharpenTypeChanged.html",
    "title": "Event onSharpenTypeChanged | Core",
    "keywords": "Event onSharpenTypeChanged Namespace YVR.Core Assembly YVR.Core.Runtime.dll The event which will be triggered when sharpen type changed public event Action<YVRQualityManager.LayerSettingsType> onSharpenTypeChanged Returns Action<YVRQualityManager.LayerSettingsType> The event which will be triggered when sharpen type changed"
  },
  "api/YVR.Core.YVRQualityManager.onVSyncCountChanged.html": {
    "href": "api/YVR.Core.YVRQualityManager.onVSyncCountChanged.html",
    "title": "Event onVSyncCountChanged | Core",
    "keywords": "Event onVSyncCountChanged Namespace YVR.Core Assembly YVR.Core.Runtime.dll The event which will be triggered when vSync count changed public event Action<YVRQualityManager.VSyncCount> onVSyncCountChanged Returns Action<YVRQualityManager.VSyncCount> The event which will be triggered when vSync count changed"
  },
  "api/YVR.Core.YVRQualityManager.powerSetting.html": {
    "href": "api/YVR.Core.YVRQualityManager.powerSetting.html",
    "title": "Property powerSetting | Core",
    "keywords": "Property powerSetting Namespace YVR.Core Assembly YVR.Core.Runtime.dll powerSetting public YVRQualityManager.AdapterResolutionPolicy powerSetting { get; set; } Property Value YVRQualityManager.AdapterResolutionPolicy"
  },
  "api/YVR.Core.YVRQualityManager.recommendAntiAlisingLevel.html": {
    "href": "api/YVR.Core.YVRQualityManager.recommendAntiAlisingLevel.html",
    "title": "Property recommendAntiAlisingLevel | Core",
    "keywords": "Property recommendAntiAlisingLevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll recommendAntiAlisingLevel Gets the recommended MSAA level for optimal quality/performance the current device. public int recommendAntiAlisingLevel { get; } Property Value int"
  },
  "api/YVR.Core.YVRQualityManager.sharpenType.html": {
    "href": "api/YVR.Core.YVRQualityManager.sharpenType.html",
    "title": "Property sharpenType | Core",
    "keywords": "Property sharpenType Namespace YVR.Core Assembly YVR.Core.Runtime.dll sharpenType Set or get current eyebuffer sharpenType public YVRQualityManager.LayerSettingsType sharpenType { get; set; } Property Value YVRQualityManager.LayerSettingsType"
  },
  "api/YVR.Core.YVRQualityManager.useRecommendedMSAALevel.html": {
    "href": "api/YVR.Core.YVRQualityManager.useRecommendedMSAALevel.html",
    "title": "Field useRecommendedMSAALevel | Core",
    "keywords": "Field useRecommendedMSAALevel Namespace YVR.Core Assembly YVR.Core.Runtime.dll Whether to use recommend MSAA level, if true, the value of @YVR.Core.YVRQualityManager.antiAliasing will be ignored public bool useRecommendedMSAALevel Returns bool Whether to use recommend MSAA level, if true, the value of will be ignored"
  },
  "api/YVR.Core.YVRQualityManager.vSyncCount(Property).html": {
    "href": "api/YVR.Core.YVRQualityManager.vSyncCount(Property).html",
    "title": "Property vSyncCount | Core",
    "keywords": "Property vSyncCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll vSyncCount Set or get current vSync count public YVRQualityManager.VSyncCount vSyncCount { get; set; } Property Value YVRQualityManager.VSyncCount"
  },
  "api/YVR.Core.YVRQuerySpatialAnchorResult.html": {
    "href": "api/YVR.Core.YVRQuerySpatialAnchorResult.html",
    "title": "Struct YVRQuerySpatialAnchorResult | Core",
    "keywords": "Struct YVRQuerySpatialAnchorResult Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRQuerySpatialAnchorResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields numResults results"
  },
  "api/YVR.Core.YVRQuerySpatialAnchorResult.numResults.html": {
    "href": "api/YVR.Core.YVRQuerySpatialAnchorResult.numResults.html",
    "title": "Field numResults | Core",
    "keywords": "Field numResults Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint numResults Returns uint"
  },
  "api/YVR.Core.YVRQuerySpatialAnchorResult.results.html": {
    "href": "api/YVR.Core.YVRQuerySpatialAnchorResult.results.html",
    "title": "Field results | Core",
    "keywords": "Field results Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorResult[] results Returns YVRSpatialAnchorResult[]"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.GenerateCursor.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.GenerateCursor.html",
    "title": "Method GenerateCursor | Core",
    "keywords": "Method GenerateCursor Namespace YVR.Core Assembly YVR.Core.Runtime.dll GenerateCursor() Generate cursorGameObject and cursorTransform protected virtual void GenerateCursor()"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.GenerateLaserBeamLineRender.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.GenerateLaserBeamLineRender.html",
    "title": "Method GenerateLaserBeamLineRender | Core",
    "keywords": "Method GenerateLaserBeamLineRender Namespace YVR.Core Assembly YVR.Core.Runtime.dll GenerateLaserBeamLineRender() Generate lineRenderer protected virtual void GenerateLaserBeamLineRender()"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.OnDestroy.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.OnDestroy.html",
    "title": "Method OnDestroy | Core",
    "keywords": "Method OnDestroy Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnDestroy() Virtual version of Unity life cycle function OnDestroy protected virtual void OnDestroy()"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.Start.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.Start.html",
    "title": "Method Start | Core",
    "keywords": "Method Start Namespace YVR.Core Assembly YVR.Core.Runtime.dll Start() Virtual version of Unity life cycle function Start protected virtual void Start()"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.UpdateCursor.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.UpdateCursor.html",
    "title": "Method UpdateCursor | Core",
    "keywords": "Method UpdateCursor Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateCursor(GameObject, Vector3, Vector3) Updateing cursor protected virtual void UpdateCursor(GameObject targetGO, Vector3 hitPosition, Vector3 hitNormal) Parameters targetGO GameObject Current raycast hitting game objects hitPosition Vector3 Current raycast hitting point's position hitNormal Vector3 Current raycast hitting point's normal"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.UpdateLaserBeam.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.UpdateLaserBeam.html",
    "title": "Method UpdateLaserBeam | Core",
    "keywords": "Method UpdateLaserBeam Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateLaserBeam() Updateing laser beam protected virtual void UpdateLaserBeam() Remarks Laser beam will only be updated when inputDataProvider is not YVR.Core.YVRInputModule.YVRInputDataHMDProvider"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.cursorGameObject.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.cursorGameObject.html",
    "title": "Field cursorGameObject | Core",
    "keywords": "Field cursorGameObject Namespace YVR.Core Assembly YVR.Core.Runtime.dll The Gameobject instance which indicating the cursor protected GameObject cursorGameObject Returns GameObject The Gameobject instance which indicating the cursor"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.cursorMaterial.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.cursorMaterial.html",
    "title": "Field cursorMaterial | Core",
    "keywords": "Field cursorMaterial Namespace YVR.Core Assembly YVR.Core.Runtime.dll The Material of cursorGameObject protected Material cursorMaterial Returns Material The Material of cursorGameObject"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.cursorTransform.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.cursorTransform.html",
    "title": "Field cursorTransform | Core",
    "keywords": "Field cursorTransform Namespace YVR.Core Assembly YVR.Core.Runtime.dll The transform of cursorGameObject protected Transform cursorTransform Returns Transform The transform of cursorGameObject"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.html",
    "title": "Class YVRRaycastLaserBeam | Core",
    "keywords": "Class YVRRaycastLaserBeam Namespace YVR.Core Assembly YVR.Core.Runtime.dll Class for drawing raycasting laser beam public class YVRRaycastLaserBeam : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour YVRRaycastLaserBeam Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks It's highly recommended to implement your own version based on this script Fields cursorGameObject The Gameobject instance which indicating the cursor cursorMaterial The Material of cursorGameObject cursorTransform The transform of cursorGameObject laserLength The display length of the laser beam lineRenderer The line render used for rendering the laser beam Methods GenerateCursor() Generate cursorGameObject and cursorTransform GenerateLaserBeamLineRender() Generate lineRenderer OnDestroy() Virtual version of Unity life cycle function OnDestroy Start() Virtual version of Unity life cycle function Start UpdateCursor(GameObject, Vector3, Vector3) Updateing cursor UpdateLaserBeam() Updateing laser beam"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.laserLength.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.laserLength.html",
    "title": "Field laserLength | Core",
    "keywords": "Field laserLength Namespace YVR.Core Assembly YVR.Core.Runtime.dll The display length of the laser beam public float laserLength Returns float The display length of the laser beam"
  },
  "api/YVR.Core.YVRRaycastLaserBeam.lineRenderer.html": {
    "href": "api/YVR.Core.YVRRaycastLaserBeam.lineRenderer.html",
    "title": "Field lineRenderer | Core",
    "keywords": "Field lineRenderer Namespace YVR.Core Assembly YVR.Core.Runtime.dll The line render used for rendering the laser beam protected LineRenderer lineRenderer Returns LineRenderer The line render used for rendering the laser beam"
  },
  "api/YVR.Core.YVRRect2D.extent.html": {
    "href": "api/YVR.Core.YVRRect2D.extent.html",
    "title": "Field extent | Core",
    "keywords": "Field extent Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector2 extent Returns Vector2"
  },
  "api/YVR.Core.YVRRect2D.html": {
    "href": "api/YVR.Core.YVRRect2D.html",
    "title": "Struct YVRRect2D | Core",
    "keywords": "Struct YVRRect2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRRect2D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields extent offset"
  },
  "api/YVR.Core.YVRRect2D.offset.html": {
    "href": "api/YVR.Core.YVRRect2D.offset.html",
    "title": "Field offset | Core",
    "keywords": "Field offset Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector2 offset Returns Vector2"
  },
  "api/YVR.Core.YVRRect3D.extent.html": {
    "href": "api/YVR.Core.YVRRect3D.extent.html",
    "title": "Field extent | Core",
    "keywords": "Field extent Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 extent Returns Vector3"
  },
  "api/YVR.Core.YVRRect3D.html": {
    "href": "api/YVR.Core.YVRRect3D.html",
    "title": "Struct YVRRect3D | Core",
    "keywords": "Struct YVRRect3D Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRRect3D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields extent offset"
  },
  "api/YVR.Core.YVRRect3D.offset.html": {
    "href": "api/YVR.Core.YVRRect3D.offset.html",
    "title": "Field offset | Core",
    "keywords": "Field offset Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Vector3 offset Returns Vector3"
  },
  "api/YVR.Core.YVRRenderLayerExtensions.ToXRTrackingSpacePose.html": {
    "href": "api/YVR.Core.YVRRenderLayerExtensions.ToXRTrackingSpacePose.html",
    "title": "Method ToXRTrackingSpacePose | Core",
    "keywords": "Method ToXRTrackingSpacePose Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToXRTrackingSpacePose(Transform, Camera) public static XRPose ToXRTrackingSpacePose(this Transform transform, Camera camera) Parameters transform Transform camera Camera Returns XRPose ToXRTrackingSpacePose(Transform, Camera, XRPose) public static XRPose ToXRTrackingSpacePose(this Transform transform, Camera camera, XRPose offset) Parameters transform Transform camera Camera offset XRPose Returns XRPose"
  },
  "api/YVR.Core.YVRRenderLayerExtensions.ToYVRPose.html": {
    "href": "api/YVR.Core.YVRRenderLayerExtensions.ToYVRPose.html",
    "title": "Method ToYVRPose | Core",
    "keywords": "Method ToYVRPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll ToYVRPose(Transform) public static XRPose ToYVRPose(this Transform transform) Parameters transform Transform Returns XRPose ToYVRPose(Transform, XRPose) public static XRPose ToYVRPose(this Transform transform, XRPose offset) Parameters transform Transform offset XRPose Returns XRPose"
  },
  "api/YVR.Core.YVRRenderLayerExtensions.html": {
    "href": "api/YVR.Core.YVRRenderLayerExtensions.html",
    "title": "Class YVRRenderLayerExtensions | Core",
    "keywords": "Class YVRRenderLayerExtensions Namespace YVR.Core Assembly YVR.Core.Runtime.dll public static class YVRRenderLayerExtensions Inheritance object YVRRenderLayerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToXRTrackingSpacePose(Transform, Camera) ToXRTrackingSpacePose(Transform, Camera, XRPose) ToYVRPose(Transform) ToYVRPose(Transform, XRPose)"
  },
  "api/YVR.Core.YVRRenderLayerEyeMask.html": {
    "href": "api/YVR.Core.YVRRenderLayerEyeMask.html",
    "title": "Enum YVRRenderLayerEyeMask | Core",
    "keywords": "Enum YVRRenderLayerEyeMask Namespace YVR.Core Assembly YVR.Core.Runtime.dll [Serializable] public enum YVRRenderLayerEyeMask Fields kEyeMaskBoth = 3 kEyeMaskLeft = 1 kEyeMaskRight = 2"
  },
  "api/YVR.Core.YVRRenderLayerType.html": {
    "href": "api/YVR.Core.YVRRenderLayerType.html",
    "title": "Enum YVRRenderLayerType | Core",
    "keywords": "Enum YVRRenderLayerType Namespace YVR.Core Assembly YVR.Core.Runtime.dll [Serializable] public enum YVRRenderLayerType Fields Cylinder = 2 Equirect = 3 Quad = 1"
  },
  "api/YVR.Core.YVRRoomLayout.ceilingUuid.html": {
    "href": "api/YVR.Core.YVRRoomLayout.ceilingUuid.html",
    "title": "Field ceilingUuid | Core",
    "keywords": "Field ceilingUuid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorUUID ceilingUuid Returns YVRSpatialAnchorUUID"
  },
  "api/YVR.Core.YVRRoomLayout.floorUuid.html": {
    "href": "api/YVR.Core.YVRRoomLayout.floorUuid.html",
    "title": "Field floorUuid | Core",
    "keywords": "Field floorUuid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorUUID floorUuid Returns YVRSpatialAnchorUUID"
  },
  "api/YVR.Core.YVRRoomLayout.html": {
    "href": "api/YVR.Core.YVRRoomLayout.html",
    "title": "Struct YVRRoomLayout | Core",
    "keywords": "Struct YVRRoomLayout Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRRoomLayout Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ceilingUuid floorUuid wallUuidCapacityInput wallUuidCountOutput wallUuids wallUuidsPtr"
  },
  "api/YVR.Core.YVRRoomLayout.wallUuidCapacityInput.html": {
    "href": "api/YVR.Core.YVRRoomLayout.wallUuidCapacityInput.html",
    "title": "Field wallUuidCapacityInput | Core",
    "keywords": "Field wallUuidCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int wallUuidCapacityInput Returns int"
  },
  "api/YVR.Core.YVRRoomLayout.wallUuidCountOutput.html": {
    "href": "api/YVR.Core.YVRRoomLayout.wallUuidCountOutput.html",
    "title": "Field wallUuidCountOutput | Core",
    "keywords": "Field wallUuidCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int wallUuidCountOutput Returns int"
  },
  "api/YVR.Core.YVRRoomLayout.wallUuids.html": {
    "href": "api/YVR.Core.YVRRoomLayout.wallUuids.html",
    "title": "Field wallUuids | Core",
    "keywords": "Field wallUuids Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorUUID[] wallUuids Returns YVRSpatialAnchorUUID[]"
  },
  "api/YVR.Core.YVRRoomLayout.wallUuidsPtr.html": {
    "href": "api/YVR.Core.YVRRoomLayout.wallUuidsPtr.html",
    "title": "Field wallUuidsPtr | Core",
    "keywords": "Field wallUuidsPtr Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr wallUuidsPtr Returns IntPtr"
  },
  "api/YVR.Core.YVRSceneAnchor.ConvertIntPtr2List.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.ConvertIntPtr2List.html",
    "title": "Method ConvertIntPtr2List | Core",
    "keywords": "Method ConvertIntPtr2List Namespace YVR.Core Assembly YVR.Core.Runtime.dll ConvertIntPtr2List<T>(IntPtr, uint) public List<T> ConvertIntPtr2List<T>(IntPtr ptr, uint count) Parameters ptr IntPtr count uint Returns List<T> Type Parameters T"
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorBoundary2D.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorBoundary2D.html",
    "title": "Method GetAnchorBoundary2D | Core",
    "keywords": "Method GetAnchorBoundary2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorBoundary2D(ulong, out List<Vector2>) Retrieves the 2D boundary vertices of an anchor. public bool GetAnchorBoundary2D(ulong anchorHandle, out List<Vector2> boundary) Parameters anchorHandle ulong The unique identifier of the anchor. boundary List<Vector2> List of 2D boundary vertices of the anchor. Returns bool Returns true if the operation is successful, otherwise false."
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorBoundingBox2D.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorBoundingBox2D.html",
    "title": "Method GetAnchorBoundingBox2D | Core",
    "keywords": "Method GetAnchorBoundingBox2D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorBoundingBox2D(ulong, out YVRRect2D) Retrieves the 2D bounding box of an anchor. public bool GetAnchorBoundingBox2D(ulong anchorHandle, out YVRRect2D boundingBox2D) Parameters anchorHandle ulong The unique identifier of the anchor. boundingBox2D YVRRect2D 2D bounding box of the anchor. Returns bool Returns true if the operation is successful, otherwise false."
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorBoundingBox3D.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorBoundingBox3D.html",
    "title": "Method GetAnchorBoundingBox3D | Core",
    "keywords": "Method GetAnchorBoundingBox3D Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorBoundingBox3D(ulong, out YVRRect3D) Retrieves the 3D bounding box of an anchor. public bool GetAnchorBoundingBox3D(ulong anchorHandle, out YVRRect3D boundingBox3D) Parameters anchorHandle ulong The unique identifier of the anchor. boundingBox3D YVRRect3D 3D bounding box of the anchor. Returns bool Returns true if the operation is successful, otherwise false."
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorContainer.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorContainer.html",
    "title": "Method GetAnchorContainer | Core",
    "keywords": "Method GetAnchorContainer Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorContainer(ulong, out List<YVRSpatialAnchorUUID>) Retrieves the container information associated with an anchor. public bool GetAnchorContainer(ulong anchorHandle, out List<YVRSpatialAnchorUUID> containerUuids) Parameters anchorHandle ulong The unique identifier of the anchor. containerUuids List<YVRSpatialAnchorUUID> List of UUIDs representing the container of the anchor. Returns bool Returns true if the operation is successful, otherwise false."
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorRoomLayout.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorRoomLayout.html",
    "title": "Method GetAnchorRoomLayout | Core",
    "keywords": "Method GetAnchorRoomLayout Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorRoomLayout(ulong, out YVRRoomLayout) Retrieves the 3D room layout information associated with an anchor. public bool GetAnchorRoomLayout(ulong anchorHandle, out YVRRoomLayout roomLayout) Parameters anchorHandle ulong The unique identifier of the anchor. roomLayout YVRRoomLayout 3D room layout information related to the anchor. Returns bool Returns true if the operation is successful, otherwise false."
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorSemanticLabels.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorSemanticLabels.html",
    "title": "Method GetAnchorSemanticLabels | Core",
    "keywords": "Method GetAnchorSemanticLabels Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorSemanticLabels(ulong, out string) Retrieves the semantic labels associated with an anchor. public bool GetAnchorSemanticLabels(ulong anchorHandle, out string labels) Parameters anchorHandle ulong The unique identifier of the anchor. labels string Semantic labels related to the anchor. Returns bool Returns true if the operation is successful, otherwise false."
  },
  "api/YVR.Core.YVRSceneAnchor.GetAnchorTriangleMesh.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.GetAnchorTriangleMesh.html",
    "title": "Method GetAnchorTriangleMesh | Core",
    "keywords": "Method GetAnchorTriangleMesh Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetAnchorTriangleMesh(ulong, out YVRTriangleMesh) public bool GetAnchorTriangleMesh(ulong anchorHandle, out YVRTriangleMesh triangleMesh) Parameters anchorHandle ulong triangleMesh YVRTriangleMesh Returns bool"
  },
  "api/YVR.Core.YVRSceneAnchor.OnInit.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.OnInit.html",
    "title": "Method OnInit | Core",
    "keywords": "Method OnInit Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnInit() protected override void OnInit()"
  },
  "api/YVR.Core.YVRSceneAnchor.RequestSceneCapture.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.RequestSceneCapture.html",
    "title": "Method RequestSceneCapture | Core",
    "keywords": "Method RequestSceneCapture Namespace YVR.Core Assembly YVR.Core.Runtime.dll RequestSceneCapture(string, Action<bool>) Sends a request for scene capture with the specified request string. public bool RequestSceneCapture(string requestString, Action<bool> callback) Parameters requestString string The request string for scene capture. callback Action<bool> Returns bool"
  },
  "api/YVR.Core.YVRSceneAnchor.html": {
    "href": "api/YVR.Core.YVRSceneAnchor.html",
    "title": "Class YVRSceneAnchor | Core",
    "keywords": "Class YVRSceneAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRSceneAnchor : Singleton<YVRSceneAnchor> Inheritance object Singleton<YVRSceneAnchor> YVRSceneAnchor Inherited Members Singleton<YVRSceneAnchor>.instance Singleton<YVRSceneAnchor>.createdInstance Singleton<YVRSceneAnchor>.Reset() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertIntPtr2List<T>(IntPtr, uint) GetAnchorBoundary2D(ulong, out List<Vector2>) Retrieves the 2D boundary vertices of an anchor. GetAnchorBoundingBox2D(ulong, out YVRRect2D) Retrieves the 2D bounding box of an anchor. GetAnchorBoundingBox3D(ulong, out YVRRect3D) Retrieves the 3D bounding box of an anchor. GetAnchorContainer(ulong, out List<YVRSpatialAnchorUUID>) Retrieves the container information associated with an anchor. GetAnchorRoomLayout(ulong, out YVRRoomLayout) Retrieves the 3D room layout information associated with an anchor. GetAnchorSemanticLabels(ulong, out string) Retrieves the semantic labels associated with an anchor. GetAnchorTriangleMesh(ulong, out YVRTriangleMesh) OnInit() RequestSceneCapture(string, Action<bool>) Sends a request for scene capture with the specified request string."
  },
  "api/YVR.Core.YVRSceneAnchorContainer.html": {
    "href": "api/YVR.Core.YVRSceneAnchorContainer.html",
    "title": "Struct YVRSceneAnchorContainer | Core",
    "keywords": "Struct YVRSceneAnchorContainer Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSceneAnchorContainer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields uuidCapacityInput uuidCountOutput uuids"
  },
  "api/YVR.Core.YVRSceneAnchorContainer.uuidCapacityInput.html": {
    "href": "api/YVR.Core.YVRSceneAnchorContainer.uuidCapacityInput.html",
    "title": "Field uuidCapacityInput | Core",
    "keywords": "Field uuidCapacityInput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int uuidCapacityInput Returns int"
  },
  "api/YVR.Core.YVRSceneAnchorContainer.uuidCountOutput.html": {
    "href": "api/YVR.Core.YVRSceneAnchorContainer.uuidCountOutput.html",
    "title": "Field uuidCountOutput | Core",
    "keywords": "Field uuidCountOutput Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int uuidCountOutput Returns int"
  },
  "api/YVR.Core.YVRSceneAnchorContainer.uuids.html": {
    "href": "api/YVR.Core.YVRSceneAnchorContainer.uuids.html",
    "title": "Field uuids | Core",
    "keywords": "Field uuids Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr uuids Returns IntPtr"
  },
  "api/YVR.Core.YVRSceneCaptureRequest.html": {
    "href": "api/YVR.Core.YVRSceneCaptureRequest.html",
    "title": "Struct YVRSceneCaptureRequest | Core",
    "keywords": "Struct YVRSceneCaptureRequest Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSceneCaptureRequest Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields request requestByteCount"
  },
  "api/YVR.Core.YVRSceneCaptureRequest.request.html": {
    "href": "api/YVR.Core.YVRSceneCaptureRequest.request.html",
    "title": "Field request | Core",
    "keywords": "Field request Namespace YVR.Core Assembly YVR.Core.Runtime.dll public string request Returns string"
  },
  "api/YVR.Core.YVRSceneCaptureRequest.requestByteCount.html": {
    "href": "api/YVR.Core.YVRSceneCaptureRequest.requestByteCount.html",
    "title": "Field requestByteCount | Core",
    "keywords": "Field requestByteCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int requestByteCount Returns int"
  },
  "api/YVR.Core.YVRSemanticClassification.K_Ceiling.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.K_Ceiling.html",
    "title": "Field K_Ceiling | Core",
    "keywords": "Field K_Ceiling Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string K_Ceiling = \"CEILING\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.html",
    "title": "Class YVRSemanticClassification | Core",
    "keywords": "Class YVRSemanticClassification Namespace YVR.Core Assembly YVR.Core.Runtime.dll public static class YVRSemanticClassification Inheritance object YVRSemanticClassification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields K_Ceiling k_Bed k_Couch k_DoorFrame k_Floor k_Lamp k_Other k_Plant k_Screen k_Storage k_Table k_WallFace k_WindowFrame"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Bed.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Bed.html",
    "title": "Field k_Bed | Core",
    "keywords": "Field k_Bed Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Bed = \"BED\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Couch.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Couch.html",
    "title": "Field k_Couch | Core",
    "keywords": "Field k_Couch Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Couch = \"COUCH\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_DoorFrame.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_DoorFrame.html",
    "title": "Field k_DoorFrame | Core",
    "keywords": "Field k_DoorFrame Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_DoorFrame = \"DOOR_FRAME\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Floor.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Floor.html",
    "title": "Field k_Floor | Core",
    "keywords": "Field k_Floor Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Floor = \"FLOOR\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Lamp.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Lamp.html",
    "title": "Field k_Lamp | Core",
    "keywords": "Field k_Lamp Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Lamp = \"LAMP\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Other.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Other.html",
    "title": "Field k_Other | Core",
    "keywords": "Field k_Other Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Other = \"OTHER\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Plant.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Plant.html",
    "title": "Field k_Plant | Core",
    "keywords": "Field k_Plant Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Plant = \"PLANT\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Screen.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Screen.html",
    "title": "Field k_Screen | Core",
    "keywords": "Field k_Screen Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Screen = \"SCREEN\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Storage.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Storage.html",
    "title": "Field k_Storage | Core",
    "keywords": "Field k_Storage Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Storage = \"STORAGE\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_Table.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_Table.html",
    "title": "Field k_Table | Core",
    "keywords": "Field k_Table Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_Table = \"TABLE\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_WallFace.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_WallFace.html",
    "title": "Field k_WallFace | Core",
    "keywords": "Field k_WallFace Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_WallFace = \"WALL_FACE\" Returns string"
  },
  "api/YVR.Core.YVRSemanticClassification.k_WindowFrame.html": {
    "href": "api/YVR.Core.YVRSemanticClassification.k_WindowFrame.html",
    "title": "Field k_WindowFrame | Core",
    "keywords": "Field k_WindowFrame Namespace YVR.Core Assembly YVR.Core.Runtime.dll public const string k_WindowFrame = \"WINDOW_FRAME\" Returns string"
  },
  "api/YVR.Core.YVRSpaceLocationFlags.html": {
    "href": "api/YVR.Core.YVRSpaceLocationFlags.html",
    "title": "Enum YVRSpaceLocationFlags | Core",
    "keywords": "Enum YVRSpaceLocationFlags Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRSpaceLocationFlags : ulong Fields XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT = 4 XR_SPACE_LOCATION_ORIENTATION_VALID_BIT = 1 XR_SPACE_LOCATION_POSITION_TRACKED_BIT = 8 XR_SPACE_LOCATION_POSITION_VALID_BIT = 2"
  },
  "api/YVR.Core.YVRSpatialAnchor.CreateSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.CreateSpatialAnchor.html",
    "title": "Method CreateSpatialAnchor | Core",
    "keywords": "Method CreateSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll CreateSpatialAnchor(Vector3, Quaternion, Action<YVRSpatialAnchorResult, bool>) Creates a spatial anchor using the provided position and rotation. public void CreateSpatialAnchor(Vector3 position, Quaternion rotation, Action<YVRSpatialAnchorResult, bool> result) Parameters position Vector3 The position of the anchor rotation Quaternion The rotation of the anchor result Action<YVRSpatialAnchorResult, bool> Callback for handling the result of the anchor creation process"
  },
  "api/YVR.Core.YVRSpatialAnchor.EraseSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.EraseSpatialAnchor.html",
    "title": "Method EraseSpatialAnchor | Core",
    "keywords": "Method EraseSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll EraseSpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, Action<YVRSpatialAnchorResult, bool>) Erases a spatial anchor from the specified storage location. public void EraseSpatialAnchor(ulong anchorHandle, YVRSpatialAnchorStorageLocation location, Action<YVRSpatialAnchorResult, bool> callback) Parameters anchorHandle ulong The handle of the spatial anchor to be erased location YVRSpatialAnchorStorageLocation The storage location from which the spatial anchor should be erased callback Action<YVRSpatialAnchorResult, bool> Callback for handling the result of the spatial anchor erasure process"
  },
  "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorComponentStatus.html",
    "title": "Method GetSpatialAnchorComponentStatus | Core",
    "keywords": "Method GetSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, out YVRSpatialAnchorComponentStatus) Retrieves the status of a specific component for a spatial anchor identified by the given handle. public void GetSpatialAnchorComponentStatus(ulong anchorHandle, YVRSpatialAnchorComponentType componentType, out YVRSpatialAnchorComponentStatus status) Parameters anchorHandle ulong The handle of the spatial anchor componentType YVRSpatialAnchorComponentType The type of the spatial anchor component status YVRSpatialAnchorComponentStatus The status of the component for the spatial anchor"
  },
  "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorEnumerateSupported.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorEnumerateSupported.html",
    "title": "Method GetSpatialAnchorEnumerateSupported | Core",
    "keywords": "Method GetSpatialAnchorEnumerateSupported Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorEnumerateSupported(ulong, out YVRSpatialAnchorSupportedComponent) Retrieves the supported components of a spatial anchor identified by the given handle. public void GetSpatialAnchorEnumerateSupported(ulong anchorHandle, out YVRSpatialAnchorSupportedComponent components) Parameters anchorHandle ulong The handle of the spatial anchor components YVRSpatialAnchorSupportedComponent Supported components of the spatial anchor"
  },
  "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorPose.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorPose.html",
    "title": "Method GetSpatialAnchorPose | Core",
    "keywords": "Method GetSpatialAnchorPose Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorPose(ulong, out Vector3, out Quaternion, out YVRAnchorLocationFlags) Retrieves the pose of a spatial anchor identified by the given handle. public bool GetSpatialAnchorPose(ulong anchorHandle, out Vector3 position, out Quaternion rotation, out YVRAnchorLocationFlags locationFlags) Parameters anchorHandle ulong The handle of the spatial anchor position Vector3 The position of the spatial anchor rotation Quaternion The rotation of the spatial anchor locationFlags YVRAnchorLocationFlags Flags indicating the location of the spatial anchor Returns bool True if the spatial anchor pose was successfully retrieved; otherwise, false"
  },
  "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorUUIDForHandle.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.GetSpatialAnchorUUIDForHandle.html",
    "title": "Method GetSpatialAnchorUUIDForHandle | Core",
    "keywords": "Method GetSpatialAnchorUUIDForHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll GetSpatialAnchorUUIDForHandle(ulong, out YVRSpatialAnchorUUID) Retrieves the UUID for a spatial anchor identified by the given handle. public void GetSpatialAnchorUUIDForHandle(ulong anchorHandle, out YVRSpatialAnchorUUID uuid) Parameters anchorHandle ulong The handle of the spatial anchor uuid YVRSpatialAnchorUUID The UUID of the spatial anchor"
  },
  "api/YVR.Core.YVRSpatialAnchor.IsOrientationTracked.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.IsOrientationTracked.html",
    "title": "Method IsOrientationTracked | Core",
    "keywords": "Method IsOrientationTracked Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsOrientationTracked(YVRAnchorLocationFlags) Checks if the orientation is tracked based on the specified location flags. public bool IsOrientationTracked(YVRAnchorLocationFlags value) Parameters value YVRAnchorLocationFlags The anchor location flags to be evaluated Returns bool True if the orientation is tracked; otherwise, false"
  },
  "api/YVR.Core.YVRSpatialAnchor.IsOrientationValid.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.IsOrientationValid.html",
    "title": "Method IsOrientationValid | Core",
    "keywords": "Method IsOrientationValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsOrientationValid(YVRAnchorLocationFlags) Checks if the orientation is valid based on the specified location flags. public bool IsOrientationValid(YVRAnchorLocationFlags value) Parameters value YVRAnchorLocationFlags The anchor location flags to be evaluated Returns bool True if the orientation is valid; otherwise, false"
  },
  "api/YVR.Core.YVRSpatialAnchor.IsPositionTracked.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.IsPositionTracked.html",
    "title": "Method IsPositionTracked | Core",
    "keywords": "Method IsPositionTracked Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsPositionTracked(YVRAnchorLocationFlags) public bool IsPositionTracked(YVRAnchorLocationFlags value) Parameters value YVRAnchorLocationFlags Returns bool"
  },
  "api/YVR.Core.YVRSpatialAnchor.IsPositionValid.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.IsPositionValid.html",
    "title": "Method IsPositionValid | Core",
    "keywords": "Method IsPositionValid Namespace YVR.Core Assembly YVR.Core.Runtime.dll IsPositionValid(YVRAnchorLocationFlags) Checks if the position is valid based on the specified location flags. public bool IsPositionValid(YVRAnchorLocationFlags value) Parameters value YVRAnchorLocationFlags The anchor location flags to be evaluated Returns bool True if the position is valid; otherwise, false"
  },
  "api/YVR.Core.YVRSpatialAnchor.OnInit.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.OnInit.html",
    "title": "Method OnInit | Core",
    "keywords": "Method OnInit Namespace YVR.Core Assembly YVR.Core.Runtime.dll OnInit() protected override void OnInit()"
  },
  "api/YVR.Core.YVRSpatialAnchor.QuerySpatialAnchor.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.QuerySpatialAnchor.html",
    "title": "Method QuerySpatialAnchor | Core",
    "keywords": "Method QuerySpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, Action<List<YVRSpatialAnchorResult>>) Queries spatial anchors based on the provided query information. public void QuerySpatialAnchor(YVRSpatialAnchorQueryInfo queryInfo, Action<List<YVRSpatialAnchorResult>> queryCallback) Parameters queryInfo YVRSpatialAnchorQueryInfo Information for the spatial anchor query queryCallback Action<List<YVRSpatialAnchorResult>> Callback for handling the results of the spatial anchor query"
  },
  "api/YVR.Core.YVRSpatialAnchor.SaveSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.SaveSpatialAnchor.html",
    "title": "Method SaveSpatialAnchor | Core",
    "keywords": "Method SaveSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, Action<YVRSpatialAnchorSaveCompleteInfo, bool>) Saves a spatial anchor using the provided save information. public void SaveSpatialAnchor(YVRSpatialAnchorSaveInfo saveInfo, Action<YVRSpatialAnchorSaveCompleteInfo, bool> callback) Parameters saveInfo YVRSpatialAnchorSaveInfo Information about the spatial anchor to be saved callback Action<YVRSpatialAnchorSaveCompleteInfo, bool> Callback for handling the completion of the spatial anchor save process"
  },
  "api/YVR.Core.YVRSpatialAnchor.SaveSpatialAnchorList.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.SaveSpatialAnchorList.html",
    "title": "Method SaveSpatialAnchorList | Core",
    "keywords": "Method SaveSpatialAnchorList Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveSpatialAnchorList(List<ulong>, YVRSpatialAnchorStorageLocation, Action<bool>) Saves a list of spatial anchors to the specified storage location. public void SaveSpatialAnchorList(List<ulong> spatialAnchorHandleList, YVRSpatialAnchorStorageLocation location, Action<bool> callback) Parameters spatialAnchorHandleList List<ulong> The list of spatial anchor handles to be saved location YVRSpatialAnchorStorageLocation The storage location for saving the spatial anchor list callback Action<bool> Callback for handling the result of the spatial anchor list save process"
  },
  "api/YVR.Core.YVRSpatialAnchor.SaveToCloudThenShare.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.SaveToCloudThenShare.html",
    "title": "Method SaveToCloudThenShare | Core",
    "keywords": "Method SaveToCloudThenShare Namespace YVR.Core Assembly YVR.Core.Runtime.dll SaveToCloudThenShare(YVRSpatialAnchorShareInfo, Action<bool>) Saves the spatial anchor list to the cloud and then shares it with specified users. public void SaveToCloudThenShare(YVRSpatialAnchorShareInfo shareInfo, Action<bool> callback) Parameters shareInfo YVRSpatialAnchorShareInfo Information about the spatial anchor list to be shared and the users with whom it will be shared callback Action<bool> Callback for handling the result of the combined save and share process"
  },
  "api/YVR.Core.YVRSpatialAnchor.SetSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.SetSpatialAnchorComponentStatus.html",
    "title": "Method SetSpatialAnchorComponentStatus | Core",
    "keywords": "Method SetSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) Sets the status of a component for a specific spatial anchor. public bool SetSpatialAnchorComponentStatus(ulong anchorHandle, YVRSpatialAnchorComponentStatusSetInfo setInfo, Action<YVRSpatialAnchorSetStatusCompleteInfo, bool> callback) Parameters anchorHandle ulong The handle of the spatial anchor setInfo YVRSpatialAnchorComponentStatusSetInfo Information for setting the status of the spatial anchor component callback Action<YVRSpatialAnchorSetStatusCompleteInfo, bool> Callback for handling the completion of the status setting process Returns bool True if setting the spatial anchor component status was successful; otherwise, false"
  },
  "api/YVR.Core.YVRSpatialAnchor.ShareSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.ShareSpatialAnchor.html",
    "title": "Method ShareSpatialAnchor | Core",
    "keywords": "Method ShareSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll ShareSpatialAnchor(YVRSpatialAnchorShareInfo, Action<bool>) Shares a spatial anchor with specified users. public void ShareSpatialAnchor(YVRSpatialAnchorShareInfo shareInfo, Action<bool> callback) Parameters shareInfo YVRSpatialAnchorShareInfo Information about the spatial anchor to be shared and the users it will be shared with callback Action<bool> Callback for handling the result of the sharing process"
  },
  "api/YVR.Core.YVRSpatialAnchor.html": {
    "href": "api/YVR.Core.YVRSpatialAnchor.html",
    "title": "Class YVRSpatialAnchor | Core",
    "keywords": "Class YVRSpatialAnchor Namespace YVR.Core Assembly YVR.Core.Runtime.dll public class YVRSpatialAnchor : Singleton<YVRSpatialAnchor> Inheritance object Singleton<YVRSpatialAnchor> YVRSpatialAnchor Inherited Members Singleton<YVRSpatialAnchor>.instance Singleton<YVRSpatialAnchor>.createdInstance Singleton<YVRSpatialAnchor>.Reset() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSpatialAnchor(Vector3, Quaternion, Action<YVRSpatialAnchorResult, bool>) Creates a spatial anchor using the provided position and rotation. EraseSpatialAnchor(ulong, YVRSpatialAnchorStorageLocation, Action<YVRSpatialAnchorResult, bool>) Erases a spatial anchor from the specified storage location. GetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentType, out YVRSpatialAnchorComponentStatus) Retrieves the status of a specific component for a spatial anchor identified by the given handle. GetSpatialAnchorEnumerateSupported(ulong, out YVRSpatialAnchorSupportedComponent) Retrieves the supported components of a spatial anchor identified by the given handle. GetSpatialAnchorPose(ulong, out Vector3, out Quaternion, out YVRAnchorLocationFlags) Retrieves the pose of a spatial anchor identified by the given handle. GetSpatialAnchorUUIDForHandle(ulong, out YVRSpatialAnchorUUID) Retrieves the UUID for a spatial anchor identified by the given handle. IsOrientationTracked(YVRAnchorLocationFlags) Checks if the orientation is tracked based on the specified location flags. IsOrientationValid(YVRAnchorLocationFlags) Checks if the orientation is valid based on the specified location flags. IsPositionTracked(YVRAnchorLocationFlags) IsPositionValid(YVRAnchorLocationFlags) Checks if the position is valid based on the specified location flags. OnInit() QuerySpatialAnchor(YVRSpatialAnchorQueryInfo, Action<List<YVRSpatialAnchorResult>>) Queries spatial anchors based on the provided query information. SaveSpatialAnchor(YVRSpatialAnchorSaveInfo, Action<YVRSpatialAnchorSaveCompleteInfo, bool>) Saves a spatial anchor using the provided save information. SaveSpatialAnchorList(List<ulong>, YVRSpatialAnchorStorageLocation, Action<bool>) Saves a list of spatial anchors to the specified storage location. SaveToCloudThenShare(YVRSpatialAnchorShareInfo, Action<bool>) Saves the spatial anchor list to the cloud and then shares it with specified users. SetSpatialAnchorComponentStatus(ulong, YVRSpatialAnchorComponentStatusSetInfo, Action<YVRSpatialAnchorSetStatusCompleteInfo, bool>) Sets the status of a component for a specific spatial anchor. ShareSpatialAnchor(YVRSpatialAnchorShareInfo, Action<bool>) Shares a spatial anchor with specified users."
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatus.changePending.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatus.changePending.html",
    "title": "Field changePending | Core",
    "keywords": "Field changePending Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool changePending Returns bool"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatus.enable.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatus.enable.html",
    "title": "Field enable | Core",
    "keywords": "Field enable Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool enable Returns bool"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatus.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatus.html",
    "title": "Struct YVRSpatialAnchorComponentStatus | Core",
    "keywords": "Struct YVRSpatialAnchorComponentStatus Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorComponentStatus Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields changePending enable"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.component.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.component.html",
    "title": "Field component | Core",
    "keywords": "Field component Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorComponentType component Returns YVRSpatialAnchorComponentType"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.enable.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.enable.html",
    "title": "Field enable | Core",
    "keywords": "Field enable Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool enable Returns bool"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.html",
    "title": "Struct YVRSpatialAnchorComponentStatusSetInfo | Core",
    "keywords": "Struct YVRSpatialAnchorComponentStatusSetInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorComponentStatusSetInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields component enable timeout"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.timeout.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentStatusSetInfo.timeout.html",
    "title": "Field timeout | Core",
    "keywords": "Field timeout Namespace YVR.Core Assembly YVR.Core.Runtime.dll public double timeout Returns double"
  },
  "api/YVR.Core.YVRSpatialAnchorComponentType.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorComponentType.html",
    "title": "Enum YVRSpatialAnchorComponentType | Core",
    "keywords": "Enum YVRSpatialAnchorComponentType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRSpatialAnchorComponentType Fields Bounded2D = 3 Bounded3D = 4 Locatable = 0 None = -1 RoomLayout = 6 SemanticLabels = 5 Sharable = 2 SpaceContainer = 7 Storable = 1"
  },
  "api/YVR.Core.YVRSpatialAnchorListSaveInfo.anchorCount.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorListSaveInfo.anchorCount.html",
    "title": "Field anchorCount | Core",
    "keywords": "Field anchorCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int anchorCount Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorListSaveInfo.anchorHandles.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorListSaveInfo.anchorHandles.html",
    "title": "Field anchorHandles | Core",
    "keywords": "Field anchorHandles Namespace YVR.Core Assembly YVR.Core.Runtime.dll public IntPtr anchorHandles Returns IntPtr"
  },
  "api/YVR.Core.YVRSpatialAnchorListSaveInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorListSaveInfo.html",
    "title": "Struct YVRSpatialAnchorListSaveInfo | Core",
    "keywords": "Struct YVRSpatialAnchorListSaveInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorListSaveInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorCount anchorHandles storageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorListSaveInfo.storageLocation.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorListSaveInfo.storageLocation.html",
    "title": "Field storageLocation | Core",
    "keywords": "Field storageLocation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorStorageLocation storageLocation Returns YVRSpatialAnchorStorageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.MaxQuerySpaces.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.MaxQuerySpaces.html",
    "title": "Field MaxQuerySpaces | Core",
    "keywords": "Field MaxQuerySpaces Namespace YVR.Core Assembly YVR.Core.Runtime.dll public uint MaxQuerySpaces Returns uint"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.Timeout.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.Timeout.html",
    "title": "Field Timeout | Core",
    "keywords": "Field Timeout Namespace YVR.Core Assembly YVR.Core.Runtime.dll public double Timeout Returns double"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.component.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.component.html",
    "title": "Field component | Core",
    "keywords": "Field component Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorComponentType component Returns YVRSpatialAnchorComponentType"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.html",
    "title": "Struct YVRSpatialAnchorQueryInfo | Core",
    "keywords": "Struct YVRSpatialAnchorQueryInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorQueryInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields MaxQuerySpaces Timeout component ids numIds storageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.ids.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.ids.html",
    "title": "Field ids | Core",
    "keywords": "Field ids Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorUUID[] ids Returns YVRSpatialAnchorUUID[]"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.numIds.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.numIds.html",
    "title": "Field numIds | Core",
    "keywords": "Field numIds Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int numIds Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryInfo.storageLocation.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryInfo.storageLocation.html",
    "title": "Field storageLocation | Core",
    "keywords": "Field storageLocation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorStorageLocation storageLocation Returns YVRSpatialAnchorStorageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorQueryType.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorQueryType.html",
    "title": "Enum YVRSpatialAnchorQueryType | Core",
    "keywords": "Enum YVRSpatialAnchorQueryType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRSpatialAnchorQueryType Fields Action = 0"
  },
  "api/YVR.Core.YVRSpatialAnchorResult.anchorHandle.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorResult.anchorHandle.html",
    "title": "Field anchorHandle | Core",
    "keywords": "Field anchorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong anchorHandle Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorResult.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorResult.html",
    "title": "Struct YVRSpatialAnchorResult | Core",
    "keywords": "Struct YVRSpatialAnchorResult Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorHandle requestId uuid"
  },
  "api/YVR.Core.YVRSpatialAnchorResult.requestId.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorResult.requestId.html",
    "title": "Field requestId | Core",
    "keywords": "Field requestId Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong requestId Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorResult.uuid.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorResult.uuid.html",
    "title": "Field uuid | Core",
    "keywords": "Field uuid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public char[] uuid Returns char[]"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.anchorHandle.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.anchorHandle.html",
    "title": "Field anchorHandle | Core",
    "keywords": "Field anchorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong anchorHandle Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.html",
    "title": "Struct YVRSpatialAnchorSaveCompleteInfo | Core",
    "keywords": "Struct YVRSpatialAnchorSaveCompleteInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorSaveCompleteInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorHandle location requestId resultCode uuid"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.location.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.location.html",
    "title": "Field location | Core",
    "keywords": "Field location Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorStorageLocation location Returns YVRSpatialAnchorStorageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.requestId.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.requestId.html",
    "title": "Field requestId | Core",
    "keywords": "Field requestId Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong requestId Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.resultCode.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.resultCode.html",
    "title": "Field resultCode | Core",
    "keywords": "Field resultCode Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int resultCode Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.uuid.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveCompleteInfo.uuid.html",
    "title": "Field uuid | Core",
    "keywords": "Field uuid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public char[] uuid Returns char[]"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveInfo.anchorHandle.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveInfo.anchorHandle.html",
    "title": "Field anchorHandle | Core",
    "keywords": "Field anchorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong anchorHandle Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveInfo.html",
    "title": "Struct YVRSpatialAnchorSaveInfo | Core",
    "keywords": "Struct YVRSpatialAnchorSaveInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorSaveInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorHandle storageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorSaveInfo.storageLocation.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSaveInfo.storageLocation.html",
    "title": "Field storageLocation | Core",
    "keywords": "Field storageLocation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorStorageLocation storageLocation Returns YVRSpatialAnchorStorageLocation"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.anchorHandle.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.anchorHandle.html",
    "title": "Field anchorHandle | Core",
    "keywords": "Field anchorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong anchorHandle Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.componentType.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.componentType.html",
    "title": "Field componentType | Core",
    "keywords": "Field componentType Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorComponentType componentType Returns YVRSpatialAnchorComponentType"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.enabled.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.enabled.html",
    "title": "Field enabled | Core",
    "keywords": "Field enabled Namespace YVR.Core Assembly YVR.Core.Runtime.dll public bool enabled Returns bool"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.html",
    "title": "Struct YVRSpatialAnchorSetStatusCompleteInfo | Core",
    "keywords": "Struct YVRSpatialAnchorSetStatusCompleteInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorSetStatusCompleteInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorHandle componentType enabled requestId resultCode uuid"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.requestId.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.requestId.html",
    "title": "Field requestId | Core",
    "keywords": "Field requestId Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong requestId Returns ulong"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.resultCode.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.resultCode.html",
    "title": "Field resultCode | Core",
    "keywords": "Field resultCode Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int resultCode Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.uuid.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSetStatusCompleteInfo.uuid.html",
    "title": "Field uuid | Core",
    "keywords": "Field uuid Namespace YVR.Core Assembly YVR.Core.Runtime.dll public char[] uuid Returns char[]"
  },
  "api/YVR.Core.YVRSpatialAnchorShareInfo.anchorCount.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorShareInfo.anchorCount.html",
    "title": "Field anchorCount | Core",
    "keywords": "Field anchorCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int anchorCount Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorShareInfo.anchorHandle.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorShareInfo.anchorHandle.html",
    "title": "Field anchorHandle | Core",
    "keywords": "Field anchorHandle Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong[] anchorHandle Returns ulong[]"
  },
  "api/YVR.Core.YVRSpatialAnchorShareInfo.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorShareInfo.html",
    "title": "Struct YVRSpatialAnchorShareInfo | Core",
    "keywords": "Struct YVRSpatialAnchorShareInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorShareInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorCount anchorHandle userCount users"
  },
  "api/YVR.Core.YVRSpatialAnchorShareInfo.userCount.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorShareInfo.userCount.html",
    "title": "Field userCount | Core",
    "keywords": "Field userCount Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int userCount Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorShareInfo.users.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorShareInfo.users.html",
    "title": "Field users | Core",
    "keywords": "Field users Namespace YVR.Core Assembly YVR.Core.Runtime.dll public ulong[] users Returns ulong[]"
  },
  "api/YVR.Core.YVRSpatialAnchorStorageLocation.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorStorageLocation.html",
    "title": "Enum YVRSpatialAnchorStorageLocation | Core",
    "keywords": "Enum YVRSpatialAnchorStorageLocation Namespace YVR.Core Assembly YVR.Core.Runtime.dll public enum YVRSpatialAnchorStorageLocation Fields Cloud = 2 Invalid = 0 Local = 1"
  },
  "api/YVR.Core.YVRSpatialAnchorSupportedComponent.components.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSupportedComponent.components.html",
    "title": "Field components | Core",
    "keywords": "Field components Namespace YVR.Core Assembly YVR.Core.Runtime.dll public YVRSpatialAnchorComponentType[] components Returns YVRSpatialAnchorComponentType[]"
  },
  "api/YVR.Core.YVRSpatialAnchorSupportedComponent.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSupportedComponent.html",
    "title": "Struct YVRSpatialAnchorSupportedComponent | Core",
    "keywords": "Struct YVRSpatialAnchorSupportedComponent Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorSupportedComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields components numComponents"
  },
  "api/YVR.Core.YVRSpatialAnchorSupportedComponent.numComponents.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorSupportedComponent.numComponents.html",
    "title": "Field numComponents | Core",
    "keywords": "Field numComponents Namespace YVR.Core Assembly YVR.Core.Runtime.dll public int numComponents Returns int"
  },
  "api/YVR.Core.YVRSpatialAnchorUUID.Id.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorUUID.Id.html",
    "title": "Field Id | Core",
    "keywords": "Field Id Namespace YVR.Core Assembly YVR.Core.Runtime.dll public char[] Id Returns char[]"
  },
  "api/YVR.Core.YVRSpatialAnchorUUID.html": {
    "href": "api/YVR.Core.YVRSpatialAnchorUUID.html",
    "title": "Struct YVRSpatialAnchorUUID | Core",
    "keywords": "Struct YVRSpatialAnchorUUID Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRSpatialAnchorUUID Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Id"
  },
  "api/YVR.Core.YVRTrackingDebug.CameraOrientationText.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.CameraOrientationText.html",
    "title": "Field CameraOrientationText | Core",
    "keywords": "Field CameraOrientationText Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text CameraOrientationText Returns Text"
  },
  "api/YVR.Core.YVRTrackingDebug.CameraPositionText.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.CameraPositionText.html",
    "title": "Field CameraPositionText | Core",
    "keywords": "Field CameraPositionText Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text CameraPositionText Returns Text"
  },
  "api/YVR.Core.YVRTrackingDebug.ControllerOrientationText.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.ControllerOrientationText.html",
    "title": "Field ControllerOrientationText | Core",
    "keywords": "Field ControllerOrientationText Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text ControllerOrientationText Returns Text"
  },
  "api/YVR.Core.YVRTrackingDebug.ControllerPositionText.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.ControllerPositionText.html",
    "title": "Field ControllerPositionText | Core",
    "keywords": "Field ControllerPositionText Namespace YVR.Core Assembly YVR.Core.Runtime.dll public Text ControllerPositionText Returns Text"
  },
  "api/YVR.Core.YVRTrackingDebug.InitDebugHub.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.InitDebugHub.html",
    "title": "Method InitDebugHub | Core",
    "keywords": "Method InitDebugHub Namespace YVR.Core Assembly YVR.Core.Runtime.dll InitDebugHub() protected override void InitDebugHub()"
  },
  "api/YVR.Core.YVRTrackingDebug.UpdateDebugInfo.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.UpdateDebugInfo.html",
    "title": "Method UpdateDebugInfo | Core",
    "keywords": "Method UpdateDebugInfo Namespace YVR.Core Assembly YVR.Core.Runtime.dll UpdateDebugInfo() protected override void UpdateDebugInfo()"
  },
  "api/YVR.Core.YVRTrackingDebug.html": {
    "href": "api/YVR.Core.YVRTrackingDebug.html",
    "title": "Class YVRTrackingDebug | Core",
    "keywords": "Class YVRTrackingDebug Namespace YVR.Core Assembly YVR.Core.Runtime.dll [ExcludeFromDocs] public class YVRTrackingDebug : YVRDebugHub Inheritance object Object Component Behaviour MonoBehaviour YVRDebugHub YVRTrackingDebug Inherited Members YVRDebugHub.Start() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields CameraOrientationText CameraPositionText ControllerOrientationText ControllerPositionText Methods InitDebugHub() UpdateDebugInfo()"
  },
  "api/YVR.Core.YVRTrackingStateManager.Initialize.html": {
    "href": "api/YVR.Core.YVRTrackingStateManager.Initialize.html",
    "title": "Method Initialize | Core",
    "keywords": "Method Initialize Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initialize() Initialize tracking space and IPD setting public void Initialize()"
  },
  "api/YVR.Core.YVRTrackingStateManager.TrackingSpace(Enum).html": {
    "href": "api/YVR.Core.YVRTrackingStateManager.TrackingSpace(Enum).html",
    "title": "Enum YVRTrackingStateManager.TrackingSpace | Core",
    "keywords": "Enum YVRTrackingStateManager.TrackingSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll Initial camera height public enum YVRTrackingStateManager.TrackingSpace Fields EyeLevel = 0 camera default high is 0. FloorLevel = 1 The default height of the camera is the height of the boundary setting. Stage = 3 Not affected by Recenter"
  },
  "api/YVR.Core.YVRTrackingStateManager.html": {
    "href": "api/YVR.Core.YVRTrackingStateManager.html",
    "title": "Class YVRTrackingStateManager | Core",
    "keywords": "Class YVRTrackingStateManager Namespace YVR.Core Assembly YVR.Core.Runtime.dll Encapsulate all tracking related operation [Serializable] public class YVRTrackingStateManager Inheritance object YVRTrackingStateManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties trackingSpace Set or get the tracking space of the rigid poses Methods Initialize() Initialize tracking space and IPD setting"
  },
  "api/YVR.Core.YVRTrackingStateManager.trackingSpace(Property).html": {
    "href": "api/YVR.Core.YVRTrackingStateManager.trackingSpace(Property).html",
    "title": "Property trackingSpace | Core",
    "keywords": "Property trackingSpace Namespace YVR.Core Assembly YVR.Core.Runtime.dll trackingSpace Set or get the tracking space of the rigid poses public YVRTrackingStateManager.TrackingSpace trackingSpace { get; set; } Property Value YVRTrackingStateManager.TrackingSpace"
  },
  "api/YVR.Core.YVRTriangleMesh.html": {
    "href": "api/YVR.Core.YVRTriangleMesh.html",
    "title": "Struct YVRTriangleMesh | Core",
    "keywords": "Struct YVRTriangleMesh Namespace YVR.Core Assembly YVR.Core.Runtime.dll public struct YVRTriangleMesh Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields indices vertices"
  },
  "api/YVR.Core.YVRTriangleMesh.indices.html": {
    "href": "api/YVR.Core.YVRTriangleMesh.indices.html",
    "title": "Field indices | Core",
    "keywords": "Field indices Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<int> indices Returns List<int>"
  },
  "api/YVR.Core.YVRTriangleMesh.vertices.html": {
    "href": "api/YVR.Core.YVRTriangleMesh.vertices.html",
    "title": "Field vertices | Core",
    "keywords": "Field vertices Namespace YVR.Core Assembly YVR.Core.Runtime.dll public List<Vector3> vertices Returns List<Vector3>"
  },
  "api/YVR.Core.html": {
    "href": "api/YVR.Core.html",
    "title": "Namespace YVR.Core | Core",
    "keywords": "Namespace YVR.Core Classes CylinderShapeHandler Equirect2ShapeHandler EquirectShapeHandler ExtendUsages EyeTrackingData HandInteractEffectController InputDeviceTest QuadShapeHandler VRApiHandlersTrigger YVRBaseRig Base class of rigid class YVRBoundary Provides access to the boundary system. YVRCameraRenderer Encapsulate all rendering related operation and data YVRCameraRig Encapsulate all camera rigid related operations and data YVRCompositeLayer Used to represent composite layer, which contains overlay / underlay YVRControllerEmulator YVRControllerRig Encapsulate all controllers rigid related operations and information YVRCurvedUIRaycaster YVRDebugHub YVREventTracking YVREventsManager The manager for events YVRGraphicRaycaster Raycaster used for raycasting graphic targets YVRHMDEmulator YVRHMDManager The manager for hmd device data YVRHand YVRHandAnimController YVRHandManager YVRHandUtility YVRInput Implements all controllers input state related functions YVRInputDebug YVRInputModule Override PointerInputModule to allow UI to interact with custom ray YVRInputModule.YVRInputDataBaseProvider The base class of the input data provider YVRInputModule.YVRInputDataDummyProvider YVRInputModule.YVRInputDataHMDProvider YVRInputModule.YVRInputDataLControllerProvider YVRInputModule.YVRInputDataLHandTrackingProvider YVRInputModule.YVRInputDataRControllerProvider YVRInputModule.YVRInputDataRHandTrackingProvider YVRLayerAndroidHandler YVRLayerEditorHandle YVRManager The general manager class of whole sdk which holds other managers and controls the lifecycle of the vr mode YVRMeshTracking YVRNativeLog2YLogLoggerAdapter Make native log output by YLog rather than android logcat YVRPerformanceManager The manager for device performance YVRPhysicsRaycaster Raycaster used for raycasting physics targets YVRPlaneDetectorMgr YVRPlugin YVRPluginAndroid YVRPluginWin YVRPointerEventData Almost the same with UnityEngin.EventSystems.PointerEventData, expects that a new Ray fields indicates the ray used for interacting YVRQualityManager Manager for rendering quality YVRRaycastLaserBeam Class for drawing raycasting laser beam YVRRenderLayerExtensions YVRSceneAnchor YVRSemanticClassification YVRSpatialAnchor YVRTrackingDebug YVRTrackingStateManager Encapsulate all tracking related operation Structs EmulatorRotationSensitivity EmulatorTranslationSensitivity EyeTrackingData.EyeGazePose EyeTrackingData.EyeGazeState EyeTrackingData.EyeGazesState HandData HandJointLocation HandJointLocations HandJointVelocity HandTrackingAimState PoseData Posef XRPose XRSize YVRAnchorSemanticLabel YVRAnchorTriangleMeshInternal YVRBoundary.BoundaryTestResult The test results of boundary system queries. YVRBoundary2D YVRCameraRenderer.EyeFov Contains full fov information per eye in degree Under Symmetric Fov mode, UpFov == DownFov and LeftFov == RightFov. YVRCameraRenderer.EyeRenderDescription Specifies the size and field-of-view for one eye texture. YVRControllerEmulator.EmulatorKeyMapping YVRExtent2DInt YVRGraphicRaycaster.RaycastHit YVRHMDEmulator.TranslationKeys YVRHandAnimController.YVRHandControllerAnimData YVRLayerCreateInfo YVRPlaneDetectorLocation YVRPlaneDetectorLocationsInternal YVRPlaneDetectorPolygonBuffer YVRPlaneDetectorPolygonBufferInternal YVRPlaneDetectorPolygonBuffersInternal YVRPlugin.ControllerState YVRQuerySpatialAnchorResult YVRRect2D YVRRect3D YVRRoomLayout YVRSceneAnchorContainer YVRSceneCaptureRequest YVRSpatialAnchorComponentStatus YVRSpatialAnchorComponentStatusSetInfo YVRSpatialAnchorListSaveInfo YVRSpatialAnchorQueryInfo YVRSpatialAnchorResult YVRSpatialAnchorSaveCompleteInfo YVRSpatialAnchorSaveInfo YVRSpatialAnchorSetStatusCompleteInfo YVRSpatialAnchorShareInfo YVRSpatialAnchorSupportedComponent YVRSpatialAnchorUUID YVRTriangleMesh Interfaces ILayerShapeHandler IYVRLayerHandle Enums ActiveInputDevice ControllerType Flags identifying controller type DataProviderSource Enums for input data provider DeviceNode EyeSide HandJoint HandStatus HandType Step StereoRenderingMode XRHandFingerID YVRAnchorLocationFlags YVRBaseRig.RigUpdateType YVRBaseRig.YVRXRDeviceNode YVRBoundary.BoundaryNode Specifies a tracked node that can be queried through the boundary system. YVRControllerEmulator.EmulateController YVREventType YVRInput.RawAxis1D Raw 1D Axis mapping for controller YVRInput.RawAxis2D Raw 2D Axis mapping for controllers YVRInput.RawButton Raw button mapping for controller YVRInput.RawTouch Raw touch mapping for controllers YVRInput.VirtualAxis1D Virtual 1D Axis mapping for controller YVRInput.VirtualAxis2D Virtual 2D Axis mapping for controllers YVRInput.VirtualButton Virtual button mapping for controllers YVRInput.VirtualTouch Virtual touch mapping for controllers YVRManager.HandTrackingSupport YVRManager.YVRFeatureSupport YVRMeshBlockChangeState YVRPlaneChangeState YVRPlaneDetectorOrientation YVRPlaneDetectorSemanticType YVRPlaneDetectorState YVRQualityManager.AdapterResolutionPolicy YVRQualityManager.FixedFoveatedRenderingDynamic YVRQualityManager.FixedFoveatedRenderingLevel The level of fixed foveated rendering YVRQualityManager.LayerSettingsType YVRQualityManager.VSyncCount VSync count every frame. YVRRenderLayerEyeMask YVRRenderLayerType YVRSpaceLocationFlags YVRSpatialAnchorComponentType YVRSpatialAnchorQueryType YVRSpatialAnchorStorageLocation YVRTrackingStateManager.TrackingSpace Initial camera height"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Core",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}